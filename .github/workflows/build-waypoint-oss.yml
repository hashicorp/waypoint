---
name: build_waypoint

on:
  workflow_call:
    inputs:
      bundle-path:
        required: false
        type: string
      cgo-enabled:
        type: string
        default: 0
      create-packages:
        type: boolean
        default: true
      goos:
        required: true
        type: string
      goarch:
        required: true
        type: string
      go-tags:
        type: string
      go-version:
        type: string
      package-name:
        type: string
        required: true
      waypoint-version:
        type: string
        required: true
      waypoint-base-version:
        type: string
        required: true
      waypoint-prerelease:
        type: string
        required: true
      waypoint-metadata:
        type: string
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      bin-name: ${{ steps.get-bin-name.outputs.bin-name }}
    name: Build ${{ inputs.package-name }} ${{ inputs.goos }} ${{ inputs.goarch }} v${{ inputs.waypoint-version }}
    steps:
      - uses: actions/checkout@v3
      - name: Restore ui assets
        uses: actions/cache/restore@v3
        with:
          path: ui/dist/assets
          key: ui_assets_${{ github.sha }}
          fail-on-cache-miss: true
          enableCrossOsArchive: true
      - name: Restore build assets
        uses: actions/cache/restore@v3
        with:
          path: internal/assets
          key: build_assets_${{ github.sha }}
          fail-on-cache-miss: true
          enableCrossOsArchive: true
      - name: Determine binary name
        id: get-bin-name
        run: |
          bin_name="${{ inputs.package-name }}"
          if [ "${{ inputs.goos }}" == "windows" ];then
               bin_name="${bin_name}.exe"
          fi
          echo "bin-name=${bin_name}" | tee -a "${GITHUB_OUTPUT}"
      - name: Build binary
        env:
          GOOS: ${{ inputs.goos }}
          GOARCH: ${{ inputs.goarch }}
          WAYPOINT_GOOS: ${{ inputs.goos }}
          WAYPOINT_GOARCH: ${{ inputs.goarch }}
          BASE_VERSION: ${{ inputs.waypoint-base-version }}
          PRERELEASE: ${{ inputs.waypoint-prerelease }}
          CGO_ENABLED: ${{ inputs.cgo-enabled }}
          CRT_BIN_NAME: ${{ steps.get-bin-name.outputs.bin-name }}
        uses: hashicorp/actions-go-build@v0.1.7
        with:
          product_name: ${{ inputs.package-name }}
          product_version: ${{ inputs.waypoint-version }}
          go_version: ${{ inputs.go-version }}
          os: ${{ inputs.goos }}
          arch: ${{ inputs.goarch }}
          reproducible: nope
          instructions: |
            make bin/crt-${{ inputs.package-name }}
      - name: Determine packaging version suffix
        id: version-suffix
        run: |-
          if [ -n "${{inputs.waypoint-metadata}}" ] && [ "${{inputs.waypoint-metadata}}" != "oss" ]; then
            echo "value=+${{inputs.waypoint-metadata}}" >> "${GITHUB_OUTPUT}"
          else
            echo "value=" >> "${GITHUB_OUTPUT}"
          fi
      - name: Linux packaging
        id: packaging
        if: ${{ (inputs.goos == 'linux') && (inputs.package-name == 'waypoint') && (inputs.goarch != '386') }}
        uses: hashicorp/actions-packaging-linux@v1
        with:
          name: ${{ inputs.package-name }}
          description: ${{ inputs.package-name }}
          arch: ${{ inputs.goarch }}
          version: ${{ inputs.waypoint-version }}${{ steps.version-suffix.outputs.value }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/waypoint"
          license: "MPL-2.0"
          binary: "dist/${{ inputs.package-name }}"
          deb_depends: "git"
          rpm_depends: "git"
      - name: Set Package Names
        if: steps.packaging.conclusion == 'success'
        run: |
          echo "RPM_PACKAGE=$(basename out/*.rpm)" >> "$GITHUB_ENV"
          echo "DEB_PACKAGE=$(basename out/*.deb)" >> "$GITHUB_ENV"
      - name: Upload rpm package
        uses: actions/upload-artifact@v2
        if: steps.packaging.conclusion == 'success'
        with:
          name: ${{ env.RPM_PACKAGE }}
          path: out/${{ env.RPM_PACKAGE }}
      - name: Upload deb package
        uses: actions/upload-artifact@v2
        if: steps.packaging.conclusion == 'success'
        with:
          name: ${{ env.DEB_PACKAGE }}
          path: out/${{ env.DEB_PACKAGE }}
