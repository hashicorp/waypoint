name: integration tests
on:
  pull_request:

permissions:
  contents: read
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version-file: go.mod
      - name: Download go modules
        run: go mod download
      - name: Install golangci-lint
        run: |-
          download=https://raw.githubusercontent.com/golangci/golangci-lint/9a8a056e9fe49c0e9ed2287aedce1022c79a115b/install.sh  # v1.52.2
          curl -sSf "$download" | sh -s v1.50.1
      - run: go mod download
      - name: lint
        run: |-
          ./bin/golangci-lint run -v --concurrency 2 \
            --disable-all \
            --timeout 10m \
            --enable gofmt \
            --enable gosimple \
            --enable govet

  frontend-cache:
    runs-on: ubuntu-latest
    outputs:
      yarn-cache-key: ${{ steps.set-cache-key.outputs.cache-key}}
    steps:
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1

      - name: set-cache-key
        id: set-cache-key
        run: echo "cache-key=waypoint-ui-v1-${{ hashFiles('ui/yarn.lock', 'ui/lib/**') }}" | tee -a "${GITHUB_OUTPUT}"

      - name: restore-cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          key: "${{ steps.set-cache-key.outputs.cache-key }}"
          path: |-
            ui/node_modules
            ui/lib/node_modules

      - uses: actions/setup-node@v3
        if: steps.restore-cache.outputs.cache-hit == false
        with:
          node-version: 14

      - name: install yarn packages
        if: steps.restore-cache.outputs.cache-hit == false
        run: yarn install
        working-directory: ui

  dev-build:
    runs-on: ubuntu-latest
    needs:
      - frontend-cache
    steps:
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version-file: go.mod
      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
        with:
          node-version: 14

      - name: restore-cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          key: ${{ needs.frontend-cache.outputs.yarn-cache-key }}
          path: |-
            ui/node_modules
            ui/lib/node_modules

      - name: install yarn packages
        run: yarn install
        working-directory: ui

      - name: Make UI
        run: make
        working-directory: ui

      - name: Make static assets (bindata_ui)
        run: |-
          go install github.com/kevinburke/go-bindata/...
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"
          make static-assets

      - name: Make waypoint binary
        run: |-
          pwd
          make bin
          pushd dist
          tar -cvf ../waypoint.tar ./waypoint
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          path: waypoint.tar
          name: waypoint.tar

  integration:
    needs:
      - dev-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
      # FIXME: Figure out how to install k3s.
      # 1) Port the action? Use e different action?
      # 2) Fix the srart-up (is it a performance issue? Do we need to wait longer?)
#      - uses: debianmaster/actions-k3s@master
#        id: k3s
#        with:
#          version: v1.23.8-k3s2
#      - name: Setup k3s
#        run: |-
#          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="v1.23.8+k3s2" INSTALL_K3S_EXEC="--docker --disable=traefik --write-kubeconfig-mode=664" sh -
#          systemd cat k3s.service
#          systemd status k3s
      # k3d is the k3s recommended way to run in docker
      # https://docs.k3s.io/advanced#running-k3s-in-docker
      #
      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: v1.23.8+k3s2
          github-token: ${{secrets.GITHUB_TOKEN}}  # to bypass rate-limiting with anonymous access
          k3d-args: --registry-config=./ci/registry-config.yml
#      - name: Install kind and kubectl
#        uses: helm/kind-action@d8ccf8fb623ce1bb360ae2f45f323d9d5c5e9f00 # pin@v1.5.0
#        with:
#          version: ${{ inputs.kind-version }}
#          kubectl_version: ${{ inputs.kubectl-version }}
#          install_only: true
#          verbosity: 10
#      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
#      - name: Setup k3s
#        run: |-
#          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="v1.23.8+k3s2" INSTALL_K3S_EXEC="--docker --disable=traefik --write-kubeconfig-mode 664" sh -
#          systemd status k3s
#
#      - name: Validate k3s is online
#        run: >-
#          timeout 60s bash -c 'trap "echo Failed, timeout reached while waiting for kubernetes to launch 1>&2" SIGTERM; while ! kubectl get node 2>/dev/null ; do sleep 1 ; done; echo "Connected, ok"'
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: waypoint.tar
      - name: Execute Integration Tests
        run: |-
          tar -xvf waypoint.tar
          ./ci/integration.sh

# FIXME: Is this CRT-able?
#  alpha-image:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    needs:
#      - dev-build
#      - integration
#    env:
#      REGISTRY: ghcr.io
#    permissions:
#      packages: write
#      contents: read
#    steps:
#      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
#      - name: Log in to the Container registry
#        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
#        with:
#          name: waypoint.tar
#      - name: Uncompress waypoint artifact
#        run: tar -xvf waypoint.tar
#      - name: 'Docker: Build image (waypoint)'
#        run: |-
#          docker build \
#            --progress=plain \
#            -t ${{env.REGISTRY}}/hashicorp/waypoint/alpha:latest \
#            -t "${{env.REGISTRY}}/hashicorp/waypoint/alpha:$GIT_COMMIT" \
#            .
#      - name: 'Docker: Push image (waypoint)'
#        run: docker push --all-tags docker.pkg.github.com/hashicorp/waypoint/alpha
#
#  alpha-odr-image:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    needs:
#      - dev-build
#      - integration
#    env:
#      REGISTRY: ghcr.io
#    permissions:
#      packages: write
#      contents: read
#    steps:
#      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
#      - name: Log in to the Container registry
#        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
#        with:
#          name: waypoint.tar
#      - name: Unpack
#        run: tar -xvf waypoint.tar
#      - name: 'Docker: Build image (waypoint-odr)'
#        run: |-
#          docker build \
#            --target odr \
#            --progress=plain \
#            -t ${{env.REGISTRY}}/hashicorp/waypoint/alpha-odr:latest \
#            -t "${{env.REGISTRY}}/hashicorp/waypoint/alpha-odr:$GIT_COMMIT" \
#            .
#      - name: 'Docker: Push image (waypoint-odr)'
#        run: docker push --all-tags docker.pkg.github.com/hashicorp/waypoint/alpha-odr
#      #- uses: "./.github/actions/notify_main_failure"
#
#  e2e-docker:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    needs:
#      - alpha-image
#      - alpha-odr-image
#    env:
#      E2E_PLATFORM: Docker
#    steps:
#      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
#      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
#        with:
#          name: waypoint.tar
#      - run: |-
#          tar -xvf waypoint.tar
#          go version
#      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
#        with:
#          go-version-file: go.mod
#      - name: Execute E2E Docker Tests
#        run: "./test-e2e/run-test.sh"
#      #- uses: "./.github/actions/notify_main_failure"
#
