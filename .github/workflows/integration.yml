name: integration tests
on:
  pull_request:
permissions:
  contents: read
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version-file: go.mod
      - run: go mod download
      - name: Run Linter
        uses: golangci/golangci-lint-action@08e2f20817b15149a52b5b3ebe7de50aff2ba8c5 # v3.4.0
        with:
          version: v1.51
          args: >-
            --timeout 10m
            --enable gofmt
            --enable gosimple
            --enable govet

#  frontend-cache:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
#      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
#        with:
#          node-version: 14.x
#      - name: Install Yarn
#        run: npm install -g yarn
#      - run: find ui/lib -type f | sort | xargs md5sum > uilib.md5
##      - name: Setup Nodejs with yarn caching
##        uses: actions/setup-node@v2
##        with:
##          node-version: "14"
##          cache: yarn
##          cache-dependency-path: ui/yarn.lock
#      - name: restore_cache
#        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
#        with:
#          key: waypoint-ui-v1-{{ checksum "ui/yarn.lock" }}-{{ checksum "uilib.md5" }}
#          path: |-
#            ui/node_modules
#            ui/lib/node_modules
#      - name: install yarn packages
#        run: cd ui && yarn install

  dev-build:
    runs-on: ubuntu-latest
#    needs:
#      - frontend-cache
    steps:
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version-file: go.mod
      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
        with:
          node-version: 14.x
      - name: Setup Nodejs with yarn caching
        uses: actions/setup-node@v3
        with:
          node-version: "14"
          cache: yarn
          cache-dependency-path: ui/yarn.lock
      - name: Install Yarn
        run: npm install -g yarn
      - name: Make UI
        run: cd ui && make
      - name: Make static assets (bindata_ui)
        run: |-
          go install github.com/kevinburke/go-bindata/...
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"
          make static-assets
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          path: "pkg/server/gen/bindata_ui.go"
          name: bindata_ui.go
      - name: Make waypoint binary
        run: |-
          make bin
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          path: waypoint
          name: waypoint

# FIXME: I *think* this is likely something that should be in a separate workflow.
#  publish-static-assets:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    needs:
#      - build-static-assets
#    steps:
#      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
#      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
#        with:
#          path: "waypoint"
#      - name: commit pkg/server/gen/bindata_ui.go
#        run: |-
#          # check if there are any changes in ui/
#          # if there are, we commit the ui static asset file
#          last_ui_commit=$(git log -n 1 --pretty=format:%!H(MISSING) -- pkg/server/gen/bindata_ui.go)
#          if ! git diff --quiet --exit-code $last_ui_commit ui/; then
#            git config --local user.email "github-team-waypoint@hashicorp.com"
#            git config --local user.name "hc-github-team-waypoint"
#            short_sha=$(git rev-parse --short HEAD)
#            git add pkg/server/gen/bindata_ui.go
#            git commit -m "auto-updated pkg/server/gen/bindata_ui.go from commit ${short_sha}"
#            git push origin main
#          else
#            echo "no UI changes so no static assets to publish"
#          fi
#      - uses: "./.github/actions/notify_main_failure"
  integration:
    needs:
      - dev-build
    runs-on: ubuntu-latest
    steps:
      - uses: debianmaster/actions-k3s@master
        id: k3s
        with:
          version: v1.23.8-k3s2
#      - uses: nolar/setup-k3d-k3s@v1
#        with:
#          version: v1.23.8+k3s2
#          github-token: ${{secrets.GITHUB_TOKEN}}  # to bypass rate-limiting with anonymous access
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
#      - name: Setup k3s
#        run: |-
#          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="v1.23.8+k3s2" INSTALL_K3S_EXEC="--docker --disable=traefik --write-kubeconfig-mode 664" sh -
#          sleep 5
      - name: Get k3s nodes
        run: kubectl get node
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          path: waypoint
          name: waypoint
      - name: Execute Integration Tests
        run: "./ci/integration.sh"

  alpha-image:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - dev-build
      - integration
    env:
      REGISTRY: ghcr.io
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          path: waypoint
          name: waypoint
      - name: 'Docker: Build image (waypoint)'
        run: |-
          docker build \
            --progress=plain \
            -t ${{env.REGISTRY}}/hashicorp/waypoint/alpha:latest \
            -t "${{env.REGISTRY}}/hashicorp/waypoint/alpha:$GIT_COMMIT" \
            .
      - name: 'Docker: Push image (waypoint)'
        run: docker push --all-tags docker.pkg.github.com/hashicorp/waypoint/alpha

  alpha-odr-image:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - dev-build
      - integration
    env:
      REGISTRY: ghcr.io
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          path: waypoint
          name: waypoint
      - name: 'Docker: Build image (waypoint-odr)'
        run: |-
          docker build \
            --target odr \
            --progress=plain \
            -t ${{env.REGISTRY}}/hashicorp/waypoint/alpha-odr:latest \
            -t "${{env.REGISTRY}}/hashicorp/waypoint/alpha-odr:$GIT_COMMIT" \
            .
      - name: 'Docker: Push image (waypoint-odr)'
        run: docker push --all-tags docker.pkg.github.com/hashicorp/waypoint/alpha-odr
      #- uses: "./.github/actions/notify_main_failure"

  e2e-docker:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - alpha-image
      - alpha-odr-image
    env:
      E2E_PLATFORM: Docker
    steps:
      - uses: actions/checkout@83b7061638ee4956cf7545a6f7efe594e5ad0247 # v3.5.1
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          path: waypoint
          name: waypoint
      - run: go version
      - name: Install go v1.19.4
        run: |-
          curl -SL --fail -o /tmp/golang.tar.gz https://dl.google.com/go/go1.19.4.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local/ -xzf /tmp/golang.tar.gz
          rm -rf /tmp/golang.tar.gz
          go version
      - name: Execute E2E Docker Tests
        run: "./test-e2e/run-test.sh"
      - uses: "./.github/actions/notify_main_failure"

