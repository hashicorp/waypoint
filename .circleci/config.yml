---
version: 2.1

references:
  images:
    go: &GOLANG_IMAGE docker.mirror.hashicorp.services/circleci/golang:1.15.3
    middleman: &MIDDLEMAN_IMAGE docker.mirror.hashicorp.services/hashicorp/middleman-hashicorp:0.3.44
    ember: &EMBER_IMAGE docker.mirror.hashicorp.services/circleci/node:12-browsers

  paths:
    test-results: &TEST_RESULTS_DIR /tmp/test-results

  cache:
    yarn: &YARN_CACHE_KEY waypoint-ui-v1-{{ checksum "ui/yarn.lock" }}-{{ checksum "uilib.md5" }}
    rubygem: &RUBYGEM_CACHE_KEY static-site-gems-v1-{{ checksum "Gemfile.lock" }}

  environment: &ENVIRONMENT
    TEST_RESULTS_DIR: *TEST_RESULTS_DIR
    GOTESTSUM_RELEASE: 0.4.2
    EMAIL: noreply@hashicorp.com
    GIT_AUTHOR_NAME: circleci-waypoint
    GIT_COMMITTER_NAME: circleci-waypoint
    BASH_ENV: /home/circleci/project/.circleci/bash_env.sh
    DOCKER_BUILDKIT: 1
    REBUILD_UI: &REBUILD_UI 1

jobs:
  # Runs Go linters
  lint:
    docker:
      - image: *GOLANG_IMAGE
    environment:
      GOTAGS: ""
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98"
      - checkout
      - run:
          name: Install golangci-lint
          command: |
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -x -s -- -d -b /go/bin/ v1.27.0
      - run: go mod download
      - run:
          name: lint
          command: &lintcmd |
            golangci-lint run --build-tags="$GOTAGS" -v --concurrency 2 \
              --disable-all \
              --timeout 10m \
              --enable gofmt \
              --enable gosimple \
              --enable govet
      - notify_main_failure

  # checks vendor directory is correct
  check-vendor:
    docker:
      - image: *GOLANG_IMAGE
    environment:
      <<: *ENVIRONMENT
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98"
      - checkout
      - run:
          command: go mod tidy
      - run: |
          if ! git diff --exit-code; then
            echo "Git directory has vendor changes"
            exit 1
          fi
      - notify_main_failure

  go-test:
    docker:
      - image: *GOLANG_IMAGE
      - image: docker.mirror.hashicorp.services/localstack/localstack:latest
      - image: docker.mirror.hashicorp.services/letsencrypt/pebble
        command: ["pebble"]
        environment:
          PEBBLE_VA_NOSLEEP: 1
          PEBBLE_VA_ALWAYS_VALID: 1
      - image: docker.mirror.hashicorp.services/circleci/postgres:11-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: waypoint_test
      - image: docker.mirror.hashicorp.services/vault
        command: ["server", "-dev", "-dev-root-token-id=hznroot"]
    parallelism: 4
    environment:
      <<: *ENVIRONMENT
      GOTAGS: ""
      # GOMAXPROCS defaults to number of cores on underlying hardware, set
      # explicitly to avoid OOM issues https://support.circleci.com/hc/en-us/articles/360034684273-common-GoLang-memory-issues
      GOMAXPROCS: 4
      # The medium resource class (default) boxes are 2 vCPUs, 4GB RAM
      # https://circleci.com/docs/2.0/configuration-reference/#docker-executor
      # but we can run a little over that limit.
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98"
      - checkout
      - attach_workspace:
          at: /go/bin
      - setup_remote_docker:
          docker_layer_cache: true
      - run: &install_gotestsum
          name: Install gotestsum
          command: |
            url=https://github.com/gotestyourself/gotestsum/releases/download
            curl -sSL "${url}/v${GOTESTSUM_RELEASE}/gotestsum_${GOTESTSUM_RELEASE}_linux_amd64.tar.gz" | \
              sudo tar -xz --overwrite -C /usr/local/bin gotestsum
      - run: go mod download
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: go test
          command: |
            mkdir -p $TEST_RESULTS_DIR
            PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
            echo "Running $(echo $PACKAGE_NAMES | wc -w) packages"
            echo $PACKAGE_NAMES
            gotestsum --format=short-verbose \
              --junitfile $TEST_RESULTS_DIR/gotestsum-report.xml -- \
              -tags="$GOTAGS" -p 2 \
              -cover -coverprofile=coverage.txt \
              $PACKAGE_NAMES
      - store_test_results:
          path: *TEST_RESULTS_DIR
      - store_artifacts:
          path: *TEST_RESULTS_DIR
      - notify_main_failure

  # create a development build
  dev-build:
    docker:
      - image: *GOLANG_IMAGE
    environment:
      <<: *ENVIRONMENT
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98"
      - checkout
      - attach_workspace: # this normally runs as the first job and has nothing to attach; only used in main branch after rebuilding UI
          at: .
      - run:
          command: |
            go get github.com/kevinburke/go-bindata/...
            PATH=/go/bin:$PATH make bin
            cp waypoint /go/bin
      # save dev build to pass to downstream jobs
      - persist_to_workspace:
          root: /go/bin
          paths:
            - waypoint
      - notify_main_failure

  integration:
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run:
          name: Setup k3s
          command: |
            curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--docker --disable=traefik --write-kubeconfig-mode 664" sh -
            sleep 5
      - run:
          name: Get k3s nodes
          command: |
            kubectl get node
      - attach_workspace:
          at: .
      - run:
          name: Execute Integration Tests
          command: ./ci/integration.sh
      - notify_main_failure

  image-release:
    docker:
      # Use a modern Circle image as we just need up-to-date Docker here
      - image: docker.mirror.hashicorp.services/cimg/base:2020.07-20.04
    environment:
      <<: *ENVIRONMENT
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98"
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          # We require > 17.06 to support --mount being
          # passed to RUN
          version: 19.03.8
      - attach_workspace:
          at: .
      - run:
          name: "Docker: Login to GitHub Package Registry"
          command: |
            echo "$GH_DOCKER_PASS" | docker login docker.pkg.github.com --username $GH_DOCKER_USER --password-stdin
      - run:
          name: "Docker: Build image"
          command: |
            # Note that the "id_rsa_FOO" key name is based on the fingerprint of the SSH key
            # added in add_ssh_keys, but with colons removed.
            docker build \
              --ssh default \
              --secret id=ssh.config,src="${HOME}/project/.circleci/ssh_config" \
              --secret id=ssh.key,src="${HOME}/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98" \
              --progress=plain \
              -t docker.pkg.github.com/hashicorp/waypoint/alpha:latest \
              -t docker.pkg.github.com/hashicorp/waypoint/alpha:$GIT_COMMIT \
              .
      - run:
          name: "Docker: Push image"
          command: |
            docker push docker.pkg.github.com/hashicorp/waypoint/alpha
      - notify_main_failure

  # build frontend yarn cache
  frontend-cache:
    docker:
      - image: *EMBER_IMAGE
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - md5uilib
      # cache yarn deps
      - restore_cache:
          key: *YARN_CACHE_KEY
      - run:
          name: install yarn packages
          command: cd ui && yarn install
      - save_cache:
          key: *YARN_CACHE_KEY
          paths:
            - ui/node_modules
            - ui/lib/node_modules
      - notify_main_failure

  # build ember so frontend tests run faster
  # ember-build-tests:
  #   docker:
  #     - image: *EMBER_IMAGE
  #   environment:
  #     JOBS: 2 # limit parallelism for broccoli-babel-transpiler
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         key: *YARN_CACHE_KEY
  #     - run: cd ui && make build-ci

  #     # saves the build to a workspace to be passed to a downstream job
  #     - persist_to_workspace:
  #         root: ui
  #         paths:
  #           - dist
      # - notify_main_failure

  # rebuild UI for packaging
  ember-build-prod:
    docker:
      - image: *EMBER_IMAGE
    environment:
      <<: *ENVIRONMENT
      JOBS: 2 # limit parallelism for broccoli-babel-transpiler
    steps:
      - checkout
      - md5uilib
      - restore_cache:
          key: *YARN_CACHE_KEY
      - run: cd ui && make
      # saves the build to a workspace to be passed to a downstream job
      - persist_to_workspace:
          root: .
          paths:
            - ./ui/dist
      - notify_main_failure

  # build static-assets file and commit
  build-static-assets:
    docker:
      - image: *GOLANG_IMAGE
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98"
      - run: go get github.com/kevinburke/go-bindata/...
      - run: make static-assets
      - persist_to_workspace:
          root: .
          paths:
            - ./internal/server/gen/bindata_ui.go
      - notify_main_failure

  # build static-assets file and commit
  publish-static-assets:
    docker:
      - image: *GOLANG_IMAGE
    environment:
      <<: *ENVIRONMENT
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98"
      - attach_workspace:
          at: .
      - run:
          name: commit internal/server/gen/bindata_ui.go
          command: |
            # check if there are any changes in ui/
            # if there are, we commit the ui static asset file
            # HEAD^! is shorthand for HEAD^..HEAD (parent of HEAD and HEAD)
            if ! git diff --quiet --exit-code HEAD^! ui/; then
              git config --local user.email "hashicorp-ci@users.noreply.github.com"
              git config --local user.name "hashicorp-ci"
              short_sha=$(git rev-parse --short HEAD)
              git add internal/server/gen/bindata_ui.go
              git commit -m "auto-updated internal/server/gen/bindata_ui.go from commit ${short_sha}"
              git push origin main
            else
              echo "no UI changes so no static assets to publish"
            fi
      - notify_main_failure
  
  algolia-index:
    docker:
      - image: docker.mirror.hashicorp.services/node:12
    steps:
      - checkout
      - run:
          name: Push content to Algolia Index
          command: |
            cd website/
            npm install
            node scripts/index_search_content.js

  # # run ember frontend tests
  # ember-test:
  #   docker:
  #     - image: *EMBER_IMAGE
  #   environment:
  #     EMBER_TEST_REPORT: test-results/report-oss.xml #outputs test report for CircleCI test summary
  #     EMBER_TEST_PARALLEL: true #enables test parallelization with ember-exam
  #   parallelism: 2
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         key: *YARN_CACHE_KEY
  #     - attach_workspace:
  #         at: ui
  #     - run:
  #         working_directory: ui
  #         command: node_modules/.bin/ember exam --split=$CIRCLE_NODE_TOTAL --partition=`expr $CIRCLE_NODE_INDEX + 1` --path dist --silent -r xunit
  #     - store_test_results:
  #         path: ui/test-results

  # ember-coverage:
  #   docker:
  #     - image: *EMBER_IMAGE
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         key: *YARN_CACHE_KEY
  #     - attach_workspace:
  #         at: ui
  #     - run:
  #         working_directory: ui
  #         command: make test-coverage-ci

workflows:
  version: 2
  go-tests:
    jobs:
      - lint
      - check-vendor:
          requires:
            - lint
      - go-test:
          requires:
            - lint
      - dev-build:
          requires:
            - lint
          filters:
            branches:
              ignore:
                - main

  integration:
    jobs:
      - lint
      - frontend-cache:
          requires:
            - lint
      - ember-build-prod:
          requires:
            - frontend-cache
      - build-static-assets:
          requires:
            - ember-build-prod
      - dev-build:
          requires:
            - build-static-assets
      - publish-static-assets:
          filters:
            branches:
              only:
                - main
          requires:
            - build-static-assets
      - integration:
          requires:
            - dev-build
      - image-release:
          requires:
            - integration
          filters:
            branches:
              only:
                - main
  website:
      jobs:
        - algolia-index:
          filters:
            branches:
              only:
                - stable-website

  # website:
  #   jobs:
  #     - build-website-docker-image:
  #         context: website-docker-image
  #         filters:
  #           branches:
  #             only:
  #               - main

  # frontend:
  #   jobs:
  #     - frontend-cache:
  #         filters:
  #           branches:
  #             only:
  #               - main
  #     - ember-build:
  #         requires:
  #           - frontend-cache
  #     - ember-test:
  #         requires:
  #           - ember-build
  #     - ember-coverage:
  #         requires:
  #           - ember-build

commands:
  md5uilib:
    description: "md5 hash of ui/lib directory"
    steps:
      - run: find ui/lib -type f | sort | xargs md5sum > uilib.md5
  notify_main_failure:
    steps:
      - run:
          name: Notify failures on main branch
          when: on_fail
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              curl -X POST -H 'Content-type: application/json' \
              --data \
              "{ \
                \"text\": \":warning: Failed job on branch _${CIRCLE_BRANCH}_\", \
                \"attachments\": [ \
                  { \
                    \"fallback\": \":warning: Failed job on branch _${CIRCLE_BRANCH}_\", \
                    \"fields\": [ \
                        { \
                            \"title\": \"User\", \
                            \"value\": \"${CIRCLE_USERNAME}\", \
                            \"short\": \"true\" \
                        }, \
                        { \
                            \"title\": \"Merge commit\", \
                            \"value\": \"<https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|$(echo ${CIRCLE_SHA1} | cut -c1-10)>\", \
                            \"short\": \"true\" \
                        }, \
                        { \
                            \"title\": \"Failed job\", \
                            \"value\": \"<${CIRCLE_BUILD_URL}|${CIRCLE_JOB}>\", \
                            \"short\": \"true\" \
                        }, \
                        { \
                            \"title\": \"Full Workflow\", \
                            \"value\": \"<https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}|${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}>\", \
                            \"short\": \"true\" \
                        } \
                    ], \
                    \"ts\": \"$(date +%s)\", \
                    \"color\": \"danger\" \
                  } \
                ] \
              }" ${SLACK_WEBHOOK}
            fi
