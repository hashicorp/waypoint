// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	hclog "github.com/hashicorp/go-hclog"
	gen "github.com/hashicorp/waypoint/internal/server/gen"

	memdb "github.com/hashicorp/go-memdb"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PollHandler is an autogenerated mock type for the pollHandler type
type PollHandler struct {
	mock.Mock
}

// Complete provides a mock function with given fields: _a0, _a1
func (_m *PollHandler) Complete(_a0 hclog.Logger, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(hclog.Logger, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Peek provides a mock function with given fields: _a0, _a1
func (_m *PollHandler) Peek(_a0 hclog.Logger, _a1 memdb.WatchSet) (interface{}, time.Time, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(hclog.Logger, memdb.WatchSet) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(hclog.Logger, memdb.WatchSet) time.Time); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(hclog.Logger, memdb.WatchSet) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PollJob provides a mock function with given fields: _a0, _a1
func (_m *PollHandler) PollJob(_a0 hclog.Logger, _a1 interface{}) (*gen.QueueJobRequest, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gen.QueueJobRequest
	if rf, ok := ret.Get(0).(func(hclog.Logger, interface{}) *gen.QueueJobRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.QueueJobRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hclog.Logger, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
