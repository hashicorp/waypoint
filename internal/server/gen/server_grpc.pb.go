// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WaypointClient is the client API for Waypoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaypointClient interface {
	// GetVersionInfo returns information about the server. This RPC call does
	// NOT require authentication. It can be used by clients to determine if they
	// are capable of talking to this server.
	GetVersionInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionInfoResponse, error)
	// ListWorkspaces returns a list of all workspaces.
	//
	// Note that currently this list is never pruned, even if a workspace is
	// no longer in use. We plan to prune this in a future improvement.
	ListWorkspaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListWorkspacesResponse, error)
	// GetWorkspace returns the workspace.
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	// UpsertProject upserts the project.
	UpsertProject(ctx context.Context, in *UpsertProjectRequest, opts ...grpc.CallOption) (*UpsertProjectResponse, error)
	// GetProject returns the project.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// ListProjects returns a list of all the projects. There is no equivalent
	// ListApplications because applications are a part of projects and you
	// can use GetProject to get more information about the project.
	ListProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// UpsertApplication upserts an application with a project. If the application
	// is already registered this does nothing.
	UpsertApplication(ctx context.Context, in *UpsertApplicationRequest, opts ...grpc.CallOption) (*UpsertApplicationResponse, error)
	// ListBuilds returns the builds.
	ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	// GetBuild returns a build
	GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// ListPushedArtifacts returns the builds.
	ListPushedArtifacts(ctx context.Context, in *ListPushedArtifactsRequest, opts ...grpc.CallOption) (*ListPushedArtifactsResponse, error)
	// GetPushedArtifact returns a deployment
	GetPushedArtifact(ctx context.Context, in *GetPushedArtifactRequest, opts ...grpc.CallOption) (*PushedArtifact, error)
	// ListDeployments returns the deployments.
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	// ListInstances returns the running instances of deployments.
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// FindExecInstance returns an instance that can be used for an exec session.
	// This is used by the exec cli command to detect if there is a long running
	// instance to connect to or if a virtual instance should be created by running
	// the plugins exec function.
	FindExecInstance(ctx context.Context, in *FindExecInstanceRequest, opts ...grpc.CallOption) (*FindExecInstanceResponse, error)
	// GetDeployment returns a deployment
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	// GetLatestBuild returns the most recent successfully completed build
	// for an app.
	GetLatestBuild(ctx context.Context, in *GetLatestBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// GetLatestPushedArtifact returns the most recent successfully completed
	// artifact push for an app.
	GetLatestPushedArtifact(ctx context.Context, in *GetLatestPushedArtifactRequest, opts ...grpc.CallOption) (*PushedArtifact, error)
	// ListReleases returns the deployments.
	ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error)
	// GetRelease returns a deployment
	GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Release, error)
	// GetLatestRelease returns the most recent successfully completed
	// artifact push for an app.
	GetLatestRelease(ctx context.Context, in *GetLatestReleaseRequest, opts ...grpc.CallOption) (*Release, error)
	// GetLogStream reads the log stream for a deployment. This will immediately
	// send a single LogEntry with the lines we have so far. If there are no
	// available lines this will NOT block and instead will return an error.
	// The client can choose to retry or not.
	GetLogStream(ctx context.Context, in *GetLogStreamRequest, opts ...grpc.CallOption) (Waypoint_GetLogStreamClient, error)
	// StartExecStream starts an exec session.
	StartExecStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_StartExecStreamClient, error)
	// Set a single configuration item for the application.
	SetConfig(ctx context.Context, in *ConfigSetRequest, opts ...grpc.CallOption) (*ConfigSetResponse, error)
	// Retrieve merged configuration values for a specific scope. You can determine
	// where a configuration variable was set by looking at the scope field on
	// each variable.
	GetConfig(ctx context.Context, in *ConfigGetRequest, opts ...grpc.CallOption) (*ConfigGetResponse, error)
	// Set the configuration for a dynamic configuration source. If you're looking
	// to set application configuration, you probably want SetConfig instead.
	SetConfigSource(ctx context.Context, in *SetConfigSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get the matching configuration source for the request. This will return
	// the most specific matching config source given the scope in the request.
	// For example, if you search for an app-specific config source and only
	// a global config exists, the global config will be returned.
	GetConfigSource(ctx context.Context, in *GetConfigSourceRequest, opts ...grpc.CallOption) (*GetConfigSourceResponse, error)
	// Create a hostname with the URL service.
	CreateHostname(ctx context.Context, in *CreateHostnameRequest, opts ...grpc.CallOption) (*CreateHostnameResponse, error)
	// Delete a hostname with the URL service.
	DeleteHostname(ctx context.Context, in *DeleteHostnameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all our registered hostnames.
	ListHostnames(ctx context.Context, in *ListHostnamesRequest, opts ...grpc.CallOption) (*ListHostnamesResponse, error)
	// QueueJob queues a job for execution by a runner. This will return as
	// soon as the job is queued, it will not wait for execution.
	QueueJob(ctx context.Context, in *QueueJobRequest, opts ...grpc.CallOption) (*QueueJobResponse, error)
	// CancelJob cancels a job. If the job is still queued this is a quick
	// and easy operation. If the job is already completed, then this does
	// nothing. If the job is assigned or running, then this will signal
	// the runner about the cancellation but it may take time.
	//
	// This RPC always returns immediately. You must use GetJob or GetJobStream
	// to wait on the status of the cancellation.
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetJob queries a job by ID.
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	// INTERNAL: ListJobs lists all the jobs the server has processed. This
	// is not yet ready for public use.
	XListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	// ValidateJob checks if a job appears valid. This will check the job
	// structure itself (i.e. missing fields) and can also check to ensure
	// the job is assignable to a runner.
	ValidateJob(ctx context.Context, in *ValidateJobRequest, opts ...grpc.CallOption) (*ValidateJobResponse, error)
	// GetJobStream opens a job event stream for a running job. This can be
	// used to listen for terminal output and other events of a running job.
	// Multiple listeners can open a job stream.
	GetJobStream(ctx context.Context, in *GetJobStreamRequest, opts ...grpc.CallOption) (Waypoint_GetJobStreamClient, error)
	// GetRunner gets information about a single runner.
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*Runner, error)
	// GetServerConfig sets configuration for the Waypoint server.
	GetServerConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetServerConfigResponse, error)
	// SetServerConfig sets configuration for the Waypoint server.
	SetServerConfig(ctx context.Context, in *SetServerConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateSnapshot creates a new database snapshot.
	CreateSnapshot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Waypoint_CreateSnapshotClient, error)
	// RestoreSnapshot performs a database restore with the given snapshot.
	// This API doesn't do a full online restore, it only stages the restore
	// for the next server start to finalize the restore. See the arguments for
	// more information.
	RestoreSnapshot(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RestoreSnapshotClient, error)
	// BootstrapToken returns the initial token for the server. This can only
	// be requested once on first startup. After initial request this will
	// always return a PermissionDenied error.
	BootstrapToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewTokenResponse, error)
	// Generate a new invite token that users can exchange for a login token.
	GenerateInviteToken(ctx context.Context, in *InviteTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error)
	// Generate a new login token that users can use to login directly.
	GenerateLoginToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewTokenResponse, error)
	// Exchange a invite token for a login token.
	ConvertInviteToken(ctx context.Context, in *ConvertInviteTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error)
	// RunnerConfig is called to register a runner and receive the configuration
	// for the runner. The response is a stream so that the configuration can
	// be updated later.
	RunnerConfig(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RunnerConfigClient, error)
	// RunnerJobStream is called by a runner to request a single job for
	// execution and update the status of that job.
	RunnerJobStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RunnerJobStreamClient, error)
	// RunnerGetDeploymentConfig is called by a runner for a deployment operation
	// to determine the settings to use for a deployment.
	RunnerGetDeploymentConfig(ctx context.Context, in *RunnerGetDeploymentConfigRequest, opts ...grpc.CallOption) (*RunnerGetDeploymentConfigResponse, error)
	// EntrypointConfig is called to get the configuration for the entrypoint
	// and also to get any potential updates.
	//
	// This endpoint also registers the instance with the server. This MUST be
	// called first otherwise other RPCs related to the entrypoint may fail
	// with FailedPrecondition.
	EntrypointConfig(ctx context.Context, in *EntrypointConfigRequest, opts ...grpc.CallOption) (Waypoint_EntrypointConfigClient, error)
	// EntrypointLogStream is called to open the stream that logs are sent to.
	EntrypointLogStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_EntrypointLogStreamClient, error)
	// EntrypointExecStream is called to open the data stream for the exec session.
	EntrypointExecStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_EntrypointExecStreamClient, error)
	// WaypointHclFmt formats a waypoint.hcl file. This must be in HCL format.
	// JSON formatting is not supported.
	WaypointHclFmt(ctx context.Context, in *WaypointHclFmtRequest, opts ...grpc.CallOption) (*WaypointHclFmtResponse, error)
	// UpsertBuild updates or inserts a build. A build is responsible for
	// taking some set of source information and turning it into an initial
	// artifact. This artifact is considered "local" until it is pushed.
	UpsertBuild(ctx context.Context, in *UpsertBuildRequest, opts ...grpc.CallOption) (*UpsertBuildResponse, error)
	// UpsertPushedArtifact updates or inserts a pushed artifact. This is
	// useful for local operations to work on a pushed artifact.
	UpsertPushedArtifact(ctx context.Context, in *UpsertPushedArtifactRequest, opts ...grpc.CallOption) (*UpsertPushedArtifactResponse, error)
	// UpsertDeployment updates or inserts a deployment.
	UpsertDeployment(ctx context.Context, in *UpsertDeploymentRequest, opts ...grpc.CallOption) (*UpsertDeploymentResponse, error)
	// UpsertRelease updates or inserts a release.
	UpsertRelease(ctx context.Context, in *UpsertReleaseRequest, opts ...grpc.CallOption) (*UpsertReleaseResponse, error)
}

type waypointClient struct {
	cc grpc.ClientConnInterface
}

func NewWaypointClient(cc grpc.ClientConnInterface) WaypointClient {
	return &waypointClient{cc}
}

func (c *waypointClient) GetVersionInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionInfoResponse, error) {
	out := new(GetVersionInfoResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListWorkspaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListWorkspacesResponse, error) {
	out := new(ListWorkspacesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertProject(ctx context.Context, in *UpsertProjectRequest, opts ...grpc.CallOption) (*UpsertProjectResponse, error) {
	out := new(UpsertProjectResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertApplication(ctx context.Context, in *UpsertApplicationRequest, opts ...grpc.CallOption) (*UpsertApplicationResponse, error) {
	out := new(UpsertApplicationResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListPushedArtifacts(ctx context.Context, in *ListPushedArtifactsRequest, opts ...grpc.CallOption) (*ListPushedArtifactsResponse, error) {
	out := new(ListPushedArtifactsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListPushedArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetPushedArtifact(ctx context.Context, in *GetPushedArtifactRequest, opts ...grpc.CallOption) (*PushedArtifact, error) {
	out := new(PushedArtifact)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetPushedArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) FindExecInstance(ctx context.Context, in *FindExecInstanceRequest, opts ...grpc.CallOption) (*FindExecInstanceResponse, error) {
	out := new(FindExecInstanceResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/FindExecInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetLatestBuild(ctx context.Context, in *GetLatestBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetLatestBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetLatestPushedArtifact(ctx context.Context, in *GetLatestPushedArtifactRequest, opts ...grpc.CallOption) (*PushedArtifact, error) {
	out := new(PushedArtifact)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetLatestPushedArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error) {
	out := new(ListReleasesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetLatestRelease(ctx context.Context, in *GetLatestReleaseRequest, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetLatestRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetLogStream(ctx context.Context, in *GetLogStreamRequest, opts ...grpc.CallOption) (Waypoint_GetLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[0], "/hashicorp.waypoint.Waypoint/GetLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointGetLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Waypoint_GetLogStreamClient interface {
	Recv() (*LogBatch, error)
	grpc.ClientStream
}

type waypointGetLogStreamClient struct {
	grpc.ClientStream
}

func (x *waypointGetLogStreamClient) Recv() (*LogBatch, error) {
	m := new(LogBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) StartExecStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_StartExecStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[1], "/hashicorp.waypoint.Waypoint/StartExecStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointStartExecStreamClient{stream}
	return x, nil
}

type Waypoint_StartExecStreamClient interface {
	Send(*ExecStreamRequest) error
	Recv() (*ExecStreamResponse, error)
	grpc.ClientStream
}

type waypointStartExecStreamClient struct {
	grpc.ClientStream
}

func (x *waypointStartExecStreamClient) Send(m *ExecStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointStartExecStreamClient) Recv() (*ExecStreamResponse, error) {
	m := new(ExecStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) SetConfig(ctx context.Context, in *ConfigSetRequest, opts ...grpc.CallOption) (*ConfigSetResponse, error) {
	out := new(ConfigSetResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetConfig(ctx context.Context, in *ConfigGetRequest, opts ...grpc.CallOption) (*ConfigGetResponse, error) {
	out := new(ConfigGetResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) SetConfigSource(ctx context.Context, in *SetConfigSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/SetConfigSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetConfigSource(ctx context.Context, in *GetConfigSourceRequest, opts ...grpc.CallOption) (*GetConfigSourceResponse, error) {
	out := new(GetConfigSourceResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetConfigSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) CreateHostname(ctx context.Context, in *CreateHostnameRequest, opts ...grpc.CallOption) (*CreateHostnameResponse, error) {
	out := new(CreateHostnameResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/CreateHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) DeleteHostname(ctx context.Context, in *DeleteHostnameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/DeleteHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListHostnames(ctx context.Context, in *ListHostnamesRequest, opts ...grpc.CallOption) (*ListHostnamesResponse, error) {
	out := new(ListHostnamesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) QueueJob(ctx context.Context, in *QueueJobRequest, opts ...grpc.CallOption) (*QueueJobResponse, error) {
	out := new(QueueJobResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/QueueJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) XListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/_ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ValidateJob(ctx context.Context, in *ValidateJobRequest, opts ...grpc.CallOption) (*ValidateJobResponse, error) {
	out := new(ValidateJobResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ValidateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetJobStream(ctx context.Context, in *GetJobStreamRequest, opts ...grpc.CallOption) (Waypoint_GetJobStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[2], "/hashicorp.waypoint.Waypoint/GetJobStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointGetJobStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Waypoint_GetJobStreamClient interface {
	Recv() (*GetJobStreamResponse, error)
	grpc.ClientStream
}

type waypointGetJobStreamClient struct {
	grpc.ClientStream
}

func (x *waypointGetJobStreamClient) Recv() (*GetJobStreamResponse, error) {
	m := new(GetJobStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*Runner, error) {
	out := new(Runner)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetServerConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetServerConfigResponse, error) {
	out := new(GetServerConfigResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) SetServerConfig(ctx context.Context, in *SetServerConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/SetServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) CreateSnapshot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Waypoint_CreateSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[3], "/hashicorp.waypoint.Waypoint/CreateSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointCreateSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Waypoint_CreateSnapshotClient interface {
	Recv() (*CreateSnapshotResponse, error)
	grpc.ClientStream
}

type waypointCreateSnapshotClient struct {
	grpc.ClientStream
}

func (x *waypointCreateSnapshotClient) Recv() (*CreateSnapshotResponse, error) {
	m := new(CreateSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) RestoreSnapshot(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RestoreSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[4], "/hashicorp.waypoint.Waypoint/RestoreSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointRestoreSnapshotClient{stream}
	return x, nil
}

type Waypoint_RestoreSnapshotClient interface {
	Send(*RestoreSnapshotRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type waypointRestoreSnapshotClient struct {
	grpc.ClientStream
}

func (x *waypointRestoreSnapshotClient) Send(m *RestoreSnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointRestoreSnapshotClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) BootstrapToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewTokenResponse, error) {
	out := new(NewTokenResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/BootstrapToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GenerateInviteToken(ctx context.Context, in *InviteTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error) {
	out := new(NewTokenResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GenerateInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GenerateLoginToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewTokenResponse, error) {
	out := new(NewTokenResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GenerateLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ConvertInviteToken(ctx context.Context, in *ConvertInviteTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error) {
	out := new(NewTokenResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ConvertInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) RunnerConfig(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RunnerConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[5], "/hashicorp.waypoint.Waypoint/RunnerConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointRunnerConfigClient{stream}
	return x, nil
}

type Waypoint_RunnerConfigClient interface {
	Send(*RunnerConfigRequest) error
	Recv() (*RunnerConfigResponse, error)
	grpc.ClientStream
}

type waypointRunnerConfigClient struct {
	grpc.ClientStream
}

func (x *waypointRunnerConfigClient) Send(m *RunnerConfigRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointRunnerConfigClient) Recv() (*RunnerConfigResponse, error) {
	m := new(RunnerConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) RunnerJobStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RunnerJobStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[6], "/hashicorp.waypoint.Waypoint/RunnerJobStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointRunnerJobStreamClient{stream}
	return x, nil
}

type Waypoint_RunnerJobStreamClient interface {
	Send(*RunnerJobStreamRequest) error
	Recv() (*RunnerJobStreamResponse, error)
	grpc.ClientStream
}

type waypointRunnerJobStreamClient struct {
	grpc.ClientStream
}

func (x *waypointRunnerJobStreamClient) Send(m *RunnerJobStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointRunnerJobStreamClient) Recv() (*RunnerJobStreamResponse, error) {
	m := new(RunnerJobStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) RunnerGetDeploymentConfig(ctx context.Context, in *RunnerGetDeploymentConfigRequest, opts ...grpc.CallOption) (*RunnerGetDeploymentConfigResponse, error) {
	out := new(RunnerGetDeploymentConfigResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/RunnerGetDeploymentConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) EntrypointConfig(ctx context.Context, in *EntrypointConfigRequest, opts ...grpc.CallOption) (Waypoint_EntrypointConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[7], "/hashicorp.waypoint.Waypoint/EntrypointConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointEntrypointConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Waypoint_EntrypointConfigClient interface {
	Recv() (*EntrypointConfigResponse, error)
	grpc.ClientStream
}

type waypointEntrypointConfigClient struct {
	grpc.ClientStream
}

func (x *waypointEntrypointConfigClient) Recv() (*EntrypointConfigResponse, error) {
	m := new(EntrypointConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) EntrypointLogStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_EntrypointLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[8], "/hashicorp.waypoint.Waypoint/EntrypointLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointEntrypointLogStreamClient{stream}
	return x, nil
}

type Waypoint_EntrypointLogStreamClient interface {
	Send(*EntrypointLogBatch) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type waypointEntrypointLogStreamClient struct {
	grpc.ClientStream
}

func (x *waypointEntrypointLogStreamClient) Send(m *EntrypointLogBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointEntrypointLogStreamClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) EntrypointExecStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_EntrypointExecStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Waypoint_ServiceDesc.Streams[9], "/hashicorp.waypoint.Waypoint/EntrypointExecStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointEntrypointExecStreamClient{stream}
	return x, nil
}

type Waypoint_EntrypointExecStreamClient interface {
	Send(*EntrypointExecRequest) error
	Recv() (*EntrypointExecResponse, error)
	grpc.ClientStream
}

type waypointEntrypointExecStreamClient struct {
	grpc.ClientStream
}

func (x *waypointEntrypointExecStreamClient) Send(m *EntrypointExecRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointEntrypointExecStreamClient) Recv() (*EntrypointExecResponse, error) {
	m := new(EntrypointExecResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) WaypointHclFmt(ctx context.Context, in *WaypointHclFmtRequest, opts ...grpc.CallOption) (*WaypointHclFmtResponse, error) {
	out := new(WaypointHclFmtResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/WaypointHclFmt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertBuild(ctx context.Context, in *UpsertBuildRequest, opts ...grpc.CallOption) (*UpsertBuildResponse, error) {
	out := new(UpsertBuildResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertPushedArtifact(ctx context.Context, in *UpsertPushedArtifactRequest, opts ...grpc.CallOption) (*UpsertPushedArtifactResponse, error) {
	out := new(UpsertPushedArtifactResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertPushedArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertDeployment(ctx context.Context, in *UpsertDeploymentRequest, opts ...grpc.CallOption) (*UpsertDeploymentResponse, error) {
	out := new(UpsertDeploymentResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertRelease(ctx context.Context, in *UpsertReleaseRequest, opts ...grpc.CallOption) (*UpsertReleaseResponse, error) {
	out := new(UpsertReleaseResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaypointServer is the server API for Waypoint service.
// All implementations must embed UnimplementedWaypointServer
// for forward compatibility
type WaypointServer interface {
	// GetVersionInfo returns information about the server. This RPC call does
	// NOT require authentication. It can be used by clients to determine if they
	// are capable of talking to this server.
	GetVersionInfo(context.Context, *emptypb.Empty) (*GetVersionInfoResponse, error)
	// ListWorkspaces returns a list of all workspaces.
	//
	// Note that currently this list is never pruned, even if a workspace is
	// no longer in use. We plan to prune this in a future improvement.
	ListWorkspaces(context.Context, *emptypb.Empty) (*ListWorkspacesResponse, error)
	// GetWorkspace returns the workspace.
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	// UpsertProject upserts the project.
	UpsertProject(context.Context, *UpsertProjectRequest) (*UpsertProjectResponse, error)
	// GetProject returns the project.
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// ListProjects returns a list of all the projects. There is no equivalent
	// ListApplications because applications are a part of projects and you
	// can use GetProject to get more information about the project.
	ListProjects(context.Context, *emptypb.Empty) (*ListProjectsResponse, error)
	// UpsertApplication upserts an application with a project. If the application
	// is already registered this does nothing.
	UpsertApplication(context.Context, *UpsertApplicationRequest) (*UpsertApplicationResponse, error)
	// ListBuilds returns the builds.
	ListBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error)
	// GetBuild returns a build
	GetBuild(context.Context, *GetBuildRequest) (*Build, error)
	// ListPushedArtifacts returns the builds.
	ListPushedArtifacts(context.Context, *ListPushedArtifactsRequest) (*ListPushedArtifactsResponse, error)
	// GetPushedArtifact returns a deployment
	GetPushedArtifact(context.Context, *GetPushedArtifactRequest) (*PushedArtifact, error)
	// ListDeployments returns the deployments.
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	// ListInstances returns the running instances of deployments.
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// FindExecInstance returns an instance that can be used for an exec session.
	// This is used by the exec cli command to detect if there is a long running
	// instance to connect to or if a virtual instance should be created by running
	// the plugins exec function.
	FindExecInstance(context.Context, *FindExecInstanceRequest) (*FindExecInstanceResponse, error)
	// GetDeployment returns a deployment
	GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error)
	// GetLatestBuild returns the most recent successfully completed build
	// for an app.
	GetLatestBuild(context.Context, *GetLatestBuildRequest) (*Build, error)
	// GetLatestPushedArtifact returns the most recent successfully completed
	// artifact push for an app.
	GetLatestPushedArtifact(context.Context, *GetLatestPushedArtifactRequest) (*PushedArtifact, error)
	// ListReleases returns the deployments.
	ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error)
	// GetRelease returns a deployment
	GetRelease(context.Context, *GetReleaseRequest) (*Release, error)
	// GetLatestRelease returns the most recent successfully completed
	// artifact push for an app.
	GetLatestRelease(context.Context, *GetLatestReleaseRequest) (*Release, error)
	// GetLogStream reads the log stream for a deployment. This will immediately
	// send a single LogEntry with the lines we have so far. If there are no
	// available lines this will NOT block and instead will return an error.
	// The client can choose to retry or not.
	GetLogStream(*GetLogStreamRequest, Waypoint_GetLogStreamServer) error
	// StartExecStream starts an exec session.
	StartExecStream(Waypoint_StartExecStreamServer) error
	// Set a single configuration item for the application.
	SetConfig(context.Context, *ConfigSetRequest) (*ConfigSetResponse, error)
	// Retrieve merged configuration values for a specific scope. You can determine
	// where a configuration variable was set by looking at the scope field on
	// each variable.
	GetConfig(context.Context, *ConfigGetRequest) (*ConfigGetResponse, error)
	// Set the configuration for a dynamic configuration source. If you're looking
	// to set application configuration, you probably want SetConfig instead.
	SetConfigSource(context.Context, *SetConfigSourceRequest) (*emptypb.Empty, error)
	// Get the matching configuration source for the request. This will return
	// the most specific matching config source given the scope in the request.
	// For example, if you search for an app-specific config source and only
	// a global config exists, the global config will be returned.
	GetConfigSource(context.Context, *GetConfigSourceRequest) (*GetConfigSourceResponse, error)
	// Create a hostname with the URL service.
	CreateHostname(context.Context, *CreateHostnameRequest) (*CreateHostnameResponse, error)
	// Delete a hostname with the URL service.
	DeleteHostname(context.Context, *DeleteHostnameRequest) (*emptypb.Empty, error)
	// List all our registered hostnames.
	ListHostnames(context.Context, *ListHostnamesRequest) (*ListHostnamesResponse, error)
	// QueueJob queues a job for execution by a runner. This will return as
	// soon as the job is queued, it will not wait for execution.
	QueueJob(context.Context, *QueueJobRequest) (*QueueJobResponse, error)
	// CancelJob cancels a job. If the job is still queued this is a quick
	// and easy operation. If the job is already completed, then this does
	// nothing. If the job is assigned or running, then this will signal
	// the runner about the cancellation but it may take time.
	//
	// This RPC always returns immediately. You must use GetJob or GetJobStream
	// to wait on the status of the cancellation.
	CancelJob(context.Context, *CancelJobRequest) (*emptypb.Empty, error)
	// GetJob queries a job by ID.
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	// INTERNAL: ListJobs lists all the jobs the server has processed. This
	// is not yet ready for public use.
	XListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	// ValidateJob checks if a job appears valid. This will check the job
	// structure itself (i.e. missing fields) and can also check to ensure
	// the job is assignable to a runner.
	ValidateJob(context.Context, *ValidateJobRequest) (*ValidateJobResponse, error)
	// GetJobStream opens a job event stream for a running job. This can be
	// used to listen for terminal output and other events of a running job.
	// Multiple listeners can open a job stream.
	GetJobStream(*GetJobStreamRequest, Waypoint_GetJobStreamServer) error
	// GetRunner gets information about a single runner.
	GetRunner(context.Context, *GetRunnerRequest) (*Runner, error)
	// GetServerConfig sets configuration for the Waypoint server.
	GetServerConfig(context.Context, *emptypb.Empty) (*GetServerConfigResponse, error)
	// SetServerConfig sets configuration for the Waypoint server.
	SetServerConfig(context.Context, *SetServerConfigRequest) (*emptypb.Empty, error)
	// CreateSnapshot creates a new database snapshot.
	CreateSnapshot(*emptypb.Empty, Waypoint_CreateSnapshotServer) error
	// RestoreSnapshot performs a database restore with the given snapshot.
	// This API doesn't do a full online restore, it only stages the restore
	// for the next server start to finalize the restore. See the arguments for
	// more information.
	RestoreSnapshot(Waypoint_RestoreSnapshotServer) error
	// BootstrapToken returns the initial token for the server. This can only
	// be requested once on first startup. After initial request this will
	// always return a PermissionDenied error.
	BootstrapToken(context.Context, *emptypb.Empty) (*NewTokenResponse, error)
	// Generate a new invite token that users can exchange for a login token.
	GenerateInviteToken(context.Context, *InviteTokenRequest) (*NewTokenResponse, error)
	// Generate a new login token that users can use to login directly.
	GenerateLoginToken(context.Context, *emptypb.Empty) (*NewTokenResponse, error)
	// Exchange a invite token for a login token.
	ConvertInviteToken(context.Context, *ConvertInviteTokenRequest) (*NewTokenResponse, error)
	// RunnerConfig is called to register a runner and receive the configuration
	// for the runner. The response is a stream so that the configuration can
	// be updated later.
	RunnerConfig(Waypoint_RunnerConfigServer) error
	// RunnerJobStream is called by a runner to request a single job for
	// execution and update the status of that job.
	RunnerJobStream(Waypoint_RunnerJobStreamServer) error
	// RunnerGetDeploymentConfig is called by a runner for a deployment operation
	// to determine the settings to use for a deployment.
	RunnerGetDeploymentConfig(context.Context, *RunnerGetDeploymentConfigRequest) (*RunnerGetDeploymentConfigResponse, error)
	// EntrypointConfig is called to get the configuration for the entrypoint
	// and also to get any potential updates.
	//
	// This endpoint also registers the instance with the server. This MUST be
	// called first otherwise other RPCs related to the entrypoint may fail
	// with FailedPrecondition.
	EntrypointConfig(*EntrypointConfigRequest, Waypoint_EntrypointConfigServer) error
	// EntrypointLogStream is called to open the stream that logs are sent to.
	EntrypointLogStream(Waypoint_EntrypointLogStreamServer) error
	// EntrypointExecStream is called to open the data stream for the exec session.
	EntrypointExecStream(Waypoint_EntrypointExecStreamServer) error
	// WaypointHclFmt formats a waypoint.hcl file. This must be in HCL format.
	// JSON formatting is not supported.
	WaypointHclFmt(context.Context, *WaypointHclFmtRequest) (*WaypointHclFmtResponse, error)
	// UpsertBuild updates or inserts a build. A build is responsible for
	// taking some set of source information and turning it into an initial
	// artifact. This artifact is considered "local" until it is pushed.
	UpsertBuild(context.Context, *UpsertBuildRequest) (*UpsertBuildResponse, error)
	// UpsertPushedArtifact updates or inserts a pushed artifact. This is
	// useful for local operations to work on a pushed artifact.
	UpsertPushedArtifact(context.Context, *UpsertPushedArtifactRequest) (*UpsertPushedArtifactResponse, error)
	// UpsertDeployment updates or inserts a deployment.
	UpsertDeployment(context.Context, *UpsertDeploymentRequest) (*UpsertDeploymentResponse, error)
	// UpsertRelease updates or inserts a release.
	UpsertRelease(context.Context, *UpsertReleaseRequest) (*UpsertReleaseResponse, error)
	mustEmbedUnimplementedWaypointServer()
}

// UnimplementedWaypointServer must be embedded to have forward compatible implementations.
type UnimplementedWaypointServer struct {
}

func (UnimplementedWaypointServer) GetVersionInfo(context.Context, *emptypb.Empty) (*GetVersionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionInfo not implemented")
}
func (UnimplementedWaypointServer) ListWorkspaces(context.Context, *emptypb.Empty) (*ListWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaces not implemented")
}
func (UnimplementedWaypointServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedWaypointServer) UpsertProject(context.Context, *UpsertProjectRequest) (*UpsertProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertProject not implemented")
}
func (UnimplementedWaypointServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedWaypointServer) ListProjects(context.Context, *emptypb.Empty) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedWaypointServer) UpsertApplication(context.Context, *UpsertApplicationRequest) (*UpsertApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertApplication not implemented")
}
func (UnimplementedWaypointServer) ListBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuilds not implemented")
}
func (UnimplementedWaypointServer) GetBuild(context.Context, *GetBuildRequest) (*Build, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuild not implemented")
}
func (UnimplementedWaypointServer) ListPushedArtifacts(context.Context, *ListPushedArtifactsRequest) (*ListPushedArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushedArtifacts not implemented")
}
func (UnimplementedWaypointServer) GetPushedArtifact(context.Context, *GetPushedArtifactRequest) (*PushedArtifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushedArtifact not implemented")
}
func (UnimplementedWaypointServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedWaypointServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedWaypointServer) FindExecInstance(context.Context, *FindExecInstanceRequest) (*FindExecInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindExecInstance not implemented")
}
func (UnimplementedWaypointServer) GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedWaypointServer) GetLatestBuild(context.Context, *GetLatestBuildRequest) (*Build, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBuild not implemented")
}
func (UnimplementedWaypointServer) GetLatestPushedArtifact(context.Context, *GetLatestPushedArtifactRequest) (*PushedArtifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestPushedArtifact not implemented")
}
func (UnimplementedWaypointServer) ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedWaypointServer) GetRelease(context.Context, *GetReleaseRequest) (*Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (UnimplementedWaypointServer) GetLatestRelease(context.Context, *GetLatestReleaseRequest) (*Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRelease not implemented")
}
func (UnimplementedWaypointServer) GetLogStream(*GetLogStreamRequest, Waypoint_GetLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogStream not implemented")
}
func (UnimplementedWaypointServer) StartExecStream(Waypoint_StartExecStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartExecStream not implemented")
}
func (UnimplementedWaypointServer) SetConfig(context.Context, *ConfigSetRequest) (*ConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedWaypointServer) GetConfig(context.Context, *ConfigGetRequest) (*ConfigGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedWaypointServer) SetConfigSource(context.Context, *SetConfigSourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigSource not implemented")
}
func (UnimplementedWaypointServer) GetConfigSource(context.Context, *GetConfigSourceRequest) (*GetConfigSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigSource not implemented")
}
func (UnimplementedWaypointServer) CreateHostname(context.Context, *CreateHostnameRequest) (*CreateHostnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostname not implemented")
}
func (UnimplementedWaypointServer) DeleteHostname(context.Context, *DeleteHostnameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostname not implemented")
}
func (UnimplementedWaypointServer) ListHostnames(context.Context, *ListHostnamesRequest) (*ListHostnamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostnames not implemented")
}
func (UnimplementedWaypointServer) QueueJob(context.Context, *QueueJobRequest) (*QueueJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueJob not implemented")
}
func (UnimplementedWaypointServer) CancelJob(context.Context, *CancelJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedWaypointServer) GetJob(context.Context, *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedWaypointServer) XListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XListJobs not implemented")
}
func (UnimplementedWaypointServer) ValidateJob(context.Context, *ValidateJobRequest) (*ValidateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateJob not implemented")
}
func (UnimplementedWaypointServer) GetJobStream(*GetJobStreamRequest, Waypoint_GetJobStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobStream not implemented")
}
func (UnimplementedWaypointServer) GetRunner(context.Context, *GetRunnerRequest) (*Runner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedWaypointServer) GetServerConfig(context.Context, *emptypb.Empty) (*GetServerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerConfig not implemented")
}
func (UnimplementedWaypointServer) SetServerConfig(context.Context, *SetServerConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServerConfig not implemented")
}
func (UnimplementedWaypointServer) CreateSnapshot(*emptypb.Empty, Waypoint_CreateSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedWaypointServer) RestoreSnapshot(Waypoint_RestoreSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method RestoreSnapshot not implemented")
}
func (UnimplementedWaypointServer) BootstrapToken(context.Context, *emptypb.Empty) (*NewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootstrapToken not implemented")
}
func (UnimplementedWaypointServer) GenerateInviteToken(context.Context, *InviteTokenRequest) (*NewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInviteToken not implemented")
}
func (UnimplementedWaypointServer) GenerateLoginToken(context.Context, *emptypb.Empty) (*NewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLoginToken not implemented")
}
func (UnimplementedWaypointServer) ConvertInviteToken(context.Context, *ConvertInviteTokenRequest) (*NewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertInviteToken not implemented")
}
func (UnimplementedWaypointServer) RunnerConfig(Waypoint_RunnerConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method RunnerConfig not implemented")
}
func (UnimplementedWaypointServer) RunnerJobStream(Waypoint_RunnerJobStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RunnerJobStream not implemented")
}
func (UnimplementedWaypointServer) RunnerGetDeploymentConfig(context.Context, *RunnerGetDeploymentConfigRequest) (*RunnerGetDeploymentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerGetDeploymentConfig not implemented")
}
func (UnimplementedWaypointServer) EntrypointConfig(*EntrypointConfigRequest, Waypoint_EntrypointConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method EntrypointConfig not implemented")
}
func (UnimplementedWaypointServer) EntrypointLogStream(Waypoint_EntrypointLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EntrypointLogStream not implemented")
}
func (UnimplementedWaypointServer) EntrypointExecStream(Waypoint_EntrypointExecStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EntrypointExecStream not implemented")
}
func (UnimplementedWaypointServer) WaypointHclFmt(context.Context, *WaypointHclFmtRequest) (*WaypointHclFmtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaypointHclFmt not implemented")
}
func (UnimplementedWaypointServer) UpsertBuild(context.Context, *UpsertBuildRequest) (*UpsertBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBuild not implemented")
}
func (UnimplementedWaypointServer) UpsertPushedArtifact(context.Context, *UpsertPushedArtifactRequest) (*UpsertPushedArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPushedArtifact not implemented")
}
func (UnimplementedWaypointServer) UpsertDeployment(context.Context, *UpsertDeploymentRequest) (*UpsertDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDeployment not implemented")
}
func (UnimplementedWaypointServer) UpsertRelease(context.Context, *UpsertReleaseRequest) (*UpsertReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRelease not implemented")
}
func (UnimplementedWaypointServer) mustEmbedUnimplementedWaypointServer() {}

// UnsafeWaypointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaypointServer will
// result in compilation errors.
type UnsafeWaypointServer interface {
	mustEmbedUnimplementedWaypointServer()
}

func RegisterWaypointServer(s grpc.ServiceRegistrar, srv WaypointServer) {
	s.RegisterService(&Waypoint_ServiceDesc, srv)
}

func _Waypoint_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetVersionInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListWorkspaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertProject(ctx, req.(*UpsertProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListProjects(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertApplication(ctx, req.(*UpsertApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListBuilds(ctx, req.(*ListBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetBuild(ctx, req.(*GetBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListPushedArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushedArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListPushedArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListPushedArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListPushedArtifacts(ctx, req.(*ListPushedArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetPushedArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushedArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetPushedArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetPushedArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetPushedArtifact(ctx, req.(*GetPushedArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_FindExecInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindExecInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).FindExecInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/FindExecInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).FindExecInstance(ctx, req.(*FindExecInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetLatestBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetLatestBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetLatestBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetLatestBuild(ctx, req.(*GetLatestBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetLatestPushedArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestPushedArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetLatestPushedArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetLatestPushedArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetLatestPushedArtifact(ctx, req.(*GetLatestPushedArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListReleases(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetRelease(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetLatestRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetLatestRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetLatestRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetLatestRelease(ctx, req.(*GetLatestReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLogStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaypointServer).GetLogStream(m, &waypointGetLogStreamServer{stream})
}

type Waypoint_GetLogStreamServer interface {
	Send(*LogBatch) error
	grpc.ServerStream
}

type waypointGetLogStreamServer struct {
	grpc.ServerStream
}

func (x *waypointGetLogStreamServer) Send(m *LogBatch) error {
	return x.ServerStream.SendMsg(m)
}

func _Waypoint_StartExecStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).StartExecStream(&waypointStartExecStreamServer{stream})
}

type Waypoint_StartExecStreamServer interface {
	Send(*ExecStreamResponse) error
	Recv() (*ExecStreamRequest, error)
	grpc.ServerStream
}

type waypointStartExecStreamServer struct {
	grpc.ServerStream
}

func (x *waypointStartExecStreamServer) Send(m *ExecStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointStartExecStreamServer) Recv() (*ExecStreamRequest, error) {
	m := new(ExecStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).SetConfig(ctx, req.(*ConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetConfig(ctx, req.(*ConfigGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_SetConfigSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).SetConfigSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/SetConfigSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).SetConfigSource(ctx, req.(*SetConfigSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetConfigSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetConfigSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetConfigSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetConfigSource(ctx, req.(*GetConfigSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_CreateHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).CreateHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/CreateHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).CreateHostname(ctx, req.(*CreateHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_DeleteHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).DeleteHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/DeleteHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).DeleteHostname(ctx, req.(*DeleteHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostnamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListHostnames(ctx, req.(*ListHostnamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_QueueJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).QueueJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/QueueJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).QueueJob(ctx, req.(*QueueJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_XListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).XListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/_ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).XListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ValidateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ValidateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ValidateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ValidateJob(ctx, req.(*ValidateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetJobStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJobStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaypointServer).GetJobStream(m, &waypointGetJobStreamServer{stream})
}

type Waypoint_GetJobStreamServer interface {
	Send(*GetJobStreamResponse) error
	grpc.ServerStream
}

type waypointGetJobStreamServer struct {
	grpc.ServerStream
}

func (x *waypointGetJobStreamServer) Send(m *GetJobStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Waypoint_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetServerConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_SetServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).SetServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/SetServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).SetServerConfig(ctx, req.(*SetServerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_CreateSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaypointServer).CreateSnapshot(m, &waypointCreateSnapshotServer{stream})
}

type Waypoint_CreateSnapshotServer interface {
	Send(*CreateSnapshotResponse) error
	grpc.ServerStream
}

type waypointCreateSnapshotServer struct {
	grpc.ServerStream
}

func (x *waypointCreateSnapshotServer) Send(m *CreateSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Waypoint_RestoreSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).RestoreSnapshot(&waypointRestoreSnapshotServer{stream})
}

type Waypoint_RestoreSnapshotServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*RestoreSnapshotRequest, error)
	grpc.ServerStream
}

type waypointRestoreSnapshotServer struct {
	grpc.ServerStream
}

func (x *waypointRestoreSnapshotServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointRestoreSnapshotServer) Recv() (*RestoreSnapshotRequest, error) {
	m := new(RestoreSnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_BootstrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).BootstrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/BootstrapToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).BootstrapToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GenerateInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GenerateInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GenerateInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GenerateInviteToken(ctx, req.(*InviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GenerateLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GenerateLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GenerateLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GenerateLoginToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ConvertInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ConvertInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ConvertInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ConvertInviteToken(ctx, req.(*ConvertInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_RunnerConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).RunnerConfig(&waypointRunnerConfigServer{stream})
}

type Waypoint_RunnerConfigServer interface {
	Send(*RunnerConfigResponse) error
	Recv() (*RunnerConfigRequest, error)
	grpc.ServerStream
}

type waypointRunnerConfigServer struct {
	grpc.ServerStream
}

func (x *waypointRunnerConfigServer) Send(m *RunnerConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointRunnerConfigServer) Recv() (*RunnerConfigRequest, error) {
	m := new(RunnerConfigRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_RunnerJobStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).RunnerJobStream(&waypointRunnerJobStreamServer{stream})
}

type Waypoint_RunnerJobStreamServer interface {
	Send(*RunnerJobStreamResponse) error
	Recv() (*RunnerJobStreamRequest, error)
	grpc.ServerStream
}

type waypointRunnerJobStreamServer struct {
	grpc.ServerStream
}

func (x *waypointRunnerJobStreamServer) Send(m *RunnerJobStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointRunnerJobStreamServer) Recv() (*RunnerJobStreamRequest, error) {
	m := new(RunnerJobStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_RunnerGetDeploymentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerGetDeploymentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).RunnerGetDeploymentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/RunnerGetDeploymentConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).RunnerGetDeploymentConfig(ctx, req.(*RunnerGetDeploymentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_EntrypointConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EntrypointConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaypointServer).EntrypointConfig(m, &waypointEntrypointConfigServer{stream})
}

type Waypoint_EntrypointConfigServer interface {
	Send(*EntrypointConfigResponse) error
	grpc.ServerStream
}

type waypointEntrypointConfigServer struct {
	grpc.ServerStream
}

func (x *waypointEntrypointConfigServer) Send(m *EntrypointConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Waypoint_EntrypointLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).EntrypointLogStream(&waypointEntrypointLogStreamServer{stream})
}

type Waypoint_EntrypointLogStreamServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*EntrypointLogBatch, error)
	grpc.ServerStream
}

type waypointEntrypointLogStreamServer struct {
	grpc.ServerStream
}

func (x *waypointEntrypointLogStreamServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointEntrypointLogStreamServer) Recv() (*EntrypointLogBatch, error) {
	m := new(EntrypointLogBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_EntrypointExecStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).EntrypointExecStream(&waypointEntrypointExecStreamServer{stream})
}

type Waypoint_EntrypointExecStreamServer interface {
	Send(*EntrypointExecResponse) error
	Recv() (*EntrypointExecRequest, error)
	grpc.ServerStream
}

type waypointEntrypointExecStreamServer struct {
	grpc.ServerStream
}

func (x *waypointEntrypointExecStreamServer) Send(m *EntrypointExecResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointEntrypointExecStreamServer) Recv() (*EntrypointExecRequest, error) {
	m := new(EntrypointExecRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_WaypointHclFmt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaypointHclFmtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).WaypointHclFmt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/WaypointHclFmt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).WaypointHclFmt(ctx, req.(*WaypointHclFmtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertBuild(ctx, req.(*UpsertBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertPushedArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPushedArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertPushedArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertPushedArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertPushedArtifact(ctx, req.(*UpsertPushedArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertDeployment(ctx, req.(*UpsertDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertRelease(ctx, req.(*UpsertReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Waypoint_ServiceDesc is the grpc.ServiceDesc for Waypoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Waypoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.Waypoint",
	HandlerType: (*WaypointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersionInfo",
			Handler:    _Waypoint_GetVersionInfo_Handler,
		},
		{
			MethodName: "ListWorkspaces",
			Handler:    _Waypoint_ListWorkspaces_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _Waypoint_GetWorkspace_Handler,
		},
		{
			MethodName: "UpsertProject",
			Handler:    _Waypoint_UpsertProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Waypoint_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _Waypoint_ListProjects_Handler,
		},
		{
			MethodName: "UpsertApplication",
			Handler:    _Waypoint_UpsertApplication_Handler,
		},
		{
			MethodName: "ListBuilds",
			Handler:    _Waypoint_ListBuilds_Handler,
		},
		{
			MethodName: "GetBuild",
			Handler:    _Waypoint_GetBuild_Handler,
		},
		{
			MethodName: "ListPushedArtifacts",
			Handler:    _Waypoint_ListPushedArtifacts_Handler,
		},
		{
			MethodName: "GetPushedArtifact",
			Handler:    _Waypoint_GetPushedArtifact_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _Waypoint_ListDeployments_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _Waypoint_ListInstances_Handler,
		},
		{
			MethodName: "FindExecInstance",
			Handler:    _Waypoint_FindExecInstance_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _Waypoint_GetDeployment_Handler,
		},
		{
			MethodName: "GetLatestBuild",
			Handler:    _Waypoint_GetLatestBuild_Handler,
		},
		{
			MethodName: "GetLatestPushedArtifact",
			Handler:    _Waypoint_GetLatestPushedArtifact_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _Waypoint_ListReleases_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _Waypoint_GetRelease_Handler,
		},
		{
			MethodName: "GetLatestRelease",
			Handler:    _Waypoint_GetLatestRelease_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Waypoint_SetConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Waypoint_GetConfig_Handler,
		},
		{
			MethodName: "SetConfigSource",
			Handler:    _Waypoint_SetConfigSource_Handler,
		},
		{
			MethodName: "GetConfigSource",
			Handler:    _Waypoint_GetConfigSource_Handler,
		},
		{
			MethodName: "CreateHostname",
			Handler:    _Waypoint_CreateHostname_Handler,
		},
		{
			MethodName: "DeleteHostname",
			Handler:    _Waypoint_DeleteHostname_Handler,
		},
		{
			MethodName: "ListHostnames",
			Handler:    _Waypoint_ListHostnames_Handler,
		},
		{
			MethodName: "QueueJob",
			Handler:    _Waypoint_QueueJob_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _Waypoint_CancelJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Waypoint_GetJob_Handler,
		},
		{
			MethodName: "_ListJobs",
			Handler:    _Waypoint_XListJobs_Handler,
		},
		{
			MethodName: "ValidateJob",
			Handler:    _Waypoint_ValidateJob_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _Waypoint_GetRunner_Handler,
		},
		{
			MethodName: "GetServerConfig",
			Handler:    _Waypoint_GetServerConfig_Handler,
		},
		{
			MethodName: "SetServerConfig",
			Handler:    _Waypoint_SetServerConfig_Handler,
		},
		{
			MethodName: "BootstrapToken",
			Handler:    _Waypoint_BootstrapToken_Handler,
		},
		{
			MethodName: "GenerateInviteToken",
			Handler:    _Waypoint_GenerateInviteToken_Handler,
		},
		{
			MethodName: "GenerateLoginToken",
			Handler:    _Waypoint_GenerateLoginToken_Handler,
		},
		{
			MethodName: "ConvertInviteToken",
			Handler:    _Waypoint_ConvertInviteToken_Handler,
		},
		{
			MethodName: "RunnerGetDeploymentConfig",
			Handler:    _Waypoint_RunnerGetDeploymentConfig_Handler,
		},
		{
			MethodName: "WaypointHclFmt",
			Handler:    _Waypoint_WaypointHclFmt_Handler,
		},
		{
			MethodName: "UpsertBuild",
			Handler:    _Waypoint_UpsertBuild_Handler,
		},
		{
			MethodName: "UpsertPushedArtifact",
			Handler:    _Waypoint_UpsertPushedArtifact_Handler,
		},
		{
			MethodName: "UpsertDeployment",
			Handler:    _Waypoint_UpsertDeployment_Handler,
		},
		{
			MethodName: "UpsertRelease",
			Handler:    _Waypoint_UpsertRelease_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogStream",
			Handler:       _Waypoint_GetLogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartExecStream",
			Handler:       _Waypoint_StartExecStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetJobStream",
			Handler:       _Waypoint_GetJobStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateSnapshot",
			Handler:       _Waypoint_CreateSnapshot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RestoreSnapshot",
			Handler:       _Waypoint_RestoreSnapshot_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RunnerConfig",
			Handler:       _Waypoint_RunnerConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RunnerJobStream",
			Handler:       _Waypoint_RunnerJobStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EntrypointConfig",
			Handler:       _Waypoint_EntrypointConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EntrypointLogStream",
			Handler:       _Waypoint_EntrypointLogStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EntrypointExecStream",
			Handler:       _Waypoint_EntrypointExecStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/server/proto/server.proto",
}
