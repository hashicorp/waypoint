// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: internal/server/proto/server.proto

package gen

import (
	context "context"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceCategoryDisplayHint int32

const (
	ResourceCategoryDisplayHint_UNKNOWN          ResourceCategoryDisplayHint = 0
	ResourceCategoryDisplayHint_OTHER            ResourceCategoryDisplayHint = 1 // catch-all for types that do not fit well into other predefined roles. i.e. aws target group
	ResourceCategoryDisplayHint_INSTANCE         ResourceCategoryDisplayHint = 2 // i.e. k8s pod, docker container, ecs task
	ResourceCategoryDisplayHint_INSTANCE_MANAGER ResourceCategoryDisplayHint = 3 // i.e. k8s deployment, ec2 asg, nomad job, ecs service
	ResourceCategoryDisplayHint_ROUTER           ResourceCategoryDisplayHint = 4 // i.e. k8s service, aws alb
	ResourceCategoryDisplayHint_POLICY           ResourceCategoryDisplayHint = 5 // i.e. aws security group or iam role, k8s RoleBinding
	ResourceCategoryDisplayHint_CONFIG           ResourceCategoryDisplayHint = 6 // i.e. aws launch config, k8s configmap
	ResourceCategoryDisplayHint_FUNCTION         ResourceCategoryDisplayHint = 7 // i.e. lambda function, azure function
	ResourceCategoryDisplayHint_STORAGE          ResourceCategoryDisplayHint = 8 // i.e. EBS volume, EFS filesystem, k8s PVC
)

// Enum value maps for ResourceCategoryDisplayHint.
var (
	ResourceCategoryDisplayHint_name = map[int32]string{
		0: "UNKNOWN",
		1: "OTHER",
		2: "INSTANCE",
		3: "INSTANCE_MANAGER",
		4: "ROUTER",
		5: "POLICY",
		6: "CONFIG",
		7: "FUNCTION",
		8: "STORAGE",
	}
	ResourceCategoryDisplayHint_value = map[string]int32{
		"UNKNOWN":          0,
		"OTHER":            1,
		"INSTANCE":         2,
		"INSTANCE_MANAGER": 3,
		"ROUTER":           4,
		"POLICY":           5,
		"CONFIG":           6,
		"FUNCTION":         7,
		"STORAGE":          8,
	}
)

func (x ResourceCategoryDisplayHint) Enum() *ResourceCategoryDisplayHint {
	p := new(ResourceCategoryDisplayHint)
	*p = x
	return p
}

func (x ResourceCategoryDisplayHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceCategoryDisplayHint) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[0].Descriptor()
}

func (ResourceCategoryDisplayHint) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[0]
}

func (x ResourceCategoryDisplayHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceCategoryDisplayHint.Descriptor instead.
func (ResourceCategoryDisplayHint) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{0}
}

type Project_Format int32

const (
	Project_HCL  Project_Format = 0 // We assume HCL by default
	Project_JSON Project_Format = 1
)

// Enum value maps for Project_Format.
var (
	Project_Format_name = map[int32]string{
		0: "HCL",
		1: "JSON",
	}
	Project_Format_value = map[string]int32{
		"HCL":  0,
		"JSON": 1,
	}
)

func (x Project_Format) Enum() *Project_Format {
	p := new(Project_Format)
	*p = x
	return p
}

func (x Project_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[1].Descriptor()
}

func (Project_Format) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[1]
}

func (x Project_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_Format.Descriptor instead.
func (Project_Format) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{4, 0}
}

// Supported component types, the values here MUST match the enum values
// in the Go sdk/component package exactly. A test in internal/server
// validates this.
type Component_Type int32

const (
	Component_UNKNOWN        Component_Type = 0
	Component_BUILDER        Component_Type = 1
	Component_REGISTRY       Component_Type = 2
	Component_PLATFORM       Component_Type = 3
	Component_RELEASEMANAGER Component_Type = 4
)

// Enum value maps for Component_Type.
var (
	Component_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "BUILDER",
		2: "REGISTRY",
		3: "PLATFORM",
		4: "RELEASEMANAGER",
	}
	Component_Type_value = map[string]int32{
		"UNKNOWN":        0,
		"BUILDER":        1,
		"REGISTRY":       2,
		"PLATFORM":       3,
		"RELEASEMANAGER": 4,
	}
)

func (x Component_Type) Enum() *Component_Type {
	p := new(Component_Type)
	*p = x
	return p
}

func (x Component_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Component_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[2].Descriptor()
}

func (Component_Type) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[2]
}

func (x Component_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Component_Type.Descriptor instead.
func (Component_Type) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{8, 0}
}

type Status_State int32

const (
	Status_UNKNOWN Status_State = 0
	Status_RUNNING Status_State = 1
	Status_SUCCESS Status_State = 2
	Status_ERROR   Status_State = 3
)

// Enum value maps for Status_State.
var (
	Status_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "RUNNING",
		2: "SUCCESS",
		3: "ERROR",
	}
	Status_State_value = map[string]int32{
		"UNKNOWN": 0,
		"RUNNING": 1,
		"SUCCESS": 2,
		"ERROR":   3,
	}
)

func (x Status_State) Enum() *Status_State {
	p := new(Status_State)
	*p = x
	return p
}

func (x Status_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_State) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[3].Descriptor()
}

func (Status_State) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[3]
}

func (x Status_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_State.Descriptor instead.
func (Status_State) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{9, 0}
}

// PhysicalState is the state of any physical resources associated with
// an operation. A physical resource for example is the actual container
// that might be created alongside an operation.
type Operation_PhysicalState int32

const (
	Operation_UNKNOWN   Operation_PhysicalState = 0
	Operation_PENDING   Operation_PhysicalState = 1
	Operation_CREATED   Operation_PhysicalState = 3
	Operation_DESTROYED Operation_PhysicalState = 4
)

// Enum value maps for Operation_PhysicalState.
var (
	Operation_PhysicalState_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		3: "CREATED",
		4: "DESTROYED",
	}
	Operation_PhysicalState_value = map[string]int32{
		"UNKNOWN":   0,
		"PENDING":   1,
		"CREATED":   3,
		"DESTROYED": 4,
	}
)

func (x Operation_PhysicalState) Enum() *Operation_PhysicalState {
	p := new(Operation_PhysicalState)
	*p = x
	return p
}

func (x Operation_PhysicalState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_PhysicalState) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[4].Descriptor()
}

func (Operation_PhysicalState) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[4]
}

func (x Operation_PhysicalState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_PhysicalState.Descriptor instead.
func (Operation_PhysicalState) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{11, 0}
}

type OperationOrder_Order int32

const (
	OperationOrder_UNSET         OperationOrder_Order = 0
	OperationOrder_START_TIME    OperationOrder_Order = 1
	OperationOrder_COMPLETE_TIME OperationOrder_Order = 2
)

// Enum value maps for OperationOrder_Order.
var (
	OperationOrder_Order_name = map[int32]string{
		0: "UNSET",
		1: "START_TIME",
		2: "COMPLETE_TIME",
	}
	OperationOrder_Order_value = map[string]int32{
		"UNSET":         0,
		"START_TIME":    1,
		"COMPLETE_TIME": 2,
	}
)

func (x OperationOrder_Order) Enum() *OperationOrder_Order {
	p := new(OperationOrder_Order)
	*p = x
	return p
}

func (x OperationOrder_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationOrder_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[5].Descriptor()
}

func (OperationOrder_Order) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[5]
}

func (x OperationOrder_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationOrder_Order.Descriptor instead.
func (OperationOrder_Order) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{12, 0}
}

type OIDCAuthMethod_Kind int32

const (
	OIDCAuthMethod_UNKNOWN OIDCAuthMethod_Kind = 0
	OIDCAuthMethod_GITHUB  OIDCAuthMethod_Kind = 1
	OIDCAuthMethod_GOOGLE  OIDCAuthMethod_Kind = 2
)

// Enum value maps for OIDCAuthMethod_Kind.
var (
	OIDCAuthMethod_Kind_name = map[int32]string{
		0: "UNKNOWN",
		1: "GITHUB",
		2: "GOOGLE",
	}
	OIDCAuthMethod_Kind_value = map[string]int32{
		"UNKNOWN": 0,
		"GITHUB":  1,
		"GOOGLE":  2,
	}
)

func (x OIDCAuthMethod_Kind) Enum() *OIDCAuthMethod_Kind {
	p := new(OIDCAuthMethod_Kind)
	*p = x
	return p
}

func (x OIDCAuthMethod_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCAuthMethod_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[6].Descriptor()
}

func (OIDCAuthMethod_Kind) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[6]
}

func (x OIDCAuthMethod_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCAuthMethod_Kind.Descriptor instead.
func (OIDCAuthMethod_Kind) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{23, 0}
}

type Job_State int32

const (
	Job_UNKNOWN Job_State = 0
	Job_QUEUED  Job_State = 1 // queued and waiting for assignment
	Job_WAITING Job_State = 2 // assigned to a runner, waiting for runner to ack
	Job_RUNNING Job_State = 3 // runner acked and is executing
	Job_ERROR   Job_State = 4 // job failed
	Job_SUCCESS Job_State = 5 // job succeeded
)

// Enum value maps for Job_State.
var (
	Job_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "QUEUED",
		2: "WAITING",
		3: "RUNNING",
		4: "ERROR",
		5: "SUCCESS",
	}
	Job_State_value = map[string]int32{
		"UNKNOWN": 0,
		"QUEUED":  1,
		"WAITING": 2,
		"RUNNING": 3,
		"ERROR":   4,
		"SUCCESS": 5,
	}
)

func (x Job_State) Enum() *Job_State {
	p := new(Job_State)
	*p = x
	return p
}

func (x Job_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_State) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[7].Descriptor()
}

func (Job_State) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[7]
}

func (x Job_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_State.Descriptor instead.
func (Job_State) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 0}
}

type UpsertDeploymentRequest_Tristate int32

const (
	UpsertDeploymentRequest_UNSET UpsertDeploymentRequest_Tristate = 0
	UpsertDeploymentRequest_TRUE  UpsertDeploymentRequest_Tristate = 1
	UpsertDeploymentRequest_FALSE UpsertDeploymentRequest_Tristate = 2
)

// Enum value maps for UpsertDeploymentRequest_Tristate.
var (
	UpsertDeploymentRequest_Tristate_name = map[int32]string{
		0: "UNSET",
		1: "TRUE",
		2: "FALSE",
	}
	UpsertDeploymentRequest_Tristate_value = map[string]int32{
		"UNSET": 0,
		"TRUE":  1,
		"FALSE": 2,
	}
)

func (x UpsertDeploymentRequest_Tristate) Enum() *UpsertDeploymentRequest_Tristate {
	p := new(UpsertDeploymentRequest_Tristate)
	*p = x
	return p
}

func (x UpsertDeploymentRequest_Tristate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpsertDeploymentRequest_Tristate) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[8].Descriptor()
}

func (UpsertDeploymentRequest_Tristate) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[8]
}

func (x UpsertDeploymentRequest_Tristate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpsertDeploymentRequest_Tristate.Descriptor instead.
func (UpsertDeploymentRequest_Tristate) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{92, 0}
}

type Deployment_LoadDetails int32

const (
	Deployment_NONE     Deployment_LoadDetails = 0
	Deployment_ARTIFACT Deployment_LoadDetails = 1
	Deployment_BUILD    Deployment_LoadDetails = 2
)

// Enum value maps for Deployment_LoadDetails.
var (
	Deployment_LoadDetails_name = map[int32]string{
		0: "NONE",
		1: "ARTIFACT",
		2: "BUILD",
	}
	Deployment_LoadDetails_value = map[string]int32{
		"NONE":     0,
		"ARTIFACT": 1,
		"BUILD":    2,
	}
)

func (x Deployment_LoadDetails) Enum() *Deployment_LoadDetails {
	p := new(Deployment_LoadDetails)
	*p = x
	return p
}

func (x Deployment_LoadDetails) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deployment_LoadDetails) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[9].Descriptor()
}

func (Deployment_LoadDetails) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[9]
}

func (x Deployment_LoadDetails) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deployment_LoadDetails.Descriptor instead.
func (Deployment_LoadDetails) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{96, 0}
}

// Instances are one of a these types.
type Instance_Type int32

const (
	// The "traditional" instance type, a process that is running
	// constantly for a long period of time.
	Instance_LONG_RUNNING Instance_Type = 0
	// An instance that was launched in response to a request and will
	// disappear quickly.
	Instance_ON_DEMAND Instance_Type = 1
	// An instance that is not actually running any code, but registers
	// itself as an instance for the purposes of interacting with the
	// exec and logs functionality
	Instance_VIRTUAL Instance_Type = 2
)

// Enum value maps for Instance_Type.
var (
	Instance_Type_name = map[int32]string{
		0: "LONG_RUNNING",
		1: "ON_DEMAND",
		2: "VIRTUAL",
	}
	Instance_Type_value = map[string]int32{
		"LONG_RUNNING": 0,
		"ON_DEMAND":    1,
		"VIRTUAL":      2,
	}
)

func (x Instance_Type) Enum() *Instance_Type {
	p := new(Instance_Type)
	*p = x
	return p
}

func (x Instance_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instance_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[10].Descriptor()
}

func (Instance_Type) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[10]
}

func (x Instance_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instance_Type.Descriptor instead.
func (Instance_Type) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{100, 0}
}

type Release_LoadDetails int32

const (
	Release_NONE       Release_LoadDetails = 0
	Release_DEPLOYMENT Release_LoadDetails = 1
	Release_ARTIFACT   Release_LoadDetails = 2
	Release_BUILD      Release_LoadDetails = 3
)

// Enum value maps for Release_LoadDetails.
var (
	Release_LoadDetails_name = map[int32]string{
		0: "NONE",
		1: "DEPLOYMENT",
		2: "ARTIFACT",
		3: "BUILD",
	}
	Release_LoadDetails_value = map[string]int32{
		"NONE":       0,
		"DEPLOYMENT": 1,
		"ARTIFACT":   2,
		"BUILD":      3,
	}
)

func (x Release_LoadDetails) Enum() *Release_LoadDetails {
	p := new(Release_LoadDetails)
	*p = x
	return p
}

func (x Release_LoadDetails) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Release_LoadDetails) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[11].Descriptor()
}

func (Release_LoadDetails) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[11]
}

func (x Release_LoadDetails) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Release_LoadDetails.Descriptor instead.
func (Release_LoadDetails) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{107, 0}
}

type LogBatch_Entry_Source int32

const (
	// App is zero for backwards compatibility since Source was
	// added later this allows the default to just work.
	LogBatch_Entry_APP LogBatch_Entry_Source = 0
	// Entrypoint logs.
	LogBatch_Entry_ENTRYPOINT LogBatch_Entry_Source = 1
)

// Enum value maps for LogBatch_Entry_Source.
var (
	LogBatch_Entry_Source_name = map[int32]string{
		0: "APP",
		1: "ENTRYPOINT",
	}
	LogBatch_Entry_Source_value = map[string]int32{
		"APP":        0,
		"ENTRYPOINT": 1,
	}
)

func (x LogBatch_Entry_Source) Enum() *LogBatch_Entry_Source {
	p := new(LogBatch_Entry_Source)
	*p = x
	return p
}

func (x LogBatch_Entry_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogBatch_Entry_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[12].Descriptor()
}

func (LogBatch_Entry_Source) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[12]
}

func (x LogBatch_Entry_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogBatch_Entry_Source.Descriptor instead.
func (LogBatch_Entry_Source) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{119, 0, 0}
}

type ExecStreamResponse_Output_Channel int32

const (
	ExecStreamResponse_Output_UNKNOWN ExecStreamResponse_Output_Channel = 0
	ExecStreamResponse_Output_STDOUT  ExecStreamResponse_Output_Channel = 1
	ExecStreamResponse_Output_STDERR  ExecStreamResponse_Output_Channel = 2
)

// Enum value maps for ExecStreamResponse_Output_Channel.
var (
	ExecStreamResponse_Output_Channel_name = map[int32]string{
		0: "UNKNOWN",
		1: "STDOUT",
		2: "STDERR",
	}
	ExecStreamResponse_Output_Channel_value = map[string]int32{
		"UNKNOWN": 0,
		"STDOUT":  1,
		"STDERR":  2,
	}
)

func (x ExecStreamResponse_Output_Channel) Enum() *ExecStreamResponse_Output_Channel {
	p := new(ExecStreamResponse_Output_Channel)
	*p = x
	return p
}

func (x ExecStreamResponse_Output_Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecStreamResponse_Output_Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[13].Descriptor()
}

func (ExecStreamResponse_Output_Channel) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[13]
}

func (x ExecStreamResponse_Output_Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecStreamResponse_Output_Channel.Descriptor instead.
func (ExecStreamResponse_Output_Channel) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{130, 2, 0}
}

type EntrypointExecRequest_Output_Channel int32

const (
	EntrypointExecRequest_Output_UNKNOWN EntrypointExecRequest_Output_Channel = 0
	EntrypointExecRequest_Output_STDOUT  EntrypointExecRequest_Output_Channel = 1
	EntrypointExecRequest_Output_STDERR  EntrypointExecRequest_Output_Channel = 2
)

// Enum value maps for EntrypointExecRequest_Output_Channel.
var (
	EntrypointExecRequest_Output_Channel_name = map[int32]string{
		0: "UNKNOWN",
		1: "STDOUT",
		2: "STDERR",
	}
	EntrypointExecRequest_Output_Channel_value = map[string]int32{
		"UNKNOWN": 0,
		"STDOUT":  1,
		"STDERR":  2,
	}
)

func (x EntrypointExecRequest_Output_Channel) Enum() *EntrypointExecRequest_Output_Channel {
	p := new(EntrypointExecRequest_Output_Channel)
	*p = x
	return p
}

func (x EntrypointExecRequest_Output_Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntrypointExecRequest_Output_Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[14].Descriptor()
}

func (EntrypointExecRequest_Output_Channel) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[14]
}

func (x EntrypointExecRequest_Output_Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntrypointExecRequest_Output_Channel.Descriptor instead.
func (EntrypointExecRequest_Output_Channel) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{135, 2, 0}
}

type Snapshot_Header_Format int32

const (
	Snapshot_Header_UNKNOWN Snapshot_Header_Format = 0
	Snapshot_Header_BOLT    Snapshot_Header_Format = 1 // Expect a series of BoltChunk messages
)

// Enum value maps for Snapshot_Header_Format.
var (
	Snapshot_Header_Format_name = map[int32]string{
		0: "UNKNOWN",
		1: "BOLT",
	}
	Snapshot_Header_Format_value = map[string]int32{
		"UNKNOWN": 0,
		"BOLT":    1,
	}
)

func (x Snapshot_Header_Format) Enum() *Snapshot_Header_Format {
	p := new(Snapshot_Header_Format)
	*p = x
	return p
}

func (x Snapshot_Header_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Snapshot_Header_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_proto_server_proto_enumTypes[15].Descriptor()
}

func (Snapshot_Header_Format) Type() protoreflect.EnumType {
	return &file_internal_server_proto_server_proto_enumTypes[15]
}

func (x Snapshot_Header_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Snapshot_Header_Format.Descriptor instead.
func (Snapshot_Header_Format) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{148, 0, 0}
}

type GetVersionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *VersionInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetVersionInfoResponse) Reset() {
	*x = GetVersionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionInfoResponse) ProtoMessage() {}

func (x *GetVersionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionInfoResponse.ProtoReflect.Descriptor instead.
func (*GetVersionInfoResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{0}
}

func (x *GetVersionInfoResponse) GetInfo() *VersionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api        *VersionInfo_ProtocolVersion `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Entrypoint *VersionInfo_ProtocolVersion `protobuf:"bytes,2,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	// Full version string (semver-syntax). This may be hidden/blank for
	// security purposes so clients should gracefully handle blank values.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{1}
}

func (x *VersionInfo) GetApi() *VersionInfo_ProtocolVersion {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *VersionInfo) GetEntrypoint() *VersionInfo_ProtocolVersion {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *VersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *Ref_Project `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Name    string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates signal to be sent to the applications when its config files
	// change.
	FileChangeSignal string `protobuf:"bytes,3,opt,name=file_change_signal,json=fileChangeSignal,proto3" json:"file_change_signal,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{2}
}

func (x *Application) GetProject() *Ref_Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetFileChangeSignal() string {
	if x != nil {
		return x.FileChangeSignal
	}
	return ""
}

// Variable stores a variable's value, and metadata to allow for precedence
// sorting and source-specific error messaging
type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// value stores one of three simple types (string, number, bool) as their
	// matching protobuf format, or any complex hcl type as a raw string. Values
	// taken from cli -var arguments and env vars are all processed as strings;
	// if a complex type is assigned from one of these sources, it is checked
	// for being assigned a complex type in the variable evaluation stage.
	//
	// Types that are assignable to Value:
	//	*Variable_Str
	//	*Variable_Bool
	//	*Variable_Num
	//	*Variable_Hcl
	Value isVariable_Value `protobuf_oneof:"value"`
	// Source tracks where a value came from for more helpful error messaging.
	// This is optional. If unset, we will give a generic error message.
	//
	// Types that are assignable to Source:
	//	*Variable_Cli
	//	*Variable_File_
	//	*Variable_Env
	//	*Variable_Vcs
	//	*Variable_Server
	Source isVariable_Source `protobuf_oneof:"source"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{3}
}

func (x *Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Variable) GetValue() isVariable_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Variable) GetStr() string {
	if x, ok := x.GetValue().(*Variable_Str); ok {
		return x.Str
	}
	return ""
}

func (x *Variable) GetBool() bool {
	if x, ok := x.GetValue().(*Variable_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *Variable) GetNum() int64 {
	if x, ok := x.GetValue().(*Variable_Num); ok {
		return x.Num
	}
	return 0
}

func (x *Variable) GetHcl() string {
	if x, ok := x.GetValue().(*Variable_Hcl); ok {
		return x.Hcl
	}
	return ""
}

func (m *Variable) GetSource() isVariable_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Variable) GetCli() *emptypb.Empty {
	if x, ok := x.GetSource().(*Variable_Cli); ok {
		return x.Cli
	}
	return nil
}

func (x *Variable) GetFile() *Variable_File {
	if x, ok := x.GetSource().(*Variable_File_); ok {
		return x.File
	}
	return nil
}

func (x *Variable) GetEnv() *emptypb.Empty {
	if x, ok := x.GetSource().(*Variable_Env); ok {
		return x.Env
	}
	return nil
}

func (x *Variable) GetVcs() *Variable_VCS {
	if x, ok := x.GetSource().(*Variable_Vcs); ok {
		return x.Vcs
	}
	return nil
}

func (x *Variable) GetServer() *emptypb.Empty {
	if x, ok := x.GetSource().(*Variable_Server); ok {
		return x.Server
	}
	return nil
}

type isVariable_Value interface {
	isVariable_Value()
}

type Variable_Str struct {
	Str string `protobuf:"bytes,2,opt,name=str,proto3,oneof"`
}

type Variable_Bool struct {
	Bool bool `protobuf:"varint,9,opt,name=bool,proto3,oneof"`
}

type Variable_Num struct {
	Num int64 `protobuf:"varint,10,opt,name=num,proto3,oneof"`
}

type Variable_Hcl struct {
	// hcl stores values of any complex type in a raw string format, and
	// converts it to hcl when we evaluate variables. This is used when
	// loading values from a file or from the server/UI.
	Hcl string `protobuf:"bytes,3,opt,name=hcl,proto3,oneof"`
}

func (*Variable_Str) isVariable_Value() {}

func (*Variable_Bool) isVariable_Value() {}

func (*Variable_Num) isVariable_Value() {}

func (*Variable_Hcl) isVariable_Value() {}

type isVariable_Source interface {
	isVariable_Source()
}

type Variable_Cli struct {
	// Cli is set if a variable value is set via a -var flag
	Cli *emptypb.Empty `protobuf:"bytes,4,opt,name=cli,proto3,oneof"`
}

type Variable_File_ struct {
	// File is set if a variable value is set via a -var-file flag
	File *Variable_File `protobuf:"bytes,5,opt,name=file,proto3,oneof"`
}

type Variable_Env struct {
	// Env is set if a variable value is set in the local
	// environment via a WP_VAR_*
	Env *emptypb.Empty `protobuf:"bytes,6,opt,name=env,proto3,oneof"`
}

type Variable_Vcs struct {
	// VCS is set if git polling is enabled and an
	// *.auto.wpvars.hcl/json file is found in the repo
	Vcs *Variable_VCS `protobuf:"bytes,7,opt,name=vcs,proto3,oneof"`
}

type Variable_Server struct {
	// Server is set if the variable value comes from the server.
	// When we add support for workspace variables, we can store the workspace
	// id here.
	Server *emptypb.Empty `protobuf:"bytes,8,opt,name=server,proto3,oneof"`
}

func (*Variable_Cli) isVariable_Source() {}

func (*Variable_File_) isVariable_Source() {}

func (*Variable_Env) isVariable_Source() {}

func (*Variable_Vcs) isVariable_Source() {}

func (*Variable_Server) isVariable_Source() {}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The set of applications that are known about this project. Note that
	// this may not exactly represent the project configuration if a user hasn't
	// run `waypoint init` yet.
	//
	// The applications cannot be modified in any Project APIs. You must
	// use the dedicated Application APIs.
	Applications []*Application `protobuf:"bytes,2,rep,name=applications,proto3" json:"applications,omitempty"`
	// If true, then the `-remote` flag or the `waypoint build project/app`
	// syntax can be used with a remote runner. If this is false, then
	// this is not allowed. This is typically configured using the
	// `runner {}` block in the waypoint config.
	RemoteEnabled bool `protobuf:"varint,3,opt,name=remote_enabled,json=remoteEnabled,proto3" json:"remote_enabled,omitempty"`
	// Where data is sourced for remote operations. If this isn't set, then
	// there is no default data source and it will be an error if a job is
	// queued for this project without a data source set. This is usually
	// set using the `runner {}` block in the waypoint config.
	DataSource *Job_DataSource `protobuf:"bytes,4,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	// Polling settings. Polling will trigger a "waypoint up" whenever a
	// new data is detected on the data source. For now, polling is only done
	// on the `default` workspace. A future version of Waypoint will expand
	// polling to other workspaces.
	//
	// Each polling event is tracked as a separate job. You can query the
	// poll operations and their success/failure by using the ListJobs API.
	DataSourcePoll *Project_Poll `protobuf:"bytes,7,opt,name=data_source_poll,json=dataSourcePoll,proto3" json:"data_source_poll,omitempty"`
	// The contents of a default waypoint.hcl file. This will be used ONLY IF
	// this project does not have a waypoint.hcl file when an operation is
	// executed. When this is used, local operations can't be run any more
	// since the CLI usually determines the project based on the waypoint.hcl
	// file. The CLI may still be used for remote operations by executing
	// i.e. waypoint up <project>
	WaypointHcl       []byte         `protobuf:"bytes,5,opt,name=waypoint_hcl,json=waypointHcl,proto3" json:"waypoint_hcl,omitempty"`
	WaypointHclFormat Project_Format `protobuf:"varint,6,opt,name=waypoint_hcl_format,json=waypointHclFormat,proto3,enum=hashicorp.waypoint.Project_Format" json:"waypoint_hcl_format,omitempty"`
	// Indicates signal to be sent to any applications when their config files
	// change.
	FileChangeSignal string `protobuf:"bytes,8,opt,name=file_change_signal,json=fileChangeSignal,proto3" json:"file_change_signal,omitempty"`
	// NOTE: Variables are WIP and experimental; currently
	// these are not used, and don't do anything
	// WIP: Variable values stored on the server. These values are set in the UI.
	Variables []*Variable `protobuf:"bytes,9,rep,name=variables,proto3" json:"variables,omitempty"`
	// Application polling settings. Polling will trigger a "StatusFunc" for collecting a
	// report on the current status of the application.
	// For now, polling is only done on the `default` workspace. A future
	// version of Waypoint will expand polling to other workspaces.
	//
	// Each polling event is tracked as a separate job. You can query the
	// poll operations and their success/failure by using the ListJobs API.
	StatusReportPoll *Project_AppStatusPoll `protobuf:"bytes,10,opt,name=status_report_poll,json=statusReportPoll,proto3" json:"status_report_poll,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{4}
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetApplications() []*Application {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *Project) GetRemoteEnabled() bool {
	if x != nil {
		return x.RemoteEnabled
	}
	return false
}

func (x *Project) GetDataSource() *Job_DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *Project) GetDataSourcePoll() *Project_Poll {
	if x != nil {
		return x.DataSourcePoll
	}
	return nil
}

func (x *Project) GetWaypointHcl() []byte {
	if x != nil {
		return x.WaypointHcl
	}
	return nil
}

func (x *Project) GetWaypointHclFormat() Project_Format {
	if x != nil {
		return x.WaypointHclFormat
	}
	return Project_HCL
}

func (x *Project) GetFileChangeSignal() string {
	if x != nil {
		return x.FileChangeSignal
	}
	return ""
}

func (x *Project) GetVariables() []*Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Project) GetStatusReportPoll() *Project_AppStatusPoll {
	if x != nil {
		return x.StatusReportPoll
	}
	return nil
}

type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The list of projects that have executed at least one operation within
	// the context of this workspace.
	Projects []*Workspace_Project `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty"`
	// active_time is the last time that this workspace had activity.
	ActiveTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{5}
}

func (x *Workspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workspace) GetProjects() []*Workspace_Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *Workspace) GetActiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveTime
	}
	return nil
}

// User represents a single user identity within the Waypoint server. A
// user account may represent multiple authentication methods (OIDC from
// multiple sources, tokens, etc.).
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id that is unique to the Waypoint server (usually a ULID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// username, unique to the Waypoint server. May not be blank,
	// but can be changed. We allow changing so that auth methods
	// such as OIDC can generate non-user-friendly usernames and
	// the user can fix them up later.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Display name, not used for login. May be blank.
	Display string `protobuf:"bytes,3,opt,name=display,proto3" json:"display,omitempty"`
	// Email, not used for login. May be blank. May not be verified.
	// Verification currently depends on the auth system. One day maybe
	// Waypoint will handle this.
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// Links is the list of account links with 3rd party
	// identity systems.
	Links []*User_Link `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{6}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetLinks() []*User_Link {
	if x != nil {
		return x.Links
	}
	return nil
}

// Ref contains shared messages used for references to other resources.
//
// Refs should be used when the full type shouldn't be embedded in the message.
type Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ref) Reset() {
	*x = Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref) ProtoMessage() {}

func (x *Ref) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref.ProtoReflect.Descriptor instead.
func (*Ref) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7}
}

// Component represents metadata about a component. A component is the
// generic name for a builder, registry, platform, etc.
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the component
	Type Component_Type `protobuf:"varint,1,opt,name=type,proto3,enum=hashicorp.waypoint.Component_Type" json:"type,omitempty"`
	// name of the component
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{8}
}

func (x *Component) GetType() Component_Type {
	if x != nil {
		return x.Type
	}
	return Component_UNKNOWN
}

func (x *Component) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Status represents the status of an async operation.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// state is the state of this operation.
	State Status_State `protobuf:"varint,1,opt,name=state,proto3,enum=hashicorp.waypoint.Status_State" json:"state,omitempty"`
	// details may be non-empty to provide human-friendly information
	// about the current status. This may change between status updates
	// for the same state to provide updated details about the state.
	Details string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// error is set if the state == ERROR with the error that occurred.
	Error *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// start_time is the time the operation was started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// complete_time is the time the operation completed (success or fail).
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{9}
}

func (x *Status) GetState() Status_State {
	if x != nil {
		return x.State
	}
	return Status_UNKNOWN
}

func (x *Status) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Status) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Status) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Status) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

type StatusFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters are ANDed together.
	Filters []*StatusFilter_Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *StatusFilter) Reset() {
	*x = StatusFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusFilter) ProtoMessage() {}

func (x *StatusFilter) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusFilter.ProtoReflect.Descriptor instead.
func (*StatusFilter) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{10}
}

func (x *StatusFilter) GetFilters() []*StatusFilter_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Operation is a shared message type used to describe "operations" which are
// executions of a build, deploy, etc. This just contains shared message types
// used for fields. Each individual operation has their own message type
// such as Deployment.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{11}
}

// OperationOrder is a shared message type used for controlling the order
// of results in queries for app operations such as build, deploys, etc.
type OperationOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order for the results.
	Order OperationOrder_Order `protobuf:"varint,2,opt,name=order,proto3,enum=hashicorp.waypoint.OperationOrder_Order" json:"order,omitempty"`
	Desc  bool                 `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// Limit the number of results
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *OperationOrder) Reset() {
	*x = OperationOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationOrder) ProtoMessage() {}

func (x *OperationOrder) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationOrder.ProtoReflect.Descriptor instead.
func (*OperationOrder) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{12}
}

func (x *OperationOrder) GetOrder() OperationOrder_Order {
	if x != nil {
		return x.Order
	}
	return OperationOrder_UNSET
}

func (x *OperationOrder) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *OperationOrder) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Generation is a shared message type used by operations to denote the
// "generation" they're a part of. A generation denotes whether shared
// physical resources were used or whether new resources were created.
// Another way to conceptualize generations: immutable deployment models
// will create new generations each operation, whereas mutable models will
// reuse a generation.
//
// The concept of a "Generation" was introduced in Waypoint 0.4. Operations
// from earlier versions will have nil generations and callers must handle
// that scenario.
//
// == Read/Write Notes
//
// Callers inserting operations should ONLY set the generation ID. Remaining
// fields will be automatically populated.
//
// Updates should never modify the generation.
type Generation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the unique identifier for this generation. This value is opaque.
	// Waypoint internally only requires that two different generations have
	// two different IDs. The format of the value can be anything.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// This is the sequence number of the first operation that introduced
	// this generation. Once all operations using a sequence number are fully
	// destroyed, a reused generation will introduce a new sequence number.
	//
	// This should not be manually set. This value will be automatically
	// populated on insert. Updates should not modify this value.
	//
	// Consumers can compare this to the sequence number of the operation
	// to determine if this generation is new or existing.
	InitialSequence uint64 `protobuf:"varint,2,opt,name=initial_sequence,json=initialSequence,proto3" json:"initial_sequence,omitempty"`
}

func (x *Generation) Reset() {
	*x = Generation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Generation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generation) ProtoMessage() {}

func (x *Generation) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Generation.ProtoReflect.Descriptor instead.
func (*Generation) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{13}
}

func (x *Generation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Generation) GetInitialSequence() uint64 {
	if x != nil {
		return x.InitialSequence
	}
	return 0
}

// A platform resource that an operation (release/deployment) has created, depends on, or manages.
type DeclaredResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the declared resource. Automatically generated
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// platform-specific name of the resource type. i.e. instance, pod, auto-scaling group, etc
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The platform on which the resource should exist, i.e. docker, gcp, k8s, etc.
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// Internal ResourceManager representation of the resource.
	State *anypb.Any `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Any additional information a plugin wants to expose on this resource.
	// EX: Availability zones on a load balancer, concurrency limit on a lambda function, etc.
	StateJson string `protobuf:"bytes,4,opt,name=state_json,json=stateJson,proto3" json:"state_json,omitempty"`
	// high level type of the resource, used for display purposes.
	CategoryDisplayHint ResourceCategoryDisplayHint `protobuf:"varint,5,opt,name=category_display_hint,json=categoryDisplayHint,proto3,enum=hashicorp.waypoint.ResourceCategoryDisplayHint" json:"category_display_hint,omitempty"`
}

func (x *DeclaredResource) Reset() {
	*x = DeclaredResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclaredResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclaredResource) ProtoMessage() {}

func (x *DeclaredResource) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclaredResource.ProtoReflect.Descriptor instead.
func (*DeclaredResource) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{14}
}

func (x *DeclaredResource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeclaredResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeclaredResource) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DeclaredResource) GetState() *anypb.Any {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DeclaredResource) GetStateJson() string {
	if x != nil {
		return x.StateJson
	}
	return ""
}

func (x *DeclaredResource) GetCategoryDisplayHint() ResourceCategoryDisplayHint {
	if x != nil {
		return x.CategoryDisplayHint
	}
	return ResourceCategoryDisplayHint_UNKNOWN
}

type TaskLaunchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of the OCI image to execute the task under.
	OciUrl string `protobuf:"bytes,1,opt,name=oci_url,json=ociUrl,proto3" json:"oci_url,omitempty"`
	// The environment variables that will be exposed to the task.
	EnvironmentVariables map[string]string `protobuf:"bytes,2,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The arguments that will be passed to the new container on boot
	Arguments []string `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *TaskLaunchInfo) Reset() {
	*x = TaskLaunchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLaunchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLaunchInfo) ProtoMessage() {}

func (x *TaskLaunchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLaunchInfo.ProtoReflect.Descriptor instead.
func (*TaskLaunchInfo) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{15}
}

func (x *TaskLaunchInfo) GetOciUrl() string {
	if x != nil {
		return x.OciUrl
	}
	return ""
}

func (x *TaskLaunchInfo) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *TaskLaunchInfo) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User to get. If this is not set then the currently logged in
	// user will be requested.
	User *Ref_User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserRequest) GetUser() *Ref_User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ListUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ListUsersResponse) Reset() {
	*x = ListUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse) ProtoMessage() {}

func (x *ListUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse.ProtoReflect.Descriptor instead.
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{18}
}

func (x *ListUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User to update along with the edited fields. Please see the docs
	// on User to determine what can be edited. Fields that aren't editable
	// will be ignored.
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *Ref_User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteUserRequest) GetUser() *Ref_User {
	if x != nil {
		return x.User
	}
	return nil
}

// AuthMethod is a mechanism for authenticating to the Waypoint server.
// An AuthMethod deals with AuthN only: it provides identity and trades
// that for a Waypoint token.
type AuthMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique name for this auth method
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// human friendly name for display and description. This has no impact
	// internally and is only helpful for the UI and API. This is optional.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A selector to determine whether a user who authenticates using this
	// is allowed to authenticate at all. This runs before authentication
	// completes. This can be used to check group membership and so on.
	// Available variables depend on the auth method used.
	//
	// The syntax of this is this:
	// https://github.com/hashicorp/go-bexpr
	// (better docs to follow)
	AccessSelector string `protobuf:"bytes,4,opt,name=access_selector,json=accessSelector,proto3" json:"access_selector,omitempty"`
	// The method to configure.
	//
	// Types that are assignable to Method:
	//	*AuthMethod_Oidc
	Method isAuthMethod_Method `protobuf_oneof:"method"`
}

func (x *AuthMethod) Reset() {
	*x = AuthMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthMethod) ProtoMessage() {}

func (x *AuthMethod) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthMethod.ProtoReflect.Descriptor instead.
func (*AuthMethod) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{22}
}

func (x *AuthMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthMethod) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AuthMethod) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AuthMethod) GetAccessSelector() string {
	if x != nil {
		return x.AccessSelector
	}
	return ""
}

func (m *AuthMethod) GetMethod() isAuthMethod_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *AuthMethod) GetOidc() *AuthMethod_OIDC {
	if x, ok := x.GetMethod().(*AuthMethod_Oidc); ok {
		return x.Oidc
	}
	return nil
}

type isAuthMethod_Method interface {
	isAuthMethod_Method()
}

type AuthMethod_Oidc struct {
	// OIDC uses OpenID Connect for auth. OIDC is supported by most
	// major identity providers.
	Oidc *AuthMethod_OIDC `protobuf:"bytes,20,opt,name=oidc,proto3,oneof"`
}

func (*AuthMethod_Oidc) isAuthMethod_Method() {}

// This is used by ListOIDCAuthMethods to return the minimal information
// for an OIDC auth method in an unauthenticated setting.
type OIDCAuthMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier used for this auth method. This may or may
	// not be human friendly; use display_name for human display.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// human friendly name
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// kind is a well known kind of OIDC provider. This is sniffed by
	// the server heuristically and is only here to assist in the UI.
	Kind OIDCAuthMethod_Kind `protobuf:"varint,3,opt,name=kind,proto3,enum=hashicorp.waypoint.OIDCAuthMethod_Kind" json:"kind,omitempty"`
}

func (x *OIDCAuthMethod) Reset() {
	*x = OIDCAuthMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OIDCAuthMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCAuthMethod) ProtoMessage() {}

func (x *OIDCAuthMethod) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCAuthMethod.ProtoReflect.Descriptor instead.
func (*OIDCAuthMethod) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{23}
}

func (x *OIDCAuthMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OIDCAuthMethod) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OIDCAuthMethod) GetKind() OIDCAuthMethod_Kind {
	if x != nil {
		return x.Kind
	}
	return OIDCAuthMethod_UNKNOWN
}

type UpsertAuthMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AuthMethod to upsert. See the message for what fields to set.
	AuthMethod *AuthMethod `protobuf:"bytes,1,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`
}

func (x *UpsertAuthMethodRequest) Reset() {
	*x = UpsertAuthMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAuthMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAuthMethodRequest) ProtoMessage() {}

func (x *UpsertAuthMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAuthMethodRequest.ProtoReflect.Descriptor instead.
func (*UpsertAuthMethodRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{24}
}

func (x *UpsertAuthMethodRequest) GetAuthMethod() *AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return nil
}

type UpsertAuthMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethod *AuthMethod `protobuf:"bytes,1,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`
}

func (x *UpsertAuthMethodResponse) Reset() {
	*x = UpsertAuthMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAuthMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAuthMethodResponse) ProtoMessage() {}

func (x *UpsertAuthMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAuthMethodResponse.ProtoReflect.Descriptor instead.
func (*UpsertAuthMethodResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{25}
}

func (x *UpsertAuthMethodResponse) GetAuthMethod() *AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return nil
}

type GetAuthMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethod *Ref_AuthMethod `protobuf:"bytes,1,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`
}

func (x *GetAuthMethodRequest) Reset() {
	*x = GetAuthMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthMethodRequest) ProtoMessage() {}

func (x *GetAuthMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthMethodRequest.ProtoReflect.Descriptor instead.
func (*GetAuthMethodRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{26}
}

func (x *GetAuthMethodRequest) GetAuthMethod() *Ref_AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return nil
}

type GetAuthMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethod *AuthMethod `protobuf:"bytes,1,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`
}

func (x *GetAuthMethodResponse) Reset() {
	*x = GetAuthMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthMethodResponse) ProtoMessage() {}

func (x *GetAuthMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthMethodResponse.ProtoReflect.Descriptor instead.
func (*GetAuthMethodResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{27}
}

func (x *GetAuthMethodResponse) GetAuthMethod() *AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return nil
}

type DeleteAuthMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethod *Ref_AuthMethod `protobuf:"bytes,1,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`
}

func (x *DeleteAuthMethodRequest) Reset() {
	*x = DeleteAuthMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthMethodRequest) ProtoMessage() {}

func (x *DeleteAuthMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthMethodRequest.ProtoReflect.Descriptor instead.
func (*DeleteAuthMethodRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteAuthMethodRequest) GetAuthMethod() *Ref_AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return nil
}

type ListAuthMethodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethods []*AuthMethod `protobuf:"bytes,1,rep,name=auth_methods,json=authMethods,proto3" json:"auth_methods,omitempty"`
}

func (x *ListAuthMethodsResponse) Reset() {
	*x = ListAuthMethodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthMethodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthMethodsResponse) ProtoMessage() {}

func (x *ListAuthMethodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthMethodsResponse.ProtoReflect.Descriptor instead.
func (*ListAuthMethodsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{29}
}

func (x *ListAuthMethodsResponse) GetAuthMethods() []*AuthMethod {
	if x != nil {
		return x.AuthMethods
	}
	return nil
}

type ListOIDCAuthMethodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethods []*OIDCAuthMethod `protobuf:"bytes,1,rep,name=auth_methods,json=authMethods,proto3" json:"auth_methods,omitempty"`
}

func (x *ListOIDCAuthMethodsResponse) Reset() {
	*x = ListOIDCAuthMethodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOIDCAuthMethodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOIDCAuthMethodsResponse) ProtoMessage() {}

func (x *ListOIDCAuthMethodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOIDCAuthMethodsResponse.ProtoReflect.Descriptor instead.
func (*ListOIDCAuthMethodsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{30}
}

func (x *ListOIDCAuthMethodsResponse) GetAuthMethods() []*OIDCAuthMethod {
	if x != nil {
		return x.AuthMethods
	}
	return nil
}

type GetOIDCAuthURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OIDC auth method to use
	AuthMethod *Ref_AuthMethod `protobuf:"bytes,1,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`
	// The URL that authorization should redirect to.
	RedirectUri string `protobuf:"bytes,2,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	// Nonce is a randomly generated string to prevent replay attacks.
	// It is up to the client to generate this. This must then be passed
	// back to CompleteOIDCAuthRequest.
	Nonce string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *GetOIDCAuthURLRequest) Reset() {
	*x = GetOIDCAuthURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOIDCAuthURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOIDCAuthURLRequest) ProtoMessage() {}

func (x *GetOIDCAuthURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOIDCAuthURLRequest.ProtoReflect.Descriptor instead.
func (*GetOIDCAuthURLRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{31}
}

func (x *GetOIDCAuthURLRequest) GetAuthMethod() *Ref_AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return nil
}

func (x *GetOIDCAuthURLRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *GetOIDCAuthURLRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type GetOIDCAuthURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL to begin authorization. The user should go here.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetOIDCAuthURLResponse) Reset() {
	*x = GetOIDCAuthURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOIDCAuthURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOIDCAuthURLResponse) ProtoMessage() {}

func (x *GetOIDCAuthURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOIDCAuthURLResponse.ProtoReflect.Descriptor instead.
func (*GetOIDCAuthURLResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{32}
}

func (x *GetOIDCAuthURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CompleteOIDCAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethod *Ref_AuthMethod `protobuf:"bytes,1,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`
	// This should match the GetOIDCAuthURL RPC. This is not used anymore
	// except for verification.
	RedirectUri string `protobuf:"bytes,2,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	// This should be provided from the parameters given to the redirect URL.
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Nonce string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Code  string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CompleteOIDCAuthRequest) Reset() {
	*x = CompleteOIDCAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteOIDCAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteOIDCAuthRequest) ProtoMessage() {}

func (x *CompleteOIDCAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteOIDCAuthRequest.ProtoReflect.Descriptor instead.
func (*CompleteOIDCAuthRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{33}
}

func (x *CompleteOIDCAuthRequest) GetAuthMethod() *Ref_AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return nil
}

func (x *CompleteOIDCAuthRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *CompleteOIDCAuthRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CompleteOIDCAuthRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CompleteOIDCAuthRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type CompleteOIDCAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// The user that was authenticated. This is the same as if GetUser
	// was called with the token returned. This is eager returned because
	// it is commonly useful and also readily available as part of auth.
	User *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// These are all the claims that were associated with this OIDC
	// authentication. This is used for debugging and operator inspection
	// when setting up an OIDC auth method and aren't meant for general purpose
	// use. These may also contain sensitive data so it shouldn't be stored.
	IdClaimsJson   string `protobuf:"bytes,3,opt,name=id_claims_json,json=idClaimsJson,proto3" json:"id_claims_json,omitempty"`
	UserClaimsJson string `protobuf:"bytes,4,opt,name=user_claims_json,json=userClaimsJson,proto3" json:"user_claims_json,omitempty"`
}

func (x *CompleteOIDCAuthResponse) Reset() {
	*x = CompleteOIDCAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteOIDCAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteOIDCAuthResponse) ProtoMessage() {}

func (x *CompleteOIDCAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteOIDCAuthResponse.ProtoReflect.Descriptor instead.
func (*CompleteOIDCAuthResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{34}
}

func (x *CompleteOIDCAuthResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CompleteOIDCAuthResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CompleteOIDCAuthResponse) GetIdClaimsJson() string {
	if x != nil {
		return x.IdClaimsJson
	}
	return ""
}

func (x *CompleteOIDCAuthResponse) GetUserClaimsJson() string {
	if x != nil {
		return x.UserClaimsJson
	}
	return ""
}

type QueueJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The job to queue. See the Job message documentation for more details
	// on what to set.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	// Set an expiration duration. If the job is not assigned and acked
	// in the given duration then the job will be automatically cancelled.
	ExpiresIn string `protobuf:"bytes,2,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *QueueJobRequest) Reset() {
	*x = QueueJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueJobRequest) ProtoMessage() {}

func (x *QueueJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueJobRequest.ProtoReflect.Descriptor instead.
func (*QueueJobRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{35}
}

func (x *QueueJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *QueueJobRequest) GetExpiresIn() string {
	if x != nil {
		return x.ExpiresIn
	}
	return ""
}

type QueueJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the job ID that was queued. This can be used with other RPC methods
	// to check on the status, cancel, etc.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *QueueJobResponse) Reset() {
	*x = QueueJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueJobResponse) ProtoMessage() {}

func (x *QueueJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueJobResponse.ProtoReflect.Descriptor instead.
func (*QueueJobResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{36}
}

func (x *QueueJobResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type CancelJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The job to cancel
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{37}
}

func (x *CancelJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type ValidateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The job to validate.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	// If true, will NOT validate that the job is assignable.
	DisableAssign bool `protobuf:"varint,2,opt,name=disable_assign,json=disableAssign,proto3" json:"disable_assign,omitempty"`
}

func (x *ValidateJobRequest) Reset() {
	*x = ValidateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateJobRequest) ProtoMessage() {}

func (x *ValidateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateJobRequest.ProtoReflect.Descriptor instead.
func (*ValidateJobRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{38}
}

func (x *ValidateJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *ValidateJobRequest) GetDisableAssign() bool {
	if x != nil {
		return x.DisableAssign
	}
	return false
}

type ValidateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// valid will be true if the job structure is valid. If it is invalid
	// validation_error will be set with a reason.
	Valid           bool           `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ValidationError *status.Status `protobuf:"bytes,2,opt,name=validation_error,json=validationError,proto3" json:"validation_error,omitempty"`
	// assignable will be true if the job is assignable at this point-in-time.
	// Assignable means that there are runners registered with the server that
	// claim to be able to service this job. Note that this is a point-in-time
	// result so it doesn't guarantee that a job will be serviced when queued.
	// Additionally, assignability doesn't imply anything about queue length,
	// so the job may still be queued for some time.
	//
	// This will always be false if "valid" is false since we don't check
	// assignability of invalid jobs.
	Assignable bool `protobuf:"varint,3,opt,name=assignable,proto3" json:"assignable,omitempty"`
}

func (x *ValidateJobResponse) Reset() {
	*x = ValidateJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateJobResponse) ProtoMessage() {}

func (x *ValidateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateJobResponse.ProtoReflect.Descriptor instead.
func (*ValidateJobResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{39}
}

func (x *ValidateJobResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidateJobResponse) GetValidationError() *status.Status {
	if x != nil {
		return x.ValidationError
	}
	return nil
}

func (x *ValidateJobResponse) GetAssignable() bool {
	if x != nil {
		return x.Assignable
	}
	return false
}

// A Job is a job that executes on a runner and is queued by QueueOperation.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the job. This is generated on the server side when queued. If
	// you are queueing a job, this must be empty or unset.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If this is set, then only one job with this singleton_id may exist
	// at any point in the QUEUED state. If QueueJob is called with this set
	// and an existing job is already queued with a matching singleton_id,
	// that job will be overwritten with this job.
	// This is optional.
	SingletonId string `protobuf:"bytes,8,opt,name=singleton_id,json=singletonId,proto3" json:"singleton_id,omitempty"`
	// The application to target for the operation. Some operations may allow
	// certain fields of this to be empty, so check with the operation
	// documentation to determine what needs to be set. Generally, project
	// must be set.
	// This is required.
	Application *Ref_Application `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	// The workspace to perform the operation in.
	// This is required.
	Workspace *Ref_Workspace `protobuf:"bytes,3,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The runner that should execute this job.
	// This is required.
	TargetRunner *Ref_Runner `protobuf:"bytes,4,opt,name=target_runner,json=targetRunner,proto3" json:"target_runner,omitempty"`
	// Labels are the labels to set for this operation.
	// This is optional.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// data_source determines where the data to operate on (such as the
	// application source code and Waypoint configuration) comes from.
	// If this is not set then QueueJob will populate this if a default
	// data source is configured for the target project.
	//
	// The overrides will set overrides of configs for the data source. This is
	// data source dependent but this allows for example setting the Git ref
	// without knowing the full data source. Invalid overrides will fail the
	// job.
	// Ergo, this is optional.
	DataSource          *Job_DataSource   `protobuf:"bytes,6,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	DataSourceOverrides map[string]string `protobuf:"bytes,7,rep,name=data_source_overrides,json=dataSourceOverrides,proto3" json:"data_source_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// NOTE: Variables are WIP and experimental; currently
	// these are not used, and don't do anything
	// WIP: variables store the key/value pairs of parsed variables; the parse
	// prior to running a job only verifies syntax correctness. Verifying type
	// checks and the presence of required values will both need to be done
	// in the job's validation
	Variables []*Variable `protobuf:"bytes,9,rep,name=variables,proto3" json:"variables,omitempty"`
	// The operation to execute. See the message docs for details on the operation.
	// This is required, set one (and one only).
	//
	// Types that are assignable to Operation:
	//	*Job_Noop_
	//	*Job_Build
	//	*Job_Push
	//	*Job_Deploy
	//	*Job_Destroy
	//	*Job_Release
	//	*Job_Validate
	//	*Job_Auth
	//	*Job_Docs
	//	*Job_ConfigSync
	//	*Job_Exec
	//	*Job_Up
	//	*Job_Logs
	//	*Job_QueueProject
	//	*Job_Poll
	//	*Job_StatusReport
	//	*Job_StartTask
	//	*Job_StopTask
	Operation isJob_Operation `protobuf_oneof:"operation"`
	// state of the job
	State Job_State `protobuf:"varint,100,opt,name=state,proto3,enum=hashicorp.waypoint.Job_State" json:"state,omitempty"`
	// The runner that was assigned to execute this job. Note that the
	// runner may have been ephemeral and may no longer exist.
	AssignedRunner *Ref_RunnerId `protobuf:"bytes,101,opt,name=assigned_runner,json=assignedRunner,proto3" json:"assigned_runner,omitempty"`
	// The time when the job was queued.
	QueueTime    *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=queue_time,json=queueTime,proto3" json:"queue_time,omitempty"`
	AssignTime   *timestamppb.Timestamp `protobuf:"bytes,103,opt,name=assign_time,json=assignTime,proto3" json:"assign_time,omitempty"`
	AckTime      *timestamppb.Timestamp `protobuf:"bytes,104,opt,name=ack_time,json=ackTime,proto3" json:"ack_time,omitempty"`
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,105,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	// Ref of the data was fetched for this job. This is available after
	// the Ref event is sent down by GetJobStream. This is NOT used to specify
	// the ref that should be downloaded. That level of configuration should be
	// exposed via the data_source parameter itself.
	DataSourceRef *Job_DataSource_Ref `protobuf:"bytes,110,opt,name=data_source_ref,json=dataSourceRef,proto3" json:"data_source_ref,omitempty"`
	// error is set if state == ERROR
	Error *status.Status `protobuf:"bytes,106,opt,name=error,proto3" json:"error,omitempty"`
	// result is set based on the operation specified. A nil result is possible
	// for some operations.
	Result *Job_Result `protobuf:"bytes,107,opt,name=result,proto3" json:"result,omitempty"`
	// cancel time is the time that cancellation of this job was requested.
	// If this is zero then this job was not cancelled. Note that this is the
	// cancellation _request_ time. The actual time a job ended is noted by
	// the complete_time field.
	CancelTime *timestamppb.Timestamp `protobuf:"bytes,108,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time,omitempty"`
	// expire time is the time when this job would expire. If this isn't set
	// then this is a non-expiring job. This will remain set even if the job
	// never expired because it was accepted and run. This field can be used
	// to detect that it was configured to expire.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,109,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetSingletonId() string {
	if x != nil {
		return x.SingletonId
	}
	return ""
}

func (x *Job) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Job) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *Job) GetTargetRunner() *Ref_Runner {
	if x != nil {
		return x.TargetRunner
	}
	return nil
}

func (x *Job) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Job) GetDataSource() *Job_DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *Job) GetDataSourceOverrides() map[string]string {
	if x != nil {
		return x.DataSourceOverrides
	}
	return nil
}

func (x *Job) GetVariables() []*Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (m *Job) GetOperation() isJob_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *Job) GetNoop() *Job_Noop {
	if x, ok := x.GetOperation().(*Job_Noop_); ok {
		return x.Noop
	}
	return nil
}

func (x *Job) GetBuild() *Job_BuildOp {
	if x, ok := x.GetOperation().(*Job_Build); ok {
		return x.Build
	}
	return nil
}

func (x *Job) GetPush() *Job_PushOp {
	if x, ok := x.GetOperation().(*Job_Push); ok {
		return x.Push
	}
	return nil
}

func (x *Job) GetDeploy() *Job_DeployOp {
	if x, ok := x.GetOperation().(*Job_Deploy); ok {
		return x.Deploy
	}
	return nil
}

func (x *Job) GetDestroy() *Job_DestroyOp {
	if x, ok := x.GetOperation().(*Job_Destroy); ok {
		return x.Destroy
	}
	return nil
}

func (x *Job) GetRelease() *Job_ReleaseOp {
	if x, ok := x.GetOperation().(*Job_Release); ok {
		return x.Release
	}
	return nil
}

func (x *Job) GetValidate() *Job_ValidateOp {
	if x, ok := x.GetOperation().(*Job_Validate); ok {
		return x.Validate
	}
	return nil
}

func (x *Job) GetAuth() *Job_AuthOp {
	if x, ok := x.GetOperation().(*Job_Auth); ok {
		return x.Auth
	}
	return nil
}

func (x *Job) GetDocs() *Job_DocsOp {
	if x, ok := x.GetOperation().(*Job_Docs); ok {
		return x.Docs
	}
	return nil
}

func (x *Job) GetConfigSync() *Job_ConfigSyncOp {
	if x, ok := x.GetOperation().(*Job_ConfigSync); ok {
		return x.ConfigSync
	}
	return nil
}

func (x *Job) GetExec() *Job_ExecOp {
	if x, ok := x.GetOperation().(*Job_Exec); ok {
		return x.Exec
	}
	return nil
}

func (x *Job) GetUp() *Job_UpOp {
	if x, ok := x.GetOperation().(*Job_Up); ok {
		return x.Up
	}
	return nil
}

func (x *Job) GetLogs() *Job_LogsOp {
	if x, ok := x.GetOperation().(*Job_Logs); ok {
		return x.Logs
	}
	return nil
}

func (x *Job) GetQueueProject() *Job_QueueProjectOp {
	if x, ok := x.GetOperation().(*Job_QueueProject); ok {
		return x.QueueProject
	}
	return nil
}

func (x *Job) GetPoll() *Job_PollOp {
	if x, ok := x.GetOperation().(*Job_Poll); ok {
		return x.Poll
	}
	return nil
}

func (x *Job) GetStatusReport() *Job_StatusReportOp {
	if x, ok := x.GetOperation().(*Job_StatusReport); ok {
		return x.StatusReport
	}
	return nil
}

func (x *Job) GetStartTask() *Job_StartTaskLaunchOp {
	if x, ok := x.GetOperation().(*Job_StartTask); ok {
		return x.StartTask
	}
	return nil
}

func (x *Job) GetStopTask() *Job_StopTaskLaunchOp {
	if x, ok := x.GetOperation().(*Job_StopTask); ok {
		return x.StopTask
	}
	return nil
}

func (x *Job) GetState() Job_State {
	if x != nil {
		return x.State
	}
	return Job_UNKNOWN
}

func (x *Job) GetAssignedRunner() *Ref_RunnerId {
	if x != nil {
		return x.AssignedRunner
	}
	return nil
}

func (x *Job) GetQueueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.QueueTime
	}
	return nil
}

func (x *Job) GetAssignTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignTime
	}
	return nil
}

func (x *Job) GetAckTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AckTime
	}
	return nil
}

func (x *Job) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

func (x *Job) GetDataSourceRef() *Job_DataSource_Ref {
	if x != nil {
		return x.DataSourceRef
	}
	return nil
}

func (x *Job) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Job) GetResult() *Job_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Job) GetCancelTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelTime
	}
	return nil
}

func (x *Job) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

type isJob_Operation interface {
	isJob_Operation()
}

type Job_Noop_ struct {
	Noop *Job_Noop `protobuf:"bytes,50,opt,name=noop,proto3,oneof"`
}

type Job_Build struct {
	Build *Job_BuildOp `protobuf:"bytes,51,opt,name=build,proto3,oneof"`
}

type Job_Push struct {
	Push *Job_PushOp `protobuf:"bytes,52,opt,name=push,proto3,oneof"`
}

type Job_Deploy struct {
	Deploy *Job_DeployOp `protobuf:"bytes,53,opt,name=deploy,proto3,oneof"`
}

type Job_Destroy struct {
	Destroy *Job_DestroyOp `protobuf:"bytes,54,opt,name=destroy,proto3,oneof"`
}

type Job_Release struct {
	Release *Job_ReleaseOp `protobuf:"bytes,55,opt,name=release,proto3,oneof"`
}

type Job_Validate struct {
	Validate *Job_ValidateOp `protobuf:"bytes,56,opt,name=validate,proto3,oneof"`
}

type Job_Auth struct {
	Auth *Job_AuthOp `protobuf:"bytes,57,opt,name=auth,proto3,oneof"`
}

type Job_Docs struct {
	Docs *Job_DocsOp `protobuf:"bytes,58,opt,name=docs,proto3,oneof"`
}

type Job_ConfigSync struct {
	ConfigSync *Job_ConfigSyncOp `protobuf:"bytes,59,opt,name=config_sync,json=configSync,proto3,oneof"`
}

type Job_Exec struct {
	Exec *Job_ExecOp `protobuf:"bytes,60,opt,name=exec,proto3,oneof"`
}

type Job_Up struct {
	Up *Job_UpOp `protobuf:"bytes,61,opt,name=up,proto3,oneof"`
}

type Job_Logs struct {
	Logs *Job_LogsOp `protobuf:"bytes,62,opt,name=logs,proto3,oneof"`
}

type Job_QueueProject struct {
	QueueProject *Job_QueueProjectOp `protobuf:"bytes,63,opt,name=queue_project,json=queueProject,proto3,oneof"`
}

type Job_Poll struct {
	Poll *Job_PollOp `protobuf:"bytes,64,opt,name=poll,proto3,oneof"`
}

type Job_StatusReport struct {
	StatusReport *Job_StatusReportOp `protobuf:"bytes,65,opt,name=status_report,json=statusReport,proto3,oneof"`
}

type Job_StartTask struct {
	StartTask *Job_StartTaskLaunchOp `protobuf:"bytes,66,opt,name=start_task,json=startTask,proto3,oneof"`
}

type Job_StopTask struct {
	StopTask *Job_StopTaskLaunchOp `protobuf:"bytes,67,opt,name=stop_task,json=stopTask,proto3,oneof"`
}

func (*Job_Noop_) isJob_Operation() {}

func (*Job_Build) isJob_Operation() {}

func (*Job_Push) isJob_Operation() {}

func (*Job_Deploy) isJob_Operation() {}

func (*Job_Destroy) isJob_Operation() {}

func (*Job_Release) isJob_Operation() {}

func (*Job_Validate) isJob_Operation() {}

func (*Job_Auth) isJob_Operation() {}

func (*Job_Docs) isJob_Operation() {}

func (*Job_ConfigSync) isJob_Operation() {}

func (*Job_Exec) isJob_Operation() {}

func (*Job_Up) isJob_Operation() {}

func (*Job_Logs) isJob_Operation() {}

func (*Job_QueueProject) isJob_Operation() {}

func (*Job_Poll) isJob_Operation() {}

func (*Job_StatusReport) isJob_Operation() {}

func (*Job_StartTask) isJob_Operation() {}

func (*Job_StopTask) isJob_Operation() {}

type Documentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string                          `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Example     string                          `protobuf:"bytes,2,opt,name=example,proto3" json:"example,omitempty"`
	Input       string                          `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	Output      string                          `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	Fields      map[string]*Documentation_Field `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mappers     []*Documentation_Mapper         `protobuf:"bytes,6,rep,name=mappers,proto3" json:"mappers,omitempty"`
}

func (x *Documentation) Reset() {
	*x = Documentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documentation) ProtoMessage() {}

func (x *Documentation) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documentation.ProtoReflect.Descriptor instead.
func (*Documentation) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{41}
}

func (x *Documentation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Documentation) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *Documentation) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *Documentation) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *Documentation) GetFields() map[string]*Documentation_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Documentation) GetMappers() []*Documentation_Mapper {
	if x != nil {
		return x.Mappers
	}
	return nil
}

type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the job to request.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{42}
}

func (x *GetJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type ListJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListJobsRequest) Reset() {
	*x = ListJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobsRequest) ProtoMessage() {}

func (x *ListJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobsRequest.ProtoReflect.Descriptor instead.
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{43}
}

type ListJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *ListJobsResponse) Reset() {
	*x = ListJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobsResponse) ProtoMessage() {}

func (x *ListJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobsResponse.ProtoReflect.Descriptor instead.
func (*ListJobsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{44}
}

func (x *ListJobsResponse) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type GetJobStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetJobStreamRequest) Reset() {
	*x = GetJobStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamRequest) ProtoMessage() {}

func (x *GetJobStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamRequest.ProtoReflect.Descriptor instead.
func (*GetJobStreamRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{45}
}

func (x *GetJobStreamRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetJobStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*GetJobStreamResponse_Open_
	//	*GetJobStreamResponse_State_
	//	*GetJobStreamResponse_Terminal_
	//	*GetJobStreamResponse_Download_
	//	*GetJobStreamResponse_Error_
	//	*GetJobStreamResponse_Complete_
	Event isGetJobStreamResponse_Event `protobuf_oneof:"event"`
}

func (x *GetJobStreamResponse) Reset() {
	*x = GetJobStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse) ProtoMessage() {}

func (x *GetJobStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46}
}

func (m *GetJobStreamResponse) GetEvent() isGetJobStreamResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *GetJobStreamResponse) GetOpen() *GetJobStreamResponse_Open {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Open_); ok {
		return x.Open
	}
	return nil
}

func (x *GetJobStreamResponse) GetState() *GetJobStreamResponse_State {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_State_); ok {
		return x.State
	}
	return nil
}

func (x *GetJobStreamResponse) GetTerminal() *GetJobStreamResponse_Terminal {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Terminal_); ok {
		return x.Terminal
	}
	return nil
}

func (x *GetJobStreamResponse) GetDownload() *GetJobStreamResponse_Download {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Download_); ok {
		return x.Download
	}
	return nil
}

func (x *GetJobStreamResponse) GetError() *GetJobStreamResponse_Error {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Error_); ok {
		return x.Error
	}
	return nil
}

func (x *GetJobStreamResponse) GetComplete() *GetJobStreamResponse_Complete {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Complete_); ok {
		return x.Complete
	}
	return nil
}

type isGetJobStreamResponse_Event interface {
	isGetJobStreamResponse_Event()
}

type GetJobStreamResponse_Open_ struct {
	// Open is sent as confirmation that the job stream successfully opened.
	// This will be sent immediately by the server if the job ID is valid.
	// This is useful since other events such as terminal output may not
	// happen for a long time while the job is executing, queued, etc.
	//
	// This is ALWAYS sent. If the job is already completed, this will be
	// sent first followed immediately by a Complete.
	Open *GetJobStreamResponse_Open `protobuf:"bytes,1,opt,name=open,proto3,oneof"`
}

type GetJobStreamResponse_State_ struct {
	// state is sent when there is a job state change event. This event is
	// also used if there is job metadata changes. In this case, the state
	// may be the same but the job is different.
	State *GetJobStreamResponse_State `protobuf:"bytes,2,opt,name=state,proto3,oneof"`
}

type GetJobStreamResponse_Terminal_ struct {
	// terminal output. On initial connection, the server may send buffered
	// historical terminal data so there isn't a race between queueing a job
	// and getting its first byte output. You can determine this based on the
	// flag on Terminal.
	Terminal *GetJobStreamResponse_Terminal `protobuf:"bytes,3,opt,name=terminal,proto3,oneof"`
}

type GetJobStreamResponse_Download_ struct {
	// data downloaded for the job. This is sent after the state is RUNNING
	// when the runner has cloned any data (if necessary) containing information
	// about the data. This is an optional event and may not be sent, indicating
	// that the runner is either older and doesn't support this event or that
	// there was no data download necessary and it is using local data.
	Download *GetJobStreamResponse_Download `protobuf:"bytes,6,opt,name=download,proto3,oneof"`
}

type GetJobStreamResponse_Error_ struct {
	// an error regarding the stream itself, rather than the executing job.
	// For example, if you request a job stream for an invalid job ID,
	// this will be sent back. If this is sent, no further messages will
	// be sent and the stream is terminated.
	//
	// For errors in job execution, see "complete".
	Error *GetJobStreamResponse_Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type GetJobStreamResponse_Complete_ struct {
	// job completion, no more events will follow this one. This can be
	// both success or failure, the event must be checked. Any errors
	// in complete are errors from the job execution itself.
	Complete *GetJobStreamResponse_Complete `protobuf:"bytes,5,opt,name=complete,proto3,oneof"`
}

func (*GetJobStreamResponse_Open_) isGetJobStreamResponse_Event() {}

func (*GetJobStreamResponse_State_) isGetJobStreamResponse_Event() {}

func (*GetJobStreamResponse_Terminal_) isGetJobStreamResponse_Event() {}

func (*GetJobStreamResponse_Download_) isGetJobStreamResponse_Event() {}

func (*GetJobStreamResponse_Error_) isGetJobStreamResponse_Event() {}

func (*GetJobStreamResponse_Complete_) isGetJobStreamResponse_Event() {}

type Runner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is a unique ID generated by the runner. This should be a UUID or some
	// other guaranteed unique mechanism. This is not an auth mechanism, just
	// a way to associate an ID to a runner.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The runner will only be assigned jobs that directly target this
	// runner by ID. This is used by local runners to prevent external
	// jobs from being assigned to them.
	ByIdOnly bool `protobuf:"varint,2,opt,name=by_id_only,json=byIdOnly,proto3" json:"by_id_only,omitempty"`
	// Components are the list of components that the runner supports. This
	// is used to match jobs to this runner.
	Components []*Component `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *Runner) Reset() {
	*x = Runner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runner) ProtoMessage() {}

func (x *Runner) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runner.ProtoReflect.Descriptor instead.
func (*Runner) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{47}
}

func (x *Runner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Runner) GetByIdOnly() bool {
	if x != nil {
		return x.ByIdOnly
	}
	return false
}

func (x *Runner) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

type RunnerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*RunnerConfigRequest_Open_
	Event isRunnerConfigRequest_Event `protobuf_oneof:"event"`
}

func (x *RunnerConfigRequest) Reset() {
	*x = RunnerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigRequest) ProtoMessage() {}

func (x *RunnerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigRequest.ProtoReflect.Descriptor instead.
func (*RunnerConfigRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{48}
}

func (m *RunnerConfigRequest) GetEvent() isRunnerConfigRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *RunnerConfigRequest) GetOpen() *RunnerConfigRequest_Open {
	if x, ok := x.GetEvent().(*RunnerConfigRequest_Open_); ok {
		return x.Open
	}
	return nil
}

type isRunnerConfigRequest_Event interface {
	isRunnerConfigRequest_Event()
}

type RunnerConfigRequest_Open_ struct {
	Open *RunnerConfigRequest_Open `protobuf:"bytes,1,opt,name=open,proto3,oneof"`
}

func (*RunnerConfigRequest_Open_) isRunnerConfigRequest_Event() {}

type RunnerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// config is any updated configuration for the runner.
	Config *RunnerConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *RunnerConfigResponse) Reset() {
	*x = RunnerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigResponse) ProtoMessage() {}

func (x *RunnerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigResponse.ProtoReflect.Descriptor instead.
func (*RunnerConfigResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{49}
}

func (x *RunnerConfigResponse) GetConfig() *RunnerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type RunnerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configuration for the runner. Any locally set runner config will
	// take priority in a conflict. This allows operators to setup runners
	// with specific configuration without fear that the server will override
	// them.
	ConfigVars []*ConfigVar `protobuf:"bytes,1,rep,name=config_vars,json=configVars,proto3" json:"config_vars,omitempty"`
}

func (x *RunnerConfig) Reset() {
	*x = RunnerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfig) ProtoMessage() {}

func (x *RunnerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfig.ProtoReflect.Descriptor instead.
func (*RunnerConfig) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{50}
}

func (x *RunnerConfig) GetConfigVars() []*ConfigVar {
	if x != nil {
		return x.ConfigVars
	}
	return nil
}

type RunnerJobStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*RunnerJobStreamRequest_Request_
	//	*RunnerJobStreamRequest_Ack_
	//	*RunnerJobStreamRequest_Complete_
	//	*RunnerJobStreamRequest_Error_
	//	*RunnerJobStreamRequest_Terminal
	//	*RunnerJobStreamRequest_Download
	//	*RunnerJobStreamRequest_Heartbeat_
	Event isRunnerJobStreamRequest_Event `protobuf_oneof:"event"`
}

func (x *RunnerJobStreamRequest) Reset() {
	*x = RunnerJobStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerJobStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerJobStreamRequest) ProtoMessage() {}

func (x *RunnerJobStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerJobStreamRequest.ProtoReflect.Descriptor instead.
func (*RunnerJobStreamRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{51}
}

func (m *RunnerJobStreamRequest) GetEvent() isRunnerJobStreamRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *RunnerJobStreamRequest) GetRequest() *RunnerJobStreamRequest_Request {
	if x, ok := x.GetEvent().(*RunnerJobStreamRequest_Request_); ok {
		return x.Request
	}
	return nil
}

func (x *RunnerJobStreamRequest) GetAck() *RunnerJobStreamRequest_Ack {
	if x, ok := x.GetEvent().(*RunnerJobStreamRequest_Ack_); ok {
		return x.Ack
	}
	return nil
}

func (x *RunnerJobStreamRequest) GetComplete() *RunnerJobStreamRequest_Complete {
	if x, ok := x.GetEvent().(*RunnerJobStreamRequest_Complete_); ok {
		return x.Complete
	}
	return nil
}

func (x *RunnerJobStreamRequest) GetError() *RunnerJobStreamRequest_Error {
	if x, ok := x.GetEvent().(*RunnerJobStreamRequest_Error_); ok {
		return x.Error
	}
	return nil
}

func (x *RunnerJobStreamRequest) GetTerminal() *GetJobStreamResponse_Terminal {
	if x, ok := x.GetEvent().(*RunnerJobStreamRequest_Terminal); ok {
		return x.Terminal
	}
	return nil
}

func (x *RunnerJobStreamRequest) GetDownload() *GetJobStreamResponse_Download {
	if x, ok := x.GetEvent().(*RunnerJobStreamRequest_Download); ok {
		return x.Download
	}
	return nil
}

func (x *RunnerJobStreamRequest) GetHeartbeat() *RunnerJobStreamRequest_Heartbeat {
	if x, ok := x.GetEvent().(*RunnerJobStreamRequest_Heartbeat_); ok {
		return x.Heartbeat
	}
	return nil
}

type isRunnerJobStreamRequest_Event interface {
	isRunnerJobStreamRequest_Event()
}

type RunnerJobStreamRequest_Request_ struct {
	// request MUST BE the first message sent by a client. This is used to
	// signify that a runner is ready to accept a job. This is only ever
	// sent once. Once a job is complete, the client must terminate the
	// stream and open a new connection.
	Request *RunnerJobStreamRequest_Request `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

type RunnerJobStreamRequest_Ack_ struct {
	// ack is sent to accept a job assignment from the server. This
	// should be sent soon after the job is assigned to avoid the job being
	// reassigned and duplicated.
	Ack *RunnerJobStreamRequest_Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type RunnerJobStreamRequest_Complete_ struct {
	// complete is sent on job completion. This is only sent if there
	// were no errors, so this signals a successful completion. An erroneous
	// completion is signaled by sending an Error event.
	Complete *RunnerJobStreamRequest_Complete `protobuf:"bytes,3,opt,name=complete,proto3,oneof"`
}

type RunnerJobStreamRequest_Error_ struct {
	// error is sent when there was an error with job execution (after
	// accept was sent). This signals that the job failed and it cannot
	// be retried. This terminates the job and no other events should be
	// sent.
	Error *RunnerJobStreamRequest_Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type RunnerJobStreamRequest_Terminal struct {
	// terminal output from the job.
	Terminal *GetJobStreamResponse_Terminal `protobuf:"bytes,5,opt,name=terminal,proto3,oneof"`
}

type RunnerJobStreamRequest_Download struct {
	// download event is sent after the data is downloaded. This is optional.
	// If this isn't sent the job will still remain in the "running" state but
	// download details will not be available.
	Download *GetJobStreamResponse_Download `protobuf:"bytes,7,opt,name=download,proto3,oneof"`
}

type RunnerJobStreamRequest_Heartbeat_ struct {
	// heartbeat that the job is still running.
	Heartbeat *RunnerJobStreamRequest_Heartbeat `protobuf:"bytes,6,opt,name=heartbeat,proto3,oneof"`
}

func (*RunnerJobStreamRequest_Request_) isRunnerJobStreamRequest_Event() {}

func (*RunnerJobStreamRequest_Ack_) isRunnerJobStreamRequest_Event() {}

func (*RunnerJobStreamRequest_Complete_) isRunnerJobStreamRequest_Event() {}

func (*RunnerJobStreamRequest_Error_) isRunnerJobStreamRequest_Event() {}

func (*RunnerJobStreamRequest_Terminal) isRunnerJobStreamRequest_Event() {}

func (*RunnerJobStreamRequest_Download) isRunnerJobStreamRequest_Event() {}

func (*RunnerJobStreamRequest_Heartbeat_) isRunnerJobStreamRequest_Event() {}

type RunnerJobStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*RunnerJobStreamResponse_Assignment
	//	*RunnerJobStreamResponse_Cancel
	Event isRunnerJobStreamResponse_Event `protobuf_oneof:"event"`
}

func (x *RunnerJobStreamResponse) Reset() {
	*x = RunnerJobStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerJobStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerJobStreamResponse) ProtoMessage() {}

func (x *RunnerJobStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerJobStreamResponse.ProtoReflect.Descriptor instead.
func (*RunnerJobStreamResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{52}
}

func (m *RunnerJobStreamResponse) GetEvent() isRunnerJobStreamResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *RunnerJobStreamResponse) GetAssignment() *RunnerJobStreamResponse_JobAssignment {
	if x, ok := x.GetEvent().(*RunnerJobStreamResponse_Assignment); ok {
		return x.Assignment
	}
	return nil
}

func (x *RunnerJobStreamResponse) GetCancel() *RunnerJobStreamResponse_JobCancel {
	if x, ok := x.GetEvent().(*RunnerJobStreamResponse_Cancel); ok {
		return x.Cancel
	}
	return nil
}

type isRunnerJobStreamResponse_Event interface {
	isRunnerJobStreamResponse_Event()
}

type RunnerJobStreamResponse_Assignment struct {
	// assignment is when a job is assigned to this job stream. This
	// will happen ONLY in response to a "Request" message from the client.
	Assignment *RunnerJobStreamResponse_JobAssignment `protobuf:"bytes,1,opt,name=assignment,proto3,oneof"`
}

type RunnerJobStreamResponse_Cancel struct {
	// cancel is sent when a cancel request is made.
	Cancel *RunnerJobStreamResponse_JobCancel `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

func (*RunnerJobStreamResponse_Assignment) isRunnerJobStreamResponse_Event() {}

func (*RunnerJobStreamResponse_Cancel) isRunnerJobStreamResponse_Event() {}

type RunnerGetDeploymentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunnerGetDeploymentConfigRequest) Reset() {
	*x = RunnerGetDeploymentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerGetDeploymentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerGetDeploymentConfigRequest) ProtoMessage() {}

func (x *RunnerGetDeploymentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerGetDeploymentConfigRequest.ProtoReflect.Descriptor instead.
func (*RunnerGetDeploymentConfigRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{53}
}

type RunnerGetDeploymentConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerAddr          string `protobuf:"bytes,1,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	ServerTls           bool   `protobuf:"varint,2,opt,name=server_tls,json=serverTls,proto3" json:"server_tls,omitempty"`
	ServerTlsSkipVerify bool   `protobuf:"varint,3,opt,name=server_tls_skip_verify,json=serverTlsSkipVerify,proto3" json:"server_tls_skip_verify,omitempty"`
}

func (x *RunnerGetDeploymentConfigResponse) Reset() {
	*x = RunnerGetDeploymentConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerGetDeploymentConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerGetDeploymentConfigResponse) ProtoMessage() {}

func (x *RunnerGetDeploymentConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerGetDeploymentConfigResponse.ProtoReflect.Descriptor instead.
func (*RunnerGetDeploymentConfigResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{54}
}

func (x *RunnerGetDeploymentConfigResponse) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *RunnerGetDeploymentConfigResponse) GetServerTls() bool {
	if x != nil {
		return x.ServerTls
	}
	return false
}

func (x *RunnerGetDeploymentConfigResponse) GetServerTlsSkipVerify() bool {
	if x != nil {
		return x.ServerTlsSkipVerify
	}
	return false
}

type GetRunnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the runner to request.
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *GetRunnerRequest) Reset() {
	*x = GetRunnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerRequest) ProtoMessage() {}

func (x *GetRunnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerRequest.ProtoReflect.Descriptor instead.
func (*GetRunnerRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{55}
}

func (x *GetRunnerRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type SetServerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *ServerConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SetServerConfigRequest) Reset() {
	*x = SetServerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServerConfigRequest) ProtoMessage() {}

func (x *SetServerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServerConfigRequest.ProtoReflect.Descriptor instead.
func (*SetServerConfigRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{56}
}

func (x *SetServerConfigRequest) GetConfig() *ServerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetServerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *ServerConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetServerConfigResponse) Reset() {
	*x = GetServerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerConfigResponse) ProtoMessage() {}

func (x *GetServerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerConfigResponse.ProtoReflect.Descriptor instead.
func (*GetServerConfigResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{57}
}

func (x *GetServerConfigResponse) GetConfig() *ServerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// ServerConfig is the configuration for the server that can be read and
// set online. This differs from the configuration used to start the server
// since some settings can only be set via the file vs. the API.
type ServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The addresses that are advertised for entrypoints. These define how
	// applications reach back to the server. Currently you may only set
	// EXACTLY ONE address. In the future, we'll support multiple advertise
	// addrs and more controls over which are advertised when.
	AdvertiseAddrs []*ServerConfig_AdvertiseAddr `protobuf:"bytes,1,rep,name=advertise_addrs,json=advertiseAddrs,proto3" json:"advertise_addrs,omitempty"`
	// The platform that the server is currently installed to. This is set
	// through the CLI flag '-platform' on installation.
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *ServerConfig) Reset() {
	*x = ServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfig) ProtoMessage() {}

func (x *ServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfig.ProtoReflect.Descriptor instead.
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{58}
}

func (x *ServerConfig) GetAdvertiseAddrs() []*ServerConfig_AdvertiseAddr {
	if x != nil {
		return x.AdvertiseAddrs
	}
	return nil
}

func (x *ServerConfig) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type CreateHostnameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hostname to register. This may be empty to autogenerate a hostname.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// target determines where the hostname routes to.
	Target *Hostname_Target `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *CreateHostnameRequest) Reset() {
	*x = CreateHostnameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostnameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostnameRequest) ProtoMessage() {}

func (x *CreateHostnameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostnameRequest.ProtoReflect.Descriptor instead.
func (*CreateHostnameRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{59}
}

func (x *CreateHostnameRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CreateHostnameRequest) GetTarget() *Hostname_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type CreateHostnameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created hostname
	Hostname *Hostname `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *CreateHostnameResponse) Reset() {
	*x = CreateHostnameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostnameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostnameResponse) ProtoMessage() {}

func (x *CreateHostnameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostnameResponse.ProtoReflect.Descriptor instead.
func (*CreateHostnameResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{60}
}

func (x *CreateHostnameResponse) GetHostname() *Hostname {
	if x != nil {
		return x.Hostname
	}
	return nil
}

type ListHostnamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target if set will only return hostnames matching this target.
	// If unset, all hostnames registered for the account will be returned.
	Target *Hostname_Target `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *ListHostnamesRequest) Reset() {
	*x = ListHostnamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostnamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostnamesRequest) ProtoMessage() {}

func (x *ListHostnamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostnamesRequest.ProtoReflect.Descriptor instead.
func (*ListHostnamesRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{61}
}

func (x *ListHostnamesRequest) GetTarget() *Hostname_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type ListHostnamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostnames []*Hostname `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
}

func (x *ListHostnamesResponse) Reset() {
	*x = ListHostnamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostnamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostnamesResponse) ProtoMessage() {}

func (x *ListHostnamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostnamesResponse.ProtoReflect.Descriptor instead.
func (*ListHostnamesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{62}
}

func (x *ListHostnamesResponse) GetHostnames() []*Hostname {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

type DeleteHostnameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *DeleteHostnameRequest) Reset() {
	*x = DeleteHostnameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHostnameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostnameRequest) ProtoMessage() {}

func (x *DeleteHostnameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostnameRequest.ProtoReflect.Descriptor instead.
func (*DeleteHostnameRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{63}
}

func (x *DeleteHostnameRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type Hostname struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hostname alone, such as "fabulous-panda"
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// fqdn is the fully qualified domain, such as "fabulous-panda.waypoint.run"
	Fqdn string `protobuf:"bytes,2,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// target_labels are the raw label targets given to the URL service.
	// We can't reproduce the richer "Target" structure yet but in the future
	// we may expose that.
	TargetLabels map[string]string `protobuf:"bytes,3,rep,name=target_labels,json=targetLabels,proto3" json:"target_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Hostname) Reset() {
	*x = Hostname{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hostname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hostname) ProtoMessage() {}

func (x *Hostname) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hostname.ProtoReflect.Descriptor instead.
func (*Hostname) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{64}
}

func (x *Hostname) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Hostname) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *Hostname) GetTargetLabels() map[string]string {
	if x != nil {
		return x.TargetLabels
	}
	return nil
}

type ListWorkspacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope of the workspaces to list. If this isn't set, it defaults to
	// "global" for backwards compatibility reasons. Note for that non-global
	// scopes, the workspaces returned may still contain other
	// projects/applications; the scopes guarantee that the workspaces
	// include the project/app/etc. in that scope, however.
	//
	// Types that are assignable to Scope:
	//	*ListWorkspacesRequest_Global
	//	*ListWorkspacesRequest_Project
	//	*ListWorkspacesRequest_Application
	Scope isListWorkspacesRequest_Scope `protobuf_oneof:"scope"`
}

func (x *ListWorkspacesRequest) Reset() {
	*x = ListWorkspacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkspacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkspacesRequest) ProtoMessage() {}

func (x *ListWorkspacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkspacesRequest.ProtoReflect.Descriptor instead.
func (*ListWorkspacesRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{65}
}

func (m *ListWorkspacesRequest) GetScope() isListWorkspacesRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ListWorkspacesRequest) GetGlobal() *emptypb.Empty {
	if x, ok := x.GetScope().(*ListWorkspacesRequest_Global); ok {
		return x.Global
	}
	return nil
}

func (x *ListWorkspacesRequest) GetProject() *Ref_Project {
	if x, ok := x.GetScope().(*ListWorkspacesRequest_Project); ok {
		return x.Project
	}
	return nil
}

func (x *ListWorkspacesRequest) GetApplication() *Ref_Application {
	if x, ok := x.GetScope().(*ListWorkspacesRequest_Application); ok {
		return x.Application
	}
	return nil
}

type isListWorkspacesRequest_Scope interface {
	isListWorkspacesRequest_Scope()
}

type ListWorkspacesRequest_Global struct {
	// global lists all the workspaces used throughout the entire server.
	Global *emptypb.Empty `protobuf:"bytes,1,opt,name=global,proto3,oneof"`
}

type ListWorkspacesRequest_Project struct {
	// project lists all the workspaces in use by any applications in
	// a single project. A workspace returned here is used by 1 or more
	// applications in the project.
	Project *Ref_Project `protobuf:"bytes,2,opt,name=project,proto3,oneof"`
}

type ListWorkspacesRequest_Application struct {
	// application lists all the workspaces in use by a specific application
	// in a project.
	Application *Ref_Application `protobuf:"bytes,3,opt,name=application,proto3,oneof"`
}

func (*ListWorkspacesRequest_Global) isListWorkspacesRequest_Scope() {}

func (*ListWorkspacesRequest_Project) isListWorkspacesRequest_Scope() {}

func (*ListWorkspacesRequest_Application) isListWorkspacesRequest_Scope() {}

type ListWorkspacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspaces []*Workspace `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
}

func (x *ListWorkspacesResponse) Reset() {
	*x = ListWorkspacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkspacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkspacesResponse) ProtoMessage() {}

func (x *ListWorkspacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkspacesResponse.ProtoReflect.Descriptor instead.
func (*ListWorkspacesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{66}
}

func (x *ListWorkspacesResponse) GetWorkspaces() []*Workspace {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

type GetWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace *Ref_Workspace `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *GetWorkspaceRequest) Reset() {
	*x = GetWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceRequest) ProtoMessage() {}

func (x *GetWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{67}
}

func (x *GetWorkspaceRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type GetWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace *Workspace `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *GetWorkspaceResponse) Reset() {
	*x = GetWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceResponse) ProtoMessage() {}

func (x *GetWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{68}
}

func (x *GetWorkspaceResponse) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type UpsertProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project to upsert. See the message for what fields to set.
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *UpsertProjectRequest) Reset() {
	*x = UpsertProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProjectRequest) ProtoMessage() {}

func (x *UpsertProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProjectRequest.ProtoReflect.Descriptor instead.
func (*UpsertProjectRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{69}
}

func (x *UpsertProjectRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type UpsertProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *UpsertProjectResponse) Reset() {
	*x = UpsertProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertProjectResponse) ProtoMessage() {}

func (x *UpsertProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertProjectResponse.ProtoReflect.Descriptor instead.
func (*UpsertProjectResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{70}
}

func (x *UpsertProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *Ref_Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{71}
}

func (x *GetProjectRequest) GetProject() *Ref_Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type GetProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The list of workspaces that this project is part of.
	Workspaces []*Workspace_Project `protobuf:"bytes,2,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{72}
}

func (x *GetProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *GetProjectResponse) GetWorkspaces() []*Workspace_Project {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

type ListProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []*Ref_Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{73}
}

func (x *ListProjectsResponse) GetProjects() []*Ref_Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type UpsertApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project to register the app against
	Project *Ref_Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// name of the application to register
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// a signal to send the application when config files change
	FileChangeSignal string `protobuf:"bytes,3,opt,name=file_change_signal,json=fileChangeSignal,proto3" json:"file_change_signal,omitempty"`
}

func (x *UpsertApplicationRequest) Reset() {
	*x = UpsertApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertApplicationRequest) ProtoMessage() {}

func (x *UpsertApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertApplicationRequest.ProtoReflect.Descriptor instead.
func (*UpsertApplicationRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{74}
}

func (x *UpsertApplicationRequest) GetProject() *Ref_Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *UpsertApplicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertApplicationRequest) GetFileChangeSignal() string {
	if x != nil {
		return x.FileChangeSignal
	}
	return ""
}

type UpsertApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application *Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
}

func (x *UpsertApplicationResponse) Reset() {
	*x = UpsertApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertApplicationResponse) ProtoMessage() {}

func (x *UpsertApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertApplicationResponse.ProtoReflect.Descriptor instead.
func (*UpsertApplicationResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{75}
}

func (x *UpsertApplicationResponse) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

type UpsertBuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Build to upsert. If an ID is not set, this will be an insert operation.
	// If the ID is set, that build is updated. It is an error if an update
	// is requested on a non-existent build.
	Build *Build `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
}

func (x *UpsertBuildRequest) Reset() {
	*x = UpsertBuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertBuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertBuildRequest) ProtoMessage() {}

func (x *UpsertBuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertBuildRequest.ProtoReflect.Descriptor instead.
func (*UpsertBuildRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{76}
}

func (x *UpsertBuildRequest) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

type UpsertBuildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Build *Build `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
}

func (x *UpsertBuildResponse) Reset() {
	*x = UpsertBuildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertBuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertBuildResponse) ProtoMessage() {}

func (x *UpsertBuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertBuildResponse.ProtoReflect.Descriptor instead.
func (*UpsertBuildResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{77}
}

func (x *UpsertBuildResponse) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

type ListBuildsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The application whose builds to list. This must be set.
	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// The workspace to list builds for. If this isn't set, then all builds
	// for the other filters are listed.
	Workspace *Ref_Workspace `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Specifies the order of results. If this isn't specified, the results
	// are in an undefined order.
	Order *OperationOrder `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ListBuildsRequest) Reset() {
	*x = ListBuildsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildsRequest) ProtoMessage() {}

func (x *ListBuildsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildsRequest.ProtoReflect.Descriptor instead.
func (*ListBuildsRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{78}
}

func (x *ListBuildsRequest) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *ListBuildsRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *ListBuildsRequest) GetOrder() *OperationOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

type ListBuildsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// builds is the list of builds.
	Builds []*Build `protobuf:"bytes,1,rep,name=builds,proto3" json:"builds,omitempty"`
}

func (x *ListBuildsResponse) Reset() {
	*x = ListBuildsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildsResponse) ProtoMessage() {}

func (x *ListBuildsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildsResponse.ProtoReflect.Descriptor instead.
func (*ListBuildsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{79}
}

func (x *ListBuildsResponse) GetBuilds() []*Build {
	if x != nil {
		return x.Builds
	}
	return nil
}

type GetLatestBuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Workspace   *Ref_Workspace   `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *GetLatestBuildRequest) Reset() {
	*x = GetLatestBuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestBuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestBuildRequest) ProtoMessage() {}

func (x *GetLatestBuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestBuildRequest.ProtoReflect.Descriptor instead.
func (*GetLatestBuildRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{80}
}

func (x *GetLatestBuildRequest) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *GetLatestBuildRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type GetBuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *Ref_Operation `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetBuildRequest) Reset() {
	*x = GetBuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildRequest) ProtoMessage() {}

func (x *GetBuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildRequest.ProtoReflect.Descriptor instead.
func (*GetBuildRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{81}
}

func (x *GetBuildRequest) GetRef() *Ref_Operation {
	if x != nil {
		return x.Ref
	}
	return nil
}

// Build represents a process of creating an artifact that can be in any state,
// such as complete. A successful complete build produces an artifact.
type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The application that this build is part of.
	Application *Ref_Application `protobuf:"bytes,6,opt,name=application,proto3" json:"application,omitempty"`
	// The workspace that this exists in
	Workspace *Ref_Workspace `protobuf:"bytes,7,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The sequence number for this build.
	Sequence uint64 `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// id is the unique ID of the build
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// status of the build
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// component is the component that was used for this build
	Component *Component `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	// artifact is the result of the build if the status.state == SUCCESS
	Artifact *Artifact `protobuf:"bytes,4,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// labels are the set of labels that are present on this build.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// template data for HCL variables and template functions, json-encoded
	TemplateData []byte `protobuf:"bytes,10,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
	// ID of the job that created this build. This may be empty.
	JobId string `protobuf:"bytes,9,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Preload is information that is available via further queries but it
	// sometimes pre-populated in the initial load (see the field docs for more
	// info).
	Preload *Build_Preload `protobuf:"bytes,11,opt,name=preload,proto3" json:"preload,omitempty"`
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{82}
}

func (x *Build) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Build) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *Build) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Build) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Build) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Build) GetComponent() *Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *Build) GetArtifact() *Artifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *Build) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Build) GetTemplateData() []byte {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

func (x *Build) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Build) GetPreload() *Build_Preload {
	if x != nil {
		return x.Preload
	}
	return nil
}

// Artifact is the result of a build or registry. This is the metadata only.
// The binary contents of an artifact are expected to be stored in a registry.
type Artifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// artifact is the full artifact encoded directly from the component plugin.
	// The receiving end must have access to the component proto files to
	// know how to decode this.
	Artifact *anypb.Any `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{83}
}

func (x *Artifact) GetArtifact() *anypb.Any {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type UpsertPushedArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// artifact to upsert. If the id in the artifact is empty, then this
	// will be an insert. Otherwise, this will be an update and if the ID
	// isn't found, it will be an error.
	Artifact *PushedArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *UpsertPushedArtifactRequest) Reset() {
	*x = UpsertPushedArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertPushedArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPushedArtifactRequest) ProtoMessage() {}

func (x *UpsertPushedArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPushedArtifactRequest.ProtoReflect.Descriptor instead.
func (*UpsertPushedArtifactRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{84}
}

func (x *UpsertPushedArtifactRequest) GetArtifact() *PushedArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type UpsertPushedArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resulting push object, you should replace this with what was sent
	// since the update operation may touch up the input data (i.e. update
	// timestamps)
	Artifact *PushedArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *UpsertPushedArtifactResponse) Reset() {
	*x = UpsertPushedArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertPushedArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPushedArtifactResponse) ProtoMessage() {}

func (x *UpsertPushedArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPushedArtifactResponse.ProtoReflect.Descriptor instead.
func (*UpsertPushedArtifactResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{85}
}

func (x *UpsertPushedArtifactResponse) GetArtifact() *PushedArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type GetLatestPushedArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application that this belongs to
	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// workspace for the artifact, any workspace if empty
	Workspace *Ref_Workspace `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *GetLatestPushedArtifactRequest) Reset() {
	*x = GetLatestPushedArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestPushedArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestPushedArtifactRequest) ProtoMessage() {}

func (x *GetLatestPushedArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestPushedArtifactRequest.ProtoReflect.Descriptor instead.
func (*GetLatestPushedArtifactRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{86}
}

func (x *GetLatestPushedArtifactRequest) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *GetLatestPushedArtifactRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type GetPushedArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *Ref_Operation `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetPushedArtifactRequest) Reset() {
	*x = GetPushedArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPushedArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPushedArtifactRequest) ProtoMessage() {}

func (x *GetPushedArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPushedArtifactRequest.ProtoReflect.Descriptor instead.
func (*GetPushedArtifactRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{87}
}

func (x *GetPushedArtifactRequest) GetRef() *Ref_Operation {
	if x != nil {
		return x.Ref
	}
	return nil
}

type ListPushedArtifactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application that this belongs to
	Application *Ref_Application `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	// workspace for the results, or all if not set
	Workspace *Ref_Workspace `protobuf:"bytes,4,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The filters to apply to this request. These are ORed, so you should
	// specify multiple filters in the StatusFilter for AND behavior.
	Status []*StatusFilter `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	// Specifies the order of results. If this isn't specified, the results
	// are in an undefined order.
	Order *OperationOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// Indicate if the Build value should be returned for each
	// of the artifacts as well.
	IncludeBuild bool `protobuf:"varint,5,opt,name=include_build,json=includeBuild,proto3" json:"include_build,omitempty"`
}

func (x *ListPushedArtifactsRequest) Reset() {
	*x = ListPushedArtifactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPushedArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPushedArtifactsRequest) ProtoMessage() {}

func (x *ListPushedArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPushedArtifactsRequest.ProtoReflect.Descriptor instead.
func (*ListPushedArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{88}
}

func (x *ListPushedArtifactsRequest) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *ListPushedArtifactsRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *ListPushedArtifactsRequest) GetStatus() []*StatusFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListPushedArtifactsRequest) GetOrder() *OperationOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ListPushedArtifactsRequest) GetIncludeBuild() bool {
	if x != nil {
		return x.IncludeBuild
	}
	return false
}

type ListPushedArtifactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// artifacts is the list of artifacts.
	Artifacts []*PushedArtifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *ListPushedArtifactsResponse) Reset() {
	*x = ListPushedArtifactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPushedArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPushedArtifactsResponse) ProtoMessage() {}

func (x *ListPushedArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPushedArtifactsResponse.ProtoReflect.Descriptor instead.
func (*ListPushedArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{89}
}

func (x *ListPushedArtifactsResponse) GetArtifacts() []*PushedArtifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type PushedArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application that this belongs to
	Application *Ref_Application `protobuf:"bytes,7,opt,name=application,proto3" json:"application,omitempty"`
	// The workspace that this exists in
	Workspace *Ref_Workspace `protobuf:"bytes,8,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The sequence number for this build.
	Sequence uint64 `protobuf:"varint,9,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// id is a unique ID for this push
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// status of the push operation
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// component that pushed this artifact
	Component *Component `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	// artifact is the artifact that was a result from the push.
	Artifact *Artifact `protobuf:"bytes,4,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// the id of the build that this pushed artifact was sourced from.
	BuildId string `protobuf:"bytes,5,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// labels are the set of labels that are present on this build.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// template data for HCL variables and template functions, json-encoded
	TemplateData []byte `protobuf:"bytes,12,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
	// If include_build was set on the list request, this will include
	// the Build value associated with the given build_id.
	Build *Build `protobuf:"bytes,10,opt,name=build,proto3" json:"build,omitempty"`
	// ID of the job that created this. This may be empty.
	JobId string `protobuf:"bytes,11,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Preload is information that is available via further queries but it
	// sometimes pre-populated in the initial load (see the field docs for more
	// info).
	Preload *PushedArtifact_Preload `protobuf:"bytes,13,opt,name=preload,proto3" json:"preload,omitempty"`
}

func (x *PushedArtifact) Reset() {
	*x = PushedArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushedArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushedArtifact) ProtoMessage() {}

func (x *PushedArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushedArtifact.ProtoReflect.Descriptor instead.
func (*PushedArtifact) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{90}
}

func (x *PushedArtifact) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *PushedArtifact) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *PushedArtifact) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PushedArtifact) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PushedArtifact) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PushedArtifact) GetComponent() *Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *PushedArtifact) GetArtifact() *Artifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *PushedArtifact) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *PushedArtifact) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PushedArtifact) GetTemplateData() []byte {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

func (x *PushedArtifact) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *PushedArtifact) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *PushedArtifact) GetPreload() *PushedArtifact_Preload {
	if x != nil {
		return x.Preload
	}
	return nil
}

type GetDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *Ref_Operation `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Indicate if the fetched deployments should include additional information
	// about each deployment.
	LoadDetails Deployment_LoadDetails `protobuf:"varint,2,opt,name=load_details,json=loadDetails,proto3,enum=hashicorp.waypoint.Deployment_LoadDetails" json:"load_details,omitempty"`
}

func (x *GetDeploymentRequest) Reset() {
	*x = GetDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentRequest) ProtoMessage() {}

func (x *GetDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{91}
}

func (x *GetDeploymentRequest) GetRef() *Ref_Operation {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *GetDeploymentRequest) GetLoadDetails() Deployment_LoadDetails {
	if x != nil {
		return x.LoadDetails
	}
	return Deployment_NONE
}

type UpsertDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deployment to upsert. If the id in the artifact is empty, then this
	// will be an insert. Otherwise, this will be an update and if the ID
	// isn't found, it will be an error.
	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// auto_hostname will automatically create a hostname for this app if
	// one doesn't already exist. This hostname maps to the entire app/workspace
	// combo, not specifically to this deployment.
	//
	// This is a "tri-state" boolean because if this is unset then we use
	// the configured defaults for the server configuration.
	AutoHostname UpsertDeploymentRequest_Tristate `protobuf:"varint,2,opt,name=auto_hostname,json=autoHostname,proto3,enum=hashicorp.waypoint.UpsertDeploymentRequest_Tristate" json:"auto_hostname,omitempty"`
}

func (x *UpsertDeploymentRequest) Reset() {
	*x = UpsertDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDeploymentRequest) ProtoMessage() {}

func (x *UpsertDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDeploymentRequest.ProtoReflect.Descriptor instead.
func (*UpsertDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{92}
}

func (x *UpsertDeploymentRequest) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *UpsertDeploymentRequest) GetAutoHostname() UpsertDeploymentRequest_Tristate {
	if x != nil {
		return x.AutoHostname
	}
	return UpsertDeploymentRequest_UNSET
}

type UpsertDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resulting object, you should replace this with what was sent in the request
	// since the update operation may touch up the input data (i.e. update
	// timestamps)
	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *UpsertDeploymentResponse) Reset() {
	*x = UpsertDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDeploymentResponse) ProtoMessage() {}

func (x *UpsertDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDeploymentResponse.ProtoReflect.Descriptor instead.
func (*UpsertDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{93}
}

func (x *UpsertDeploymentResponse) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type ListDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application that this deployment belongs to
	Application *Ref_Application `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	// workspace that this should belong to. If this is empty, values in
	// all workspaces will be listed.
	Workspace *Ref_Workspace `protobuf:"bytes,4,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The filters to apply to this request. These are ORed, so you should
	// specify multiple filters in the StatusFilter for AND behavior.
	Status []*StatusFilter `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	// The physical state to filter for. If this is zero or unset then no
	// filtering on physical state will be done.
	PhysicalState Operation_PhysicalState `protobuf:"varint,5,opt,name=physical_state,json=physicalState,proto3,enum=hashicorp.waypoint.Operation_PhysicalState" json:"physical_state,omitempty"`
	// Specifies the order of results. If this isn't specified, the results
	// are in an undefined order.
	Order *OperationOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// Inidicate of the fetched deployments should include additional information
	// about each deployment.
	LoadDetails Deployment_LoadDetails `protobuf:"varint,6,opt,name=load_details,json=loadDetails,proto3,enum=hashicorp.waypoint.Deployment_LoadDetails" json:"load_details,omitempty"`
}

func (x *ListDeploymentsRequest) Reset() {
	*x = ListDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsRequest) ProtoMessage() {}

func (x *ListDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{94}
}

func (x *ListDeploymentsRequest) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *ListDeploymentsRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *ListDeploymentsRequest) GetStatus() []*StatusFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListDeploymentsRequest) GetPhysicalState() Operation_PhysicalState {
	if x != nil {
		return x.PhysicalState
	}
	return Operation_UNKNOWN
}

func (x *ListDeploymentsRequest) GetOrder() *OperationOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ListDeploymentsRequest) GetLoadDetails() Deployment_LoadDetails {
	if x != nil {
		return x.LoadDetails
	}
	return Deployment_NONE
}

type ListDeploymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deployments is the list of deployments.
	Deployments []*Deployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
}

func (x *ListDeploymentsResponse) Reset() {
	*x = ListDeploymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsResponse) ProtoMessage() {}

func (x *ListDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*ListDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{95}
}

func (x *ListDeploymentsResponse) GetDeployments() []*Deployment {
	if x != nil {
		return x.Deployments
	}
	return nil
}

type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application that this deployment belongs to
	Application *Ref_Application `protobuf:"bytes,8,opt,name=application,proto3" json:"application,omitempty"`
	// The workspace that this exists in
	Workspace *Ref_Workspace `protobuf:"bytes,9,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The sequence number for this build.
	Sequence uint64 `protobuf:"varint,10,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// id is the unique ID for this deployment
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// url is the URL to the Deployment
	// this URL might be empty, indicating that the deployment doesn't have
	// the possibility to be contacted directly (e.g: Kubernetes pod)
	// and thus the URL Service (Hashicorp Horizon) will be used instead, if enabled.
	Url string `protobuf:"bytes,18,opt,name=url,proto3" json:"url,omitempty"`
	// See the docs for Generation.
	Generation *Generation `protobuf:"bytes,17,opt,name=generation,proto3" json:"generation,omitempty"`
	// state is the state of this deployment.
	State Operation_PhysicalState `protobuf:"varint,2,opt,name=state,proto3,enum=hashicorp.waypoint.Operation_PhysicalState" json:"state,omitempty"`
	// status tracks the status of the most recent operation (creation,
	// destroy, etc. NOTE(mitchellh): I want to separate these out so that
	// you can keep history of the status of multiple operations.
	Status *Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// component that initiated this deployment
	Component *Component `protobuf:"bytes,4,opt,name=component,proto3" json:"component,omitempty"`
	// ID of the PushedArtifact that was deployed.
	ArtifactId string `protobuf:"bytes,5,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// deployment is the full raw deployment object encoded directly from
	// the plugin. The client must have all the plugins setup to properly
	// decode this.
	Deployment *anypb.Any `protobuf:"bytes,6,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// labels are the set of labels that are present on this build.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// template data for HCL variables and template functions, json-encoded
	TemplateData []byte `protobuf:"bytes,14,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
	// ID of the job that created this. This may be empty.
	JobId string `protobuf:"bytes,12,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// True if this deployment had the environment variables available
	// for the entrypoint to talk to. If this is false, this deployment
	// should not be able to communicate back to the server even if it
	// has the entrypoint available. This means this deployment will not
	// support logs, exec, etc.
	HasEntrypointConfig bool `protobuf:"varint,13,opt,name=has_entrypoint_config,json=hasEntrypointConfig,proto3" json:"has_entrypoint_config,omitempty"`
	// True if the deployment was done by a plugin that defined an exec plugin
	HasExecPlugin bool `protobuf:"varint,15,opt,name=has_exec_plugin,json=hasExecPlugin,proto3" json:"has_exec_plugin,omitempty"`
	// True if the deployment was done by a plugin that defined an logs plugin
	HasLogsPlugin bool `protobuf:"varint,16,opt,name=has_logs_plugin,json=hasLogsPlugin,proto3" json:"has_logs_plugin,omitempty"`
	// Resources that this deployment has created or manages.
	DeclaredResources []*DeclaredResource `protobuf:"bytes,19,rep,name=declared_resources,json=declaredResources,proto3" json:"declared_resources,omitempty"`
	// This is the populated preload data. Most of this data can be retrieved
	// through additional API calls or manually computed, but certain API
	// calls will pre-populate some of these fields for convenience. The exact
	// pre-populated fields depend on the API.
	Preload *Deployment_Preload `protobuf:"bytes,11,opt,name=preload,proto3" json:"preload,omitempty"`
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{96}
}

func (x *Deployment) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Deployment) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *Deployment) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Deployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deployment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Deployment) GetGeneration() *Generation {
	if x != nil {
		return x.Generation
	}
	return nil
}

func (x *Deployment) GetState() Operation_PhysicalState {
	if x != nil {
		return x.State
	}
	return Operation_UNKNOWN
}

func (x *Deployment) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Deployment) GetComponent() *Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *Deployment) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *Deployment) GetDeployment() *anypb.Any {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Deployment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Deployment) GetTemplateData() []byte {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

func (x *Deployment) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Deployment) GetHasEntrypointConfig() bool {
	if x != nil {
		return x.HasEntrypointConfig
	}
	return false
}

func (x *Deployment) GetHasExecPlugin() bool {
	if x != nil {
		return x.HasExecPlugin
	}
	return false
}

func (x *Deployment) GetHasLogsPlugin() bool {
	if x != nil {
		return x.HasLogsPlugin
	}
	return false
}

func (x *Deployment) GetDeclaredResources() []*DeclaredResource {
	if x != nil {
		return x.DeclaredResources
	}
	return nil
}

func (x *Deployment) GetPreload() *Deployment_Preload {
	if x != nil {
		return x.Preload
	}
	return nil
}

// A deployment with additional related messages pre-fetched.
type DeploymentExpanded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deployment in question
	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// The most recent status report generated for this deployment
	LatestStatusReport *StatusReport `protobuf:"bytes,2,opt,name=latest_status_report,json=latestStatusReport,proto3" json:"latest_status_report,omitempty"`
}

func (x *DeploymentExpanded) Reset() {
	*x = DeploymentExpanded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentExpanded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentExpanded) ProtoMessage() {}

func (x *DeploymentExpanded) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentExpanded.ProtoReflect.Descriptor instead.
func (*DeploymentExpanded) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{97}
}

func (x *DeploymentExpanded) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *DeploymentExpanded) GetLatestStatusReport() *StatusReport {
	if x != nil {
		return x.LatestStatusReport
	}
	return nil
}

type ListInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scope:
	//	*ListInstancesRequest_DeploymentId
	//	*ListInstancesRequest_Application_
	Scope isListInstancesRequest_Scope `protobuf_oneof:"scope"`
	// Time to wait before retrying a request to connect to requested instance
	WaitTimeout string `protobuf:"bytes,3,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
}

func (x *ListInstancesRequest) Reset() {
	*x = ListInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesRequest) ProtoMessage() {}

func (x *ListInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListInstancesRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{98}
}

func (m *ListInstancesRequest) GetScope() isListInstancesRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ListInstancesRequest) GetDeploymentId() string {
	if x, ok := x.GetScope().(*ListInstancesRequest_DeploymentId); ok {
		return x.DeploymentId
	}
	return ""
}

func (x *ListInstancesRequest) GetApplication() *ListInstancesRequest_Application {
	if x, ok := x.GetScope().(*ListInstancesRequest_Application_); ok {
		return x.Application
	}
	return nil
}

func (x *ListInstancesRequest) GetWaitTimeout() string {
	if x != nil {
		return x.WaitTimeout
	}
	return ""
}

type isListInstancesRequest_Scope interface {
	isListInstancesRequest_Scope()
}

type ListInstancesRequest_DeploymentId struct {
	// List instances for a specific deployment.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3,oneof"`
}

type ListInstancesRequest_Application_ struct {
	// Find all instances for an application
	Application *ListInstancesRequest_Application `protobuf:"bytes,2,opt,name=application,proto3,oneof"`
}

func (*ListInstancesRequest_DeploymentId) isListInstancesRequest_Scope() {}

func (*ListInstancesRequest_Application_) isListInstancesRequest_Scope() {}

type ListInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ListInstancesResponse) Reset() {
	*x = ListInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse) ProtoMessage() {}

func (x *ListInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{99}
}

func (x *ListInstancesResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

// An instance is a single running process for a deployment. A deployment
// may have many instances (for example Kubernetes ReplicaSets spawn many pods).
// An instance is only represented if you're using the Waypoint Entrypoint.
// Otherwise, the Waypoint server will never be notified of running instances.
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the instance. This should be globally unique to your Waypoint
	// installation but relies on the entrypoint being well behaved.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the deployment that this instance belongs to.
	DeploymentId string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// application that this instance belongs to
	Application *Ref_Application `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	// The workspace that this exists in
	Workspace *Ref_Workspace `protobuf:"bytes,4,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Which type of instance this is
	Type Instance_Type `protobuf:"varint,5,opt,name=type,proto3,enum=hashicorp.waypoint.Instance_Type" json:"type,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{100}
}

func (x *Instance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instance) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *Instance) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Instance) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *Instance) GetType() Instance_Type {
	if x != nil {
		return x.Type
	}
	return Instance_LONG_RUNNING
}

type UpsertReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// release to upsert. If the id in the artifact is empty, then this
	// will be an insert. Otherwise, this will be an update and if the ID
	// isn't found, it will be an error.
	Release *Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *UpsertReleaseRequest) Reset() {
	*x = UpsertReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertReleaseRequest) ProtoMessage() {}

func (x *UpsertReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertReleaseRequest.ProtoReflect.Descriptor instead.
func (*UpsertReleaseRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{101}
}

func (x *UpsertReleaseRequest) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type UpsertReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resulting object, you should replace this with what was sent in the request
	// since the update operation may touch up the input data (i.e. update
	// timestamps)
	Release *Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *UpsertReleaseResponse) Reset() {
	*x = UpsertReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertReleaseResponse) ProtoMessage() {}

func (x *UpsertReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertReleaseResponse.ProtoReflect.Descriptor instead.
func (*UpsertReleaseResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{102}
}

func (x *UpsertReleaseResponse) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type GetLatestReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application that this belongs to
	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// workspace for the artifact, any workspace if empty
	Workspace *Ref_Workspace `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Load additional details about the release. These will become available
	// in the Preload section.
	LoadDetails Release_LoadDetails `protobuf:"varint,3,opt,name=load_details,json=loadDetails,proto3,enum=hashicorp.waypoint.Release_LoadDetails" json:"load_details,omitempty"`
}

func (x *GetLatestReleaseRequest) Reset() {
	*x = GetLatestReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestReleaseRequest) ProtoMessage() {}

func (x *GetLatestReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestReleaseRequest.ProtoReflect.Descriptor instead.
func (*GetLatestReleaseRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{103}
}

func (x *GetLatestReleaseRequest) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *GetLatestReleaseRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *GetLatestReleaseRequest) GetLoadDetails() Release_LoadDetails {
	if x != nil {
		return x.LoadDetails
	}
	return Release_NONE
}

type ListReleasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application that this release belongs to
	Application *Ref_Application `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	// workspace that this should belong to. If this is empty, values in
	// all workspaces will be listed.
	Workspace *Ref_Workspace `protobuf:"bytes,4,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The filters to apply to this request. These are ORed, so you should
	// specify multiple filters in the StatusFilter for AND behavior.
	Status []*StatusFilter `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	// The physical state to filter for. If this is zero or unset then no
	// filtering on physical state will be done.
	PhysicalState Operation_PhysicalState `protobuf:"varint,5,opt,name=physical_state,json=physicalState,proto3,enum=hashicorp.waypoint.Operation_PhysicalState" json:"physical_state,omitempty"`
	// Specifies the order of results. If this isn't specified, the results
	// are in an undefined order.
	Order *OperationOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// Load additional details about the release. These will become available
	// in the Preload section.
	LoadDetails Release_LoadDetails `protobuf:"varint,6,opt,name=load_details,json=loadDetails,proto3,enum=hashicorp.waypoint.Release_LoadDetails" json:"load_details,omitempty"`
}

func (x *ListReleasesRequest) Reset() {
	*x = ListReleasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleasesRequest) ProtoMessage() {}

func (x *ListReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleasesRequest.ProtoReflect.Descriptor instead.
func (*ListReleasesRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{104}
}

func (x *ListReleasesRequest) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *ListReleasesRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *ListReleasesRequest) GetStatus() []*StatusFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListReleasesRequest) GetPhysicalState() Operation_PhysicalState {
	if x != nil {
		return x.PhysicalState
	}
	return Operation_UNKNOWN
}

func (x *ListReleasesRequest) GetOrder() *OperationOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ListReleasesRequest) GetLoadDetails() Release_LoadDetails {
	if x != nil {
		return x.LoadDetails
	}
	return Release_NONE
}

type ListReleasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Releases []*Release `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
}

func (x *ListReleasesResponse) Reset() {
	*x = ListReleasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReleasesResponse) ProtoMessage() {}

func (x *ListReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReleasesResponse.ProtoReflect.Descriptor instead.
func (*ListReleasesResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{105}
}

func (x *ListReleasesResponse) GetReleases() []*Release {
	if x != nil {
		return x.Releases
	}
	return nil
}

type GetReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *Ref_Operation `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Load additional details about the release. These will become available
	// in the Preload section.
	LoadDetails Release_LoadDetails `protobuf:"varint,2,opt,name=load_details,json=loadDetails,proto3,enum=hashicorp.waypoint.Release_LoadDetails" json:"load_details,omitempty"`
}

func (x *GetReleaseRequest) Reset() {
	*x = GetReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReleaseRequest) ProtoMessage() {}

func (x *GetReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReleaseRequest.ProtoReflect.Descriptor instead.
func (*GetReleaseRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{106}
}

func (x *GetReleaseRequest) GetRef() *Ref_Operation {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *GetReleaseRequest) GetLoadDetails() Release_LoadDetails {
	if x != nil {
		return x.LoadDetails
	}
	return Release_NONE
}

type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application that this release belongs to
	Application *Ref_Application `protobuf:"bytes,7,opt,name=application,proto3" json:"application,omitempty"`
	// The workspace that this exists in
	Workspace *Ref_Workspace `protobuf:"bytes,8,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The sequence number for this build.
	Sequence uint64 `protobuf:"varint,10,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// id is the unique ID for this release.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// status of the release operation.
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// The physical state of the release resources.
	State Operation_PhysicalState `protobuf:"varint,11,opt,name=state,proto3,enum=hashicorp.waypoint.Operation_PhysicalState" json:"state,omitempty"`
	// component managing the release process.
	Component *Component `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	// release is the raw release object encoded directly from the plugin.
	Release *anypb.Any `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	// ID of the deployment that is being released.
	DeploymentId string `protobuf:"bytes,5,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// labels are the set of labels that are present on this build.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// template data for HCL variables and template functions, json-encoded
	TemplateData []byte `protobuf:"bytes,14,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
	// URL for this release. This is valid while the release is still
	// in use. After the release is not in use, this may still be set but
	// may no longer be valid.
	Url string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// ID of the job that created this. This may be empty.
	JobId string `protobuf:"bytes,13,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// A boolean to mark this release message as unimplemented by the plugin
	// that generated the message. If true, that means there was not a releaser
	// to execute for the release lifecycle phase.
	Unimplemented bool `protobuf:"varint,15,opt,name=unimplemented,proto3" json:"unimplemented,omitempty"`
	// A platform resource that this release has created, depends on, or manages.
	DeclaredResources []*DeclaredResource `protobuf:"bytes,19,rep,name=declared_resources,json=declaredResources,proto3" json:"declared_resources,omitempty"`
	// This is the populated preload data. Most of this data can be retrieved
	// through additional API calls or manually computed, but certain API
	// calls will pre-populate some of these fields for convenience. The exact
	// pre-populated fields depend on the API.
	Preload *Release_Preload `protobuf:"bytes,12,opt,name=preload,proto3" json:"preload,omitempty"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{107}
}

func (x *Release) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Release) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *Release) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Release) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Release) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Release) GetState() Operation_PhysicalState {
	if x != nil {
		return x.State
	}
	return Operation_UNKNOWN
}

func (x *Release) GetComponent() *Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *Release) GetRelease() *anypb.Any {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *Release) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *Release) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Release) GetTemplateData() []byte {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

func (x *Release) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Release) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Release) GetUnimplemented() bool {
	if x != nil {
		return x.Unimplemented
	}
	return false
}

func (x *Release) GetDeclaredResources() []*DeclaredResource {
	if x != nil {
		return x.DeclaredResources
	}
	return nil
}

func (x *Release) GetPreload() *Release_Preload {
	if x != nil {
		return x.Preload
	}
	return nil
}

// A release with additional related messages pre-fetched.
type ReleaseExpanded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The release in question
	Release *Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	// The most recent status report generated for this release
	LatestStatusReport *StatusReport `protobuf:"bytes,2,opt,name=latest_status_report,json=latestStatusReport,proto3" json:"latest_status_report,omitempty"`
}

func (x *ReleaseExpanded) Reset() {
	*x = ReleaseExpanded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseExpanded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseExpanded) ProtoMessage() {}

func (x *ReleaseExpanded) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseExpanded.ProtoReflect.Descriptor instead.
func (*ReleaseExpanded) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{108}
}

func (x *ReleaseExpanded) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *ReleaseExpanded) GetLatestStatusReport() *StatusReport {
	if x != nil {
		return x.LatestStatusReport
	}
	return nil
}

type UpsertStatusReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status report to upsert. If the id in the deployment is empty, then this
	// will be an insert. Otherwise, this will be an update and if the ID
	// isn't found, it will be an error.
	StatusReport *StatusReport `protobuf:"bytes,1,opt,name=status_report,json=statusReport,proto3" json:"status_report,omitempty"`
}

func (x *UpsertStatusReportRequest) Reset() {
	*x = UpsertStatusReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStatusReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStatusReportRequest) ProtoMessage() {}

func (x *UpsertStatusReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStatusReportRequest.ProtoReflect.Descriptor instead.
func (*UpsertStatusReportRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{109}
}

func (x *UpsertStatusReportRequest) GetStatusReport() *StatusReport {
	if x != nil {
		return x.StatusReport
	}
	return nil
}

type UpsertStatusReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resulting object, you should replace this with what was sent in the request
	// since the update operation may touch up the input data (i.e. update
	// timestamps)
	StatusReport *StatusReport `protobuf:"bytes,1,opt,name=status_report,json=statusReport,proto3" json:"status_report,omitempty"`
}

func (x *UpsertStatusReportResponse) Reset() {
	*x = UpsertStatusReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStatusReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStatusReportResponse) ProtoMessage() {}

func (x *UpsertStatusReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStatusReportResponse.ProtoReflect.Descriptor instead.
func (*UpsertStatusReportResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{110}
}

func (x *UpsertStatusReportResponse) GetStatusReport() *StatusReport {
	if x != nil {
		return x.StatusReport
	}
	return nil
}

type GetLatestStatusReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// application that this belongs to
	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// workspace for the report, any workspace if empty
	Workspace *Ref_Workspace `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *GetLatestStatusReportRequest) Reset() {
	*x = GetLatestStatusReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestStatusReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestStatusReportRequest) ProtoMessage() {}

func (x *GetLatestStatusReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestStatusReportRequest.ProtoReflect.Descriptor instead.
func (*GetLatestStatusReportRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{111}
}

func (x *GetLatestStatusReportRequest) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *GetLatestStatusReportRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type ListStatusReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The filters to apply to this request. These are ORed, so you should
	// specify multiple filters in the StatusFilter for AND behavior.
	Status []*StatusFilter `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	// Specifies the order of results. If this isn't specified, the results
	// are in an undefined order.
	Order *OperationOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// application that this release belongs to
	Application *Ref_Application `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	// workspace that this should belong to. If this is empty, values in
	// all workspaces will be listed.
	Workspace *Ref_Workspace `protobuf:"bytes,4,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Target is used to determine which status reports to return. By default
	// if no target is requested, the response will include both deployments
	// and release status reports for the requested Application.
	//
	// Types that are assignable to Target:
	//	*ListStatusReportsRequest_Deployment
	//	*ListStatusReportsRequest_Release
	Target isListStatusReportsRequest_Target `protobuf_oneof:"target"`
}

func (x *ListStatusReportsRequest) Reset() {
	*x = ListStatusReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusReportsRequest) ProtoMessage() {}

func (x *ListStatusReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusReportsRequest.ProtoReflect.Descriptor instead.
func (*ListStatusReportsRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{112}
}

func (x *ListStatusReportsRequest) GetStatus() []*StatusFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListStatusReportsRequest) GetOrder() *OperationOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ListStatusReportsRequest) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *ListStatusReportsRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (m *ListStatusReportsRequest) GetTarget() isListStatusReportsRequest_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *ListStatusReportsRequest) GetDeployment() *Ref_Operation {
	if x, ok := x.GetTarget().(*ListStatusReportsRequest_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (x *ListStatusReportsRequest) GetRelease() *Ref_Operation {
	if x, ok := x.GetTarget().(*ListStatusReportsRequest_Release); ok {
		return x.Release
	}
	return nil
}

type isListStatusReportsRequest_Target interface {
	isListStatusReportsRequest_Target()
}

type ListStatusReportsRequest_Deployment struct {
	// the deployment id that this status report was generated on
	Deployment *Ref_Operation `protobuf:"bytes,5,opt,name=deployment,proto3,oneof"`
}

type ListStatusReportsRequest_Release struct {
	// the release id that this status report was generated on
	Release *Ref_Operation `protobuf:"bytes,6,opt,name=release,proto3,oneof"`
}

func (*ListStatusReportsRequest_Deployment) isListStatusReportsRequest_Target() {}

func (*ListStatusReportsRequest_Release) isListStatusReportsRequest_Target() {}

type ListStatusReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusReports []*StatusReport `protobuf:"bytes,1,rep,name=status_reports,json=statusReports,proto3" json:"status_reports,omitempty"`
}

func (x *ListStatusReportsResponse) Reset() {
	*x = ListStatusReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusReportsResponse) ProtoMessage() {}

func (x *ListStatusReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusReportsResponse.ProtoReflect.Descriptor instead.
func (*ListStatusReportsResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{113}
}

func (x *ListStatusReportsResponse) GetStatusReports() []*StatusReport {
	if x != nil {
		return x.StatusReports
	}
	return nil
}

type GetStatusReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *Ref_Operation `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetStatusReportRequest) Reset() {
	*x = GetStatusReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusReportRequest) ProtoMessage() {}

func (x *GetStatusReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusReportRequest.ProtoReflect.Descriptor instead.
func (*GetStatusReportRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{114}
}

func (x *GetStatusReportRequest) GetRef() *Ref_Operation {
	if x != nil {
		return x.Ref
	}
	return nil
}

type ExpediteStatusReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The workspace that this exists in
	Workspace *Ref_Workspace `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Target is used to determine what a status report should be run against
	//
	// Types that are assignable to Target:
	//	*ExpediteStatusReportRequest_Deployment
	//	*ExpediteStatusReportRequest_Release
	Target isExpediteStatusReportRequest_Target `protobuf_oneof:"target"`
}

func (x *ExpediteStatusReportRequest) Reset() {
	*x = ExpediteStatusReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpediteStatusReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpediteStatusReportRequest) ProtoMessage() {}

func (x *ExpediteStatusReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpediteStatusReportRequest.ProtoReflect.Descriptor instead.
func (*ExpediteStatusReportRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{115}
}

func (x *ExpediteStatusReportRequest) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (m *ExpediteStatusReportRequest) GetTarget() isExpediteStatusReportRequest_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *ExpediteStatusReportRequest) GetDeployment() *Ref_Operation {
	if x, ok := x.GetTarget().(*ExpediteStatusReportRequest_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (x *ExpediteStatusReportRequest) GetRelease() *Ref_Operation {
	if x, ok := x.GetTarget().(*ExpediteStatusReportRequest_Release); ok {
		return x.Release
	}
	return nil
}

type isExpediteStatusReportRequest_Target interface {
	isExpediteStatusReportRequest_Target()
}

type ExpediteStatusReportRequest_Deployment struct {
	// the deployment id that this status report was generated on
	Deployment *Ref_Operation `protobuf:"bytes,2,opt,name=deployment,proto3,oneof"`
}

type ExpediteStatusReportRequest_Release struct {
	// the release id that this status report was generated on
	Release *Ref_Operation `protobuf:"bytes,3,opt,name=release,proto3,oneof"`
}

func (*ExpediteStatusReportRequest_Deployment) isExpediteStatusReportRequest_Target() {}

func (*ExpediteStatusReportRequest_Release) isExpediteStatusReportRequest_Target() {}

// id of job expedited by the request
type ExpediteStatusReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *ExpediteStatusReportResponse) Reset() {
	*x = ExpediteStatusReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpediteStatusReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpediteStatusReportResponse) ProtoMessage() {}

func (x *ExpediteStatusReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpediteStatusReportResponse.ProtoReflect.Descriptor instead.
func (*ExpediteStatusReportResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{116}
}

func (x *ExpediteStatusReportResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// StatusReport is the report genrated when querying the overall health of
// a deployed or released application. This report is generated after the
// an Up Operation, DeployOp or ReleaseOp. In the future Waypoint will be able
// to generate these reports on demand in the UI, or on an interval using a poller.
//
// NOTE: This is not related to Status or StatusFilter messages but a message
// used to run the StatusReport job operation for Waypoint Server. The raw SDK
// StatusReport message is stored as an option on this message
type StatusReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The application that this build is part of.
	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// The workspace that this exists in
	Workspace *Ref_Workspace `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// the reference id that is associated with this report
	//
	// Types that are assignable to TargetId:
	//	*StatusReport_DeploymentId
	//	*StatusReport_ReleaseId
	TargetId isStatusReport_TargetId `protobuf_oneof:"target_id"`
	// Status of the StatusReport operation executed by the server.
	// Note that this status is not related to the status report, but the current
	// state of the StatusReport operation
	Status *Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// id is the unique ID for this status report.
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// StatusReport is the raw SDK report object encoded directly from the plugin.
	// This message is a StatusReport proto that exists inside the SDK
	StatusReport *anypb.Any `protobuf:"bytes,7,opt,name=status_report,json=statusReport,proto3" json:"status_report,omitempty"`
	// The overall health of the deployment or release as reported by the plugin.
	// Copied from the plugin generated raw SDK status report for convenient API access.
	Health *StatusReport_Health `protobuf:"bytes,8,opt,name=health,proto3" json:"health,omitempty"`
	// A health report of all of the resources that make up the report.
	// Copied from the plugin generated raw SDK status report for convenient API access.
	ResourcesHealth []*StatusReport_Health `protobuf:"bytes,9,rep,name=resources_health,json=resourcesHealth,proto3" json:"resources_health,omitempty"`
	// the time when this report was generated
	// Copied from the plugin generated raw SDK status report for convenient API access.
	GeneratedTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=generated_time,json=generatedTime,proto3" json:"generated_time,omitempty"`
	// where the health check was performed. External means not executed by Waypoint,
	// but by the platform deployed to.
	External bool `protobuf:"varint,11,opt,name=external,proto3" json:"external,omitempty"`
	// a collection of resources, e.x. platform resources generated and monitored by a deployment.
	Resources []*StatusReport_Resource `protobuf:"bytes,12,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *StatusReport) Reset() {
	*x = StatusReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReport) ProtoMessage() {}

func (x *StatusReport) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReport.ProtoReflect.Descriptor instead.
func (*StatusReport) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{117}
}

func (x *StatusReport) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *StatusReport) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (m *StatusReport) GetTargetId() isStatusReport_TargetId {
	if m != nil {
		return m.TargetId
	}
	return nil
}

func (x *StatusReport) GetDeploymentId() string {
	if x, ok := x.GetTargetId().(*StatusReport_DeploymentId); ok {
		return x.DeploymentId
	}
	return ""
}

func (x *StatusReport) GetReleaseId() string {
	if x, ok := x.GetTargetId().(*StatusReport_ReleaseId); ok {
		return x.ReleaseId
	}
	return ""
}

func (x *StatusReport) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StatusReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusReport) GetStatusReport() *anypb.Any {
	if x != nil {
		return x.StatusReport
	}
	return nil
}

func (x *StatusReport) GetHealth() *StatusReport_Health {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *StatusReport) GetResourcesHealth() []*StatusReport_Health {
	if x != nil {
		return x.ResourcesHealth
	}
	return nil
}

func (x *StatusReport) GetGeneratedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedTime
	}
	return nil
}

func (x *StatusReport) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *StatusReport) GetResources() []*StatusReport_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type isStatusReport_TargetId interface {
	isStatusReport_TargetId()
}

type StatusReport_DeploymentId struct {
	// the deployment id that this status report was generated on
	DeploymentId string `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3,oneof"`
}

type StatusReport_ReleaseId struct {
	// the release id that this status report was generated on
	ReleaseId string `protobuf:"bytes,4,opt,name=release_id,json=releaseId,proto3,oneof"`
}

func (*StatusReport_DeploymentId) isStatusReport_TargetId() {}

func (*StatusReport_ReleaseId) isStatusReport_TargetId() {}

type GetLogStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scope:
	//	*GetLogStreamRequest_DeploymentId
	//	*GetLogStreamRequest_Application_
	Scope isGetLogStreamRequest_Scope `protobuf_oneof:"scope"`
	// limit_backlog sets the maximum backlog lines to return on the initial
	// connection. This setting is per instance, not global. The maximum
	// backlog to expect is `n * limit_backlog` where n is the number of
	// instances.
	//
	// A negative value will not limit the backlog.
	//
	// A value of zero will default to a value of 50.
	LimitBacklog int32 `protobuf:"varint,3,opt,name=limit_backlog,json=limitBacklog,proto3" json:"limit_backlog,omitempty"`
}

func (x *GetLogStreamRequest) Reset() {
	*x = GetLogStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogStreamRequest) ProtoMessage() {}

func (x *GetLogStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogStreamRequest.ProtoReflect.Descriptor instead.
func (*GetLogStreamRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{118}
}

func (m *GetLogStreamRequest) GetScope() isGetLogStreamRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *GetLogStreamRequest) GetDeploymentId() string {
	if x, ok := x.GetScope().(*GetLogStreamRequest_DeploymentId); ok {
		return x.DeploymentId
	}
	return ""
}

func (x *GetLogStreamRequest) GetApplication() *GetLogStreamRequest_Application {
	if x, ok := x.GetScope().(*GetLogStreamRequest_Application_); ok {
		return x.Application
	}
	return nil
}

func (x *GetLogStreamRequest) GetLimitBacklog() int32 {
	if x != nil {
		return x.LimitBacklog
	}
	return 0
}

type isGetLogStreamRequest_Scope interface {
	isGetLogStreamRequest_Scope()
}

type GetLogStreamRequest_DeploymentId struct {
	// Deployment to request logs for.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3,oneof"`
}

type GetLogStreamRequest_Application_ struct {
	// Logs for a specific application in a workspace.
	Application *GetLogStreamRequest_Application `protobuf:"bytes,2,opt,name=application,proto3,oneof"`
}

func (*GetLogStreamRequest_DeploymentId) isGetLogStreamRequest_Scope() {}

func (*GetLogStreamRequest_Application_) isGetLogStreamRequest_Scope() {}

type LogBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string            `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	InstanceId   string            `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Lines        []*LogBatch_Entry `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *LogBatch) Reset() {
	*x = LogBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBatch) ProtoMessage() {}

func (x *LogBatch) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBatch.ProtoReflect.Descriptor instead.
func (*LogBatch) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{119}
}

func (x *LogBatch) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *LogBatch) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *LogBatch) GetLines() []*LogBatch_Entry {
	if x != nil {
		return x.Lines
	}
	return nil
}

type ConfigVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope is the scoping for this config variable.
	//
	// Types that are assignable to Scope:
	//	*ConfigVar_Application
	//	*ConfigVar_Project
	//	*ConfigVar_Runner
	Scope isConfigVar_Scope `protobuf_oneof:"scope"`
	// name is the name of the environment variable that this config var is setting
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*ConfigVar_Unset
	//	*ConfigVar_Static
	//	*ConfigVar_Dynamic
	Value isConfigVar_Value `protobuf_oneof:"value"`
	// Indicates if the variable is not meant to be exposed applications or runners.
	// It exists only to be referenced by other variables.
	Internal bool `protobuf:"varint,8,opt,name=internal,proto3" json:"internal,omitempty"`
	// Indicates that this is actually be written as a file, with the name
	// field being the filename.
	NameIsPath bool `protobuf:"varint,9,opt,name=name_is_path,json=nameIsPath,proto3" json:"name_is_path,omitempty"`
}

func (x *ConfigVar) Reset() {
	*x = ConfigVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigVar) ProtoMessage() {}

func (x *ConfigVar) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigVar.ProtoReflect.Descriptor instead.
func (*ConfigVar) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{120}
}

func (m *ConfigVar) GetScope() isConfigVar_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ConfigVar) GetApplication() *Ref_Application {
	if x, ok := x.GetScope().(*ConfigVar_Application); ok {
		return x.Application
	}
	return nil
}

func (x *ConfigVar) GetProject() *Ref_Project {
	if x, ok := x.GetScope().(*ConfigVar_Project); ok {
		return x.Project
	}
	return nil
}

func (x *ConfigVar) GetRunner() *Ref_Runner {
	if x, ok := x.GetScope().(*ConfigVar_Runner); ok {
		return x.Runner
	}
	return nil
}

func (x *ConfigVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ConfigVar) GetValue() isConfigVar_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConfigVar) GetUnset() *emptypb.Empty {
	if x, ok := x.GetValue().(*ConfigVar_Unset); ok {
		return x.Unset
	}
	return nil
}

func (x *ConfigVar) GetStatic() string {
	if x, ok := x.GetValue().(*ConfigVar_Static); ok {
		return x.Static
	}
	return ""
}

func (x *ConfigVar) GetDynamic() *ConfigVar_DynamicVal {
	if x, ok := x.GetValue().(*ConfigVar_Dynamic); ok {
		return x.Dynamic
	}
	return nil
}

func (x *ConfigVar) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *ConfigVar) GetNameIsPath() bool {
	if x != nil {
		return x.NameIsPath
	}
	return false
}

type isConfigVar_Scope interface {
	isConfigVar_Scope()
}

type ConfigVar_Application struct {
	Application *Ref_Application `protobuf:"bytes,3,opt,name=application,proto3,oneof"`
}

type ConfigVar_Project struct {
	Project *Ref_Project `protobuf:"bytes,4,opt,name=project,proto3,oneof"`
}

type ConfigVar_Runner struct {
	// This specifies that the configuration variable is for runners only.
	// You can use more complex runner targeting via this ref.
	Runner *Ref_Runner `protobuf:"bytes,5,opt,name=runner,proto3,oneof"`
}

func (*ConfigVar_Application) isConfigVar_Scope() {}

func (*ConfigVar_Project) isConfigVar_Scope() {}

func (*ConfigVar_Runner) isConfigVar_Scope() {}

type isConfigVar_Value interface {
	isConfigVar_Value()
}

type ConfigVar_Unset struct {
	// unset, if set, unsets this value. For historical reasons, empty static
	// values also unset the value.
	Unset *emptypb.Empty `protobuf:"bytes,7,opt,name=unset,proto3,oneof"`
}

type ConfigVar_Static struct {
	// static, direct value.
	Static string `protobuf:"bytes,2,opt,name=static,proto3,oneof"`
}

type ConfigVar_Dynamic struct {
	// dynamically sourced value
	Dynamic *ConfigVar_DynamicVal `protobuf:"bytes,6,opt,name=dynamic,proto3,oneof"`
}

func (*ConfigVar_Unset) isConfigVar_Value() {}

func (*ConfigVar_Static) isConfigVar_Value() {}

func (*ConfigVar_Dynamic) isConfigVar_Value() {}

type ConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variables []*ConfigVar `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *ConfigSetRequest) Reset() {
	*x = ConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSetRequest) ProtoMessage() {}

func (x *ConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSetRequest.ProtoReflect.Descriptor instead.
func (*ConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{121}
}

func (x *ConfigSetRequest) GetVariables() []*ConfigVar {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigSetResponse) Reset() {
	*x = ConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSetResponse) ProtoMessage() {}

func (x *ConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSetResponse.ProtoReflect.Descriptor instead.
func (*ConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{122}
}

type ConfigGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope is the scoping for this config variable.
	//
	// Types that are assignable to Scope:
	//	*ConfigGetRequest_Application
	//	*ConfigGetRequest_Project
	//	*ConfigGetRequest_Runner
	Scope isConfigGetRequest_Scope `protobuf_oneof:"scope"`
	// Get all configuration entries under the given prefix. When empty,
	// returns all config variables.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *ConfigGetRequest) Reset() {
	*x = ConfigGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetRequest) ProtoMessage() {}

func (x *ConfigGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetRequest.ProtoReflect.Descriptor instead.
func (*ConfigGetRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{123}
}

func (m *ConfigGetRequest) GetScope() isConfigGetRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ConfigGetRequest) GetApplication() *Ref_Application {
	if x, ok := x.GetScope().(*ConfigGetRequest_Application); ok {
		return x.Application
	}
	return nil
}

func (x *ConfigGetRequest) GetProject() *Ref_Project {
	if x, ok := x.GetScope().(*ConfigGetRequest_Project); ok {
		return x.Project
	}
	return nil
}

func (x *ConfigGetRequest) GetRunner() *Ref_RunnerId {
	if x, ok := x.GetScope().(*ConfigGetRequest_Runner); ok {
		return x.Runner
	}
	return nil
}

func (x *ConfigGetRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type isConfigGetRequest_Scope interface {
	isConfigGetRequest_Scope()
}

type ConfigGetRequest_Application struct {
	Application *Ref_Application `protobuf:"bytes,2,opt,name=application,proto3,oneof"`
}

type ConfigGetRequest_Project struct {
	Project *Ref_Project `protobuf:"bytes,3,opt,name=project,proto3,oneof"`
}

type ConfigGetRequest_Runner struct {
	Runner *Ref_RunnerId `protobuf:"bytes,4,opt,name=runner,proto3,oneof"`
}

func (*ConfigGetRequest_Application) isConfigGetRequest_Scope() {}

func (*ConfigGetRequest_Project) isConfigGetRequest_Scope() {}

func (*ConfigGetRequest_Runner) isConfigGetRequest_Scope() {}

type ConfigGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variables []*ConfigVar `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *ConfigGetResponse) Reset() {
	*x = ConfigGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetResponse) ProtoMessage() {}

func (x *ConfigGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetResponse.ProtoReflect.Descriptor instead.
func (*ConfigGetResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{124}
}

func (x *ConfigGetResponse) GetVariables() []*ConfigVar {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ConfigSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// delete may be set to true on SetConfigSource to delete this config source.
	// This is a field on ConfigSource since there are a variety of ways to
	// identify a ConfigSource. Therefore, the recommend deletion process is
	// to query the ConfigSource using GetConfigSource and then set delete
	// on a return value to ensure the correct value is deleted.
	Delete bool `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
	// Scope that this configuration is valid. Note that this doesn't
	// prevent a config source from being used in other scopes, it only
	// prevents this configuration. Configuration sources used in other
	// scopes will use a default configuration set by the plugin.
	//
	// Types that are assignable to Scope:
	//	*ConfigSource_Global
	Scope isConfigSource_Scope `protobuf_oneof:"scope"`
	// type of the config source. This should match the plugin name.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// config is the configuration for the config source.
	Config map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// hash is set automatically on write and available on read and is a
	// content hash of the configuration. This can be used to determine
	// uniqueness or changes in the configuration. Setting this value with
	// SetConfigSource has no effect and will be overwritten. Note that this
	// hash may take more into account than just "config" as other fields
	// are introduced to this message type.
	Hash uint64 `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ConfigSource) Reset() {
	*x = ConfigSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSource) ProtoMessage() {}

func (x *ConfigSource) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSource.ProtoReflect.Descriptor instead.
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{125}
}

func (x *ConfigSource) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (m *ConfigSource) GetScope() isConfigSource_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ConfigSource) GetGlobal() *Ref_Global {
	if x, ok := x.GetScope().(*ConfigSource_Global); ok {
		return x.Global
	}
	return nil
}

func (x *ConfigSource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConfigSource) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ConfigSource) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type isConfigSource_Scope interface {
	isConfigSource_Scope()
}

type ConfigSource_Global struct {
	Global *Ref_Global `protobuf:"bytes,50,opt,name=global,proto3,oneof"`
}

func (*ConfigSource_Global) isConfigSource_Scope() {}

type SetConfigSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigSource *ConfigSource `protobuf:"bytes,1,opt,name=config_source,json=configSource,proto3" json:"config_source,omitempty"`
}

func (x *SetConfigSourceRequest) Reset() {
	*x = SetConfigSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigSourceRequest) ProtoMessage() {}

func (x *SetConfigSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigSourceRequest.ProtoReflect.Descriptor instead.
func (*SetConfigSourceRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{126}
}

func (x *SetConfigSourceRequest) GetConfigSource() *ConfigSource {
	if x != nil {
		return x.ConfigSource
	}
	return nil
}

type GetConfigSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scope is the scoping for the config source.
	//
	// Types that are assignable to Scope:
	//	*GetConfigSourceRequest_Global
	Scope isGetConfigSourceRequest_Scope `protobuf_oneof:"scope"`
	// config source type. This is optional. If this is omitted, all
	// config source types matching the above scoping will be returned.
	// This is a prefix-search. All config sources with this type prefix
	// will be returned.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetConfigSourceRequest) Reset() {
	*x = GetConfigSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigSourceRequest) ProtoMessage() {}

func (x *GetConfigSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigSourceRequest.ProtoReflect.Descriptor instead.
func (*GetConfigSourceRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{127}
}

func (m *GetConfigSourceRequest) GetScope() isGetConfigSourceRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *GetConfigSourceRequest) GetGlobal() *Ref_Global {
	if x, ok := x.GetScope().(*GetConfigSourceRequest_Global); ok {
		return x.Global
	}
	return nil
}

func (x *GetConfigSourceRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type isGetConfigSourceRequest_Scope interface {
	isGetConfigSourceRequest_Scope()
}

type GetConfigSourceRequest_Global struct {
	Global *Ref_Global `protobuf:"bytes,50,opt,name=global,proto3,oneof"`
}

func (*GetConfigSourceRequest_Global) isGetConfigSourceRequest_Scope() {}

type GetConfigSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigSources []*ConfigSource `protobuf:"bytes,1,rep,name=config_sources,json=configSources,proto3" json:"config_sources,omitempty"`
}

func (x *GetConfigSourceResponse) Reset() {
	*x = GetConfigSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigSourceResponse) ProtoMessage() {}

func (x *GetConfigSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigSourceResponse.ProtoReflect.Descriptor instead.
func (*GetConfigSourceResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{128}
}

func (x *GetConfigSourceResponse) GetConfigSources() []*ConfigSource {
	if x != nil {
		return x.ConfigSources
	}
	return nil
}

type ExecStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*ExecStreamRequest_Start_
	//	*ExecStreamRequest_Input_
	//	*ExecStreamRequest_Winch
	//	*ExecStreamRequest_InputEof
	Event isExecStreamRequest_Event `protobuf_oneof:"event"`
}

func (x *ExecStreamRequest) Reset() {
	*x = ExecStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamRequest) ProtoMessage() {}

func (x *ExecStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamRequest.ProtoReflect.Descriptor instead.
func (*ExecStreamRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{129}
}

func (m *ExecStreamRequest) GetEvent() isExecStreamRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ExecStreamRequest) GetStart() *ExecStreamRequest_Start {
	if x, ok := x.GetEvent().(*ExecStreamRequest_Start_); ok {
		return x.Start
	}
	return nil
}

func (x *ExecStreamRequest) GetInput() *ExecStreamRequest_Input {
	if x, ok := x.GetEvent().(*ExecStreamRequest_Input_); ok {
		return x.Input
	}
	return nil
}

func (x *ExecStreamRequest) GetWinch() *ExecStreamRequest_WindowSize {
	if x, ok := x.GetEvent().(*ExecStreamRequest_Winch); ok {
		return x.Winch
	}
	return nil
}

func (x *ExecStreamRequest) GetInputEof() *emptypb.Empty {
	if x, ok := x.GetEvent().(*ExecStreamRequest_InputEof); ok {
		return x.InputEof
	}
	return nil
}

type isExecStreamRequest_Event interface {
	isExecStreamRequest_Event()
}

type ExecStreamRequest_Start_ struct {
	Start *ExecStreamRequest_Start `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type ExecStreamRequest_Input_ struct {
	Input *ExecStreamRequest_Input `protobuf:"bytes,2,opt,name=input,proto3,oneof"`
}

type ExecStreamRequest_Winch struct {
	Winch *ExecStreamRequest_WindowSize `protobuf:"bytes,3,opt,name=winch,proto3,oneof"`
}

type ExecStreamRequest_InputEof struct {
	// input_eof should be sent as an event when the input stream is
	// closed. After this, no more Input messages can be sent. Any Input
	// messages sent will be ignored. This will send an EOF on the remote
	// end as well to close stdin for the exec process.
	InputEof *emptypb.Empty `protobuf:"bytes,4,opt,name=input_eof,json=inputEof,proto3,oneof"`
}

func (*ExecStreamRequest_Start_) isExecStreamRequest_Event() {}

func (*ExecStreamRequest_Input_) isExecStreamRequest_Event() {}

func (*ExecStreamRequest_Winch) isExecStreamRequest_Event() {}

func (*ExecStreamRequest_InputEof) isExecStreamRequest_Event() {}

type ExecStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*ExecStreamResponse_Open_
	//	*ExecStreamResponse_Output_
	//	*ExecStreamResponse_Exit_
	Event isExecStreamResponse_Event `protobuf_oneof:"event"`
}

func (x *ExecStreamResponse) Reset() {
	*x = ExecStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamResponse) ProtoMessage() {}

func (x *ExecStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamResponse.ProtoReflect.Descriptor instead.
func (*ExecStreamResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{130}
}

func (m *ExecStreamResponse) GetEvent() isExecStreamResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ExecStreamResponse) GetOpen() *ExecStreamResponse_Open {
	if x, ok := x.GetEvent().(*ExecStreamResponse_Open_); ok {
		return x.Open
	}
	return nil
}

func (x *ExecStreamResponse) GetOutput() *ExecStreamResponse_Output {
	if x, ok := x.GetEvent().(*ExecStreamResponse_Output_); ok {
		return x.Output
	}
	return nil
}

func (x *ExecStreamResponse) GetExit() *ExecStreamResponse_Exit {
	if x, ok := x.GetEvent().(*ExecStreamResponse_Exit_); ok {
		return x.Exit
	}
	return nil
}

type isExecStreamResponse_Event interface {
	isExecStreamResponse_Event()
}

type ExecStreamResponse_Open_ struct {
	// Open is always sent first no matter what (unless there is an error
	// in which case the stream will exit). This should be used to validate
	// that the exec process started properly.
	Open *ExecStreamResponse_Open `protobuf:"bytes,3,opt,name=open,proto3,oneof"`
}

type ExecStreamResponse_Output_ struct {
	Output *ExecStreamResponse_Output `protobuf:"bytes,1,opt,name=output,proto3,oneof"`
}

type ExecStreamResponse_Exit_ struct {
	Exit *ExecStreamResponse_Exit `protobuf:"bytes,2,opt,name=exit,proto3,oneof"`
}

func (*ExecStreamResponse_Open_) isExecStreamResponse_Event() {}

func (*ExecStreamResponse_Output_) isExecStreamResponse_Event() {}

func (*ExecStreamResponse_Exit_) isExecStreamResponse_Event() {}

type EntrypointConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the deployment that this instance is a part of
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// instance_id is a unique ID generated by the running entrypoint. This is
	// not an auth mechanism, just a way to associate data with the correct instance.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The type of instance that is making the config request. This type will be
	// recorded by the server to alter how the server interacts with the instance.
	Type Instance_Type `protobuf:"varint,3,opt,name=type,proto3,enum=hashicorp.waypoint.Instance_Type" json:"type,omitempty"`
	// If this is true, then this instance will never be assigned any exec
	// sessions. If no instances support exec, an error will be shown to the
	// user.
	DisableExec bool `protobuf:"varint,4,opt,name=disable_exec,json=disableExec,proto3" json:"disable_exec,omitempty"`
}

func (x *EntrypointConfigRequest) Reset() {
	*x = EntrypointConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointConfigRequest) ProtoMessage() {}

func (x *EntrypointConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointConfigRequest.ProtoReflect.Descriptor instead.
func (*EntrypointConfigRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{131}
}

func (x *EntrypointConfigRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *EntrypointConfigRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *EntrypointConfigRequest) GetType() Instance_Type {
	if x != nil {
		return x.Type
	}
	return Instance_LONG_RUNNING
}

func (x *EntrypointConfigRequest) GetDisableExec() bool {
	if x != nil {
		return x.DisableExec
	}
	return false
}

type EntrypointConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *EntrypointConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *EntrypointConfigResponse) Reset() {
	*x = EntrypointConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointConfigResponse) ProtoMessage() {}

func (x *EntrypointConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointConfigResponse.ProtoReflect.Descriptor instead.
func (*EntrypointConfigResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{132}
}

func (x *EntrypointConfigResponse) GetConfig() *EntrypointConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type EntrypointConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exec are requested exec sessions for this instance.
	Exec []*EntrypointConfig_Exec `protobuf:"bytes,1,rep,name=exec,proto3" json:"exec,omitempty"`
	// The environment variables to set in the entrypoint.
	EnvVars []*ConfigVar `protobuf:"bytes,2,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	// The configuration for any config sources that may be used in the
	// config vars sent down. The server may send down extra configs that
	// aren't used so consumers should filter these based on what env vars
	// are actually in use.
	ConfigSources []*ConfigSource `protobuf:"bytes,5,rep,name=config_sources,json=configSources,proto3" json:"config_sources,omitempty"`
	// The signal to send the application when config files change.
	FileChangeSignal string `protobuf:"bytes,6,opt,name=file_change_signal,json=fileChangeSignal,proto3" json:"file_change_signal,omitempty"`
	// The URL service configuration. This might be nil. If this is nil,
	// then the URL service is disabled.
	UrlService *EntrypointConfig_URLService `protobuf:"bytes,3,opt,name=url_service,json=urlService,proto3" json:"url_service,omitempty"`
	// Deployment is the deployment information for this instance. This may
	// be nil if the user is running an old enough server so always nil-check this.
	Deployment *EntrypointConfig_DeploymentInfo `protobuf:"bytes,4,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *EntrypointConfig) Reset() {
	*x = EntrypointConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointConfig) ProtoMessage() {}

func (x *EntrypointConfig) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointConfig.ProtoReflect.Descriptor instead.
func (*EntrypointConfig) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{133}
}

func (x *EntrypointConfig) GetExec() []*EntrypointConfig_Exec {
	if x != nil {
		return x.Exec
	}
	return nil
}

func (x *EntrypointConfig) GetEnvVars() []*ConfigVar {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *EntrypointConfig) GetConfigSources() []*ConfigSource {
	if x != nil {
		return x.ConfigSources
	}
	return nil
}

func (x *EntrypointConfig) GetFileChangeSignal() string {
	if x != nil {
		return x.FileChangeSignal
	}
	return ""
}

func (x *EntrypointConfig) GetUrlService() *EntrypointConfig_URLService {
	if x != nil {
		return x.UrlService
	}
	return nil
}

func (x *EntrypointConfig) GetDeployment() *EntrypointConfig_DeploymentInfo {
	if x != nil {
		return x.Deployment
	}
	return nil
}

// A batch of data for log streaming from the entrypoint.
type EntrypointLogBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance_id is a unique ID generated by the running entrypoint. This is
	// not an auth mechanism, just a way to associate data with the correct instance.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// lines is the set of lines
	Lines []*LogBatch_Entry `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *EntrypointLogBatch) Reset() {
	*x = EntrypointLogBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointLogBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointLogBatch) ProtoMessage() {}

func (x *EntrypointLogBatch) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointLogBatch.ProtoReflect.Descriptor instead.
func (*EntrypointLogBatch) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{134}
}

func (x *EntrypointLogBatch) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *EntrypointLogBatch) GetLines() []*LogBatch_Entry {
	if x != nil {
		return x.Lines
	}
	return nil
}

type EntrypointExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*EntrypointExecRequest_Open_
	//	*EntrypointExecRequest_Exit_
	//	*EntrypointExecRequest_Output_
	//	*EntrypointExecRequest_Error_
	Event isEntrypointExecRequest_Event `protobuf_oneof:"event"`
}

func (x *EntrypointExecRequest) Reset() {
	*x = EntrypointExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointExecRequest) ProtoMessage() {}

func (x *EntrypointExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointExecRequest.ProtoReflect.Descriptor instead.
func (*EntrypointExecRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{135}
}

func (m *EntrypointExecRequest) GetEvent() isEntrypointExecRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *EntrypointExecRequest) GetOpen() *EntrypointExecRequest_Open {
	if x, ok := x.GetEvent().(*EntrypointExecRequest_Open_); ok {
		return x.Open
	}
	return nil
}

func (x *EntrypointExecRequest) GetExit() *EntrypointExecRequest_Exit {
	if x, ok := x.GetEvent().(*EntrypointExecRequest_Exit_); ok {
		return x.Exit
	}
	return nil
}

func (x *EntrypointExecRequest) GetOutput() *EntrypointExecRequest_Output {
	if x, ok := x.GetEvent().(*EntrypointExecRequest_Output_); ok {
		return x.Output
	}
	return nil
}

func (x *EntrypointExecRequest) GetError() *EntrypointExecRequest_Error {
	if x, ok := x.GetEvent().(*EntrypointExecRequest_Error_); ok {
		return x.Error
	}
	return nil
}

type isEntrypointExecRequest_Event interface {
	isEntrypointExecRequest_Event()
}

type EntrypointExecRequest_Open_ struct {
	// open MUST BE the first message sent by a client. This will be used
	// by the server side to perform some initialization. If the first message
	// is not open the server will close the connection.
	Open *EntrypointExecRequest_Open `protobuf:"bytes,1,opt,name=open,proto3,oneof"`
}

type EntrypointExecRequest_Exit_ struct {
	// exit should be sent as a final message type after the command exits.
	Exit *EntrypointExecRequest_Exit `protobuf:"bytes,2,opt,name=exit,proto3,oneof"`
}

type EntrypointExecRequest_Output_ struct {
	// output contains stdout/stderr
	Output *EntrypointExecRequest_Output `protobuf:"bytes,3,opt,name=output,proto3,oneof"`
}

type EntrypointExecRequest_Error_ struct {
	// error indicates an error occurred. This will terminate the stream.
	Error *EntrypointExecRequest_Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

func (*EntrypointExecRequest_Open_) isEntrypointExecRequest_Event() {}

func (*EntrypointExecRequest_Exit_) isEntrypointExecRequest_Event() {}

func (*EntrypointExecRequest_Output_) isEntrypointExecRequest_Event() {}

func (*EntrypointExecRequest_Error_) isEntrypointExecRequest_Event() {}

type EntrypointExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*EntrypointExecResponse_Input
	//	*EntrypointExecResponse_InputEof
	//	*EntrypointExecResponse_Winch
	//	*EntrypointExecResponse_Opened
	Event isEntrypointExecResponse_Event `protobuf_oneof:"event"`
}

func (x *EntrypointExecResponse) Reset() {
	*x = EntrypointExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointExecResponse) ProtoMessage() {}

func (x *EntrypointExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointExecResponse.ProtoReflect.Descriptor instead.
func (*EntrypointExecResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{136}
}

func (m *EntrypointExecResponse) GetEvent() isEntrypointExecResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *EntrypointExecResponse) GetInput() []byte {
	if x, ok := x.GetEvent().(*EntrypointExecResponse_Input); ok {
		return x.Input
	}
	return nil
}

func (x *EntrypointExecResponse) GetInputEof() *emptypb.Empty {
	if x, ok := x.GetEvent().(*EntrypointExecResponse_InputEof); ok {
		return x.InputEof
	}
	return nil
}

func (x *EntrypointExecResponse) GetWinch() *ExecStreamRequest_WindowSize {
	if x, ok := x.GetEvent().(*EntrypointExecResponse_Winch); ok {
		return x.Winch
	}
	return nil
}

func (x *EntrypointExecResponse) GetOpened() bool {
	if x, ok := x.GetEvent().(*EntrypointExecResponse_Opened); ok {
		return x.Opened
	}
	return false
}

type isEntrypointExecResponse_Event interface {
	isEntrypointExecResponse_Event()
}

type EntrypointExecResponse_Input struct {
	// input is raw stdin input from the client
	Input []byte `protobuf:"bytes,1,opt,name=input,proto3,oneof"`
}

type EntrypointExecResponse_InputEof struct {
	// input_eof means that stdin is now closed
	InputEof *emptypb.Empty `protobuf:"bytes,4,opt,name=input_eof,json=inputEof,proto3,oneof"`
}

type EntrypointExecResponse_Winch struct {
	// winch is SIGWNCH information for window sizing
	Winch *ExecStreamRequest_WindowSize `protobuf:"bytes,2,opt,name=winch,proto3,oneof"`
}

type EntrypointExecResponse_Opened struct {
	// opened is sent when the entrypoint session is successfully opened.
	// The value of this message is meaningless. The existence of the message
	// itself is a signal that the stream was opened properly.
	Opened bool `protobuf:"varint,3,opt,name=opened,proto3,oneof"`
}

func (*EntrypointExecResponse_Input) isEntrypointExecResponse_Event() {}

func (*EntrypointExecResponse_InputEof) isEntrypointExecResponse_Event() {}

func (*EntrypointExecResponse_Winch) isEntrypointExecResponse_Event() {}

func (*EntrypointExecResponse_Opened) isEntrypointExecResponse_Event() {}

// The outer structure of the token that is directly Marshaled and
// ASCII armored.
type TokenTransport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Marshaled token, stored as bytes because we need to to validate
	// it with the given signature.
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The signature of body for validation.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// The key used to generate the signature.
	KeyId string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Any configuration style metadata that can be passed along with the token
	// without invalidating the token body itself.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TokenTransport) Reset() {
	*x = TokenTransport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransport) ProtoMessage() {}

func (x *TokenTransport) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransport.ProtoReflect.Descriptor instead.
func (*TokenTransport) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{137}
}

func (x *TokenTransport) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *TokenTransport) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TokenTransport) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *TokenTransport) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// The authenticated Token information. This is used to authenticate requests.
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Non-secret ID that is used in logs to represent this token. Internally,
	// this is also used as a nonce when signing. This ID is randomly generated
	// when created.
	AccessorId []byte `protobuf:"bytes,2,opt,name=accessor_id,json=accessorId,proto3" json:"accessor_id,omitempty"`
	// When the token is valid until. After the given date, the token will be
	// rejected. When this is not set, the token is valid forever.
	ValidUntil *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	// When the token was issued. This may be used for revocation using a
	// "no earlier than" rule.
	IssuedTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=issued_time,json=issuedTime,proto3" json:"issued_time,omitempty"`
	// The kind of token this is.
	//
	// Types that are assignable to Kind:
	//	*Token_Login_
	//	*Token_Invite_
	Kind isToken_Kind `protobuf_oneof:"kind"`
	// The user that the token is for. This must be "waypoint" for
	// backwards compat reasons.
	UnusedUser string `protobuf:"bytes,1,opt,name=unused_user,json=unusedUser,proto3" json:"unused_user,omitempty"`
	// Old way to determine what kind of token this is.
	UnusedLogin  bool `protobuf:"varint,4,opt,name=unused_login,json=unusedLogin,proto3" json:"unused_login,omitempty"`
	UnusedInvite bool `protobuf:"varint,5,opt,name=unused_invite,json=unusedInvite,proto3" json:"unused_invite,omitempty"`
	// Same as Login.entrypoint, we just moved it.
	UnusedEntrypoint *Token_Entrypoint `protobuf:"bytes,6,opt,name=unused_entrypoint,json=unusedEntrypoint,proto3" json:"unused_entrypoint,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{138}
}

func (x *Token) GetAccessorId() []byte {
	if x != nil {
		return x.AccessorId
	}
	return nil
}

func (x *Token) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

func (x *Token) GetIssuedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedTime
	}
	return nil
}

func (m *Token) GetKind() isToken_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Token) GetLogin() *Token_Login {
	if x, ok := x.GetKind().(*Token_Login_); ok {
		return x.Login
	}
	return nil
}

func (x *Token) GetInvite() *Token_Invite {
	if x, ok := x.GetKind().(*Token_Invite_); ok {
		return x.Invite
	}
	return nil
}

func (x *Token) GetUnusedUser() string {
	if x != nil {
		return x.UnusedUser
	}
	return ""
}

func (x *Token) GetUnusedLogin() bool {
	if x != nil {
		return x.UnusedLogin
	}
	return false
}

func (x *Token) GetUnusedInvite() bool {
	if x != nil {
		return x.UnusedInvite
	}
	return false
}

func (x *Token) GetUnusedEntrypoint() *Token_Entrypoint {
	if x != nil {
		return x.UnusedEntrypoint
	}
	return nil
}

type isToken_Kind interface {
	isToken_Kind()
}

type Token_Login_ struct {
	// login tokens can be used for API requests
	Login *Token_Login `protobuf:"bytes,8,opt,name=login,proto3,oneof"`
}

type Token_Invite_ struct {
	// invite tokens can be exhanged for login tokens and also optionally
	// sign a new user up.
	Invite *Token_Invite `protobuf:"bytes,9,opt,name=invite,proto3,oneof"`
}

func (*Token_Login_) isToken_Kind() {}

func (*Token_Invite_) isToken_Kind() {}

// Represents a key used to sign tokens using HMAC
type HMACKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the key.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A randomly generated key used to sign tokens with
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HMACKey) Reset() {
	*x = HMACKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMACKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMACKey) ProtoMessage() {}

func (x *HMACKey) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMACKey.ProtoReflect.Descriptor instead.
func (*HMACKey) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{139}
}

func (x *HMACKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HMACKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type DecodeTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token to decode.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DecodeTokenRequest) Reset() {
	*x = DecodeTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeTokenRequest) ProtoMessage() {}

func (x *DecodeTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeTokenRequest.ProtoReflect.Descriptor instead.
func (*DecodeTokenRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{140}
}

func (x *DecodeTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DecodeTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The decoded token.
	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Transport is the wrapper around the token. This may be useful
	// to look into the metadata around the token.
	Transport *TokenTransport `protobuf:"bytes,2,opt,name=transport,proto3" json:"transport,omitempty"`
}

func (x *DecodeTokenResponse) Reset() {
	*x = DecodeTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeTokenResponse) ProtoMessage() {}

func (x *DecodeTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeTokenResponse.ProtoReflect.Descriptor instead.
func (*DecodeTokenResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{141}
}

func (x *DecodeTokenResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *DecodeTokenResponse) GetTransport() *TokenTransport {
	if x != nil {
		return x.Transport
	}
	return nil
}

type LoginTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How long the token should be valid until from the time the request
	// is made. If this is empty then the login token never expires on its own.
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// The user to create the login token for. If this is nil, the currently
	// logged in user is used. The calling user must have permission to create
	// a token for the target user if this is set.
	User *Ref_User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *LoginTokenRequest) Reset() {
	*x = LoginTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginTokenRequest) ProtoMessage() {}

func (x *LoginTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginTokenRequest.ProtoReflect.Descriptor instead.
func (*LoginTokenRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{142}
}

func (x *LoginTokenRequest) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *LoginTokenRequest) GetUser() *Ref_User {
	if x != nil {
		return x.User
	}
	return nil
}

// Passed with GenerateInviteToken with the params on how the invite token should
// be generate.
type InviteTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How long the token should be valid until. The resulting token has a timestamp
	// encoded within it by adding the current time to this duration.
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// login is the login information you want this token exchange for. All fields
	// can be set (including logging in as another user as long as the requesting
	// user has permission). If this is a signup invite token, the "user_id"
	// will be ignored.
	Login *Token_Login `protobuf:"bytes,4,opt,name=login,proto3" json:"login,omitempty"`
	// signup, if non-nil, will exchange this invite token for new user accounts.
	// The signup structure can be used to hint for the username. This must be
	// non-nil for this to be a signup token for new accounts.
	Signup *Token_Invite_Signup `protobuf:"bytes,3,opt,name=signup,proto3" json:"signup,omitempty"`
	// Old field, used only for backwards compatibility. If this is set,
	// the old behavior will be followed. If you don't know what that is,
	// then do not use this field.
	UnusedEntrypoint *Token_Entrypoint `protobuf:"bytes,2,opt,name=unused_entrypoint,json=unusedEntrypoint,proto3" json:"unused_entrypoint,omitempty"`
}

func (x *InviteTokenRequest) Reset() {
	*x = InviteTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteTokenRequest) ProtoMessage() {}

func (x *InviteTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteTokenRequest.ProtoReflect.Descriptor instead.
func (*InviteTokenRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{143}
}

func (x *InviteTokenRequest) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *InviteTokenRequest) GetLogin() *Token_Login {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *InviteTokenRequest) GetSignup() *Token_Invite_Signup {
	if x != nil {
		return x.Signup
	}
	return nil
}

func (x *InviteTokenRequest) GetUnusedEntrypoint() *Token_Entrypoint {
	if x != nil {
		return x.UnusedEntrypoint
	}
	return nil
}

// Returned by any action that creates a token.
type NewTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new token which can be presented to whichever API expects it.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *NewTokenResponse) Reset() {
	*x = NewTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTokenResponse) ProtoMessage() {}

func (x *NewTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTokenResponse.ProtoReflect.Descriptor instead.
func (*NewTokenResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{144}
}

func (x *NewTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Passed to ConvertInviteToken to create a new token that can be used to authenticate RPCs.
type ConvertInviteTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token previous returned by GenerateInviteToken.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ConvertInviteTokenRequest) Reset() {
	*x = ConvertInviteTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertInviteTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertInviteTokenRequest) ProtoMessage() {}

func (x *ConvertInviteTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertInviteTokenRequest.ProtoReflect.Descriptor instead.
func (*ConvertInviteTokenRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{145}
}

func (x *ConvertInviteTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*CreateSnapshotResponse_Open_
	//	*CreateSnapshotResponse_Chunk
	Event isCreateSnapshotResponse_Event `protobuf_oneof:"event"`
}

func (x *CreateSnapshotResponse) Reset() {
	*x = CreateSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotResponse) ProtoMessage() {}

func (x *CreateSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{146}
}

func (m *CreateSnapshotResponse) GetEvent() isCreateSnapshotResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *CreateSnapshotResponse) GetOpen() *CreateSnapshotResponse_Open {
	if x, ok := x.GetEvent().(*CreateSnapshotResponse_Open_); ok {
		return x.Open
	}
	return nil
}

func (x *CreateSnapshotResponse) GetChunk() []byte {
	if x, ok := x.GetEvent().(*CreateSnapshotResponse_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isCreateSnapshotResponse_Event interface {
	isCreateSnapshotResponse_Event()
}

type CreateSnapshotResponse_Open_ struct {
	// Open is sent as the opening message with information about the
	// snapshot. This is always sent first (before any data).
	Open *CreateSnapshotResponse_Open `protobuf:"bytes,1,opt,name=open,proto3,oneof"`
}

type CreateSnapshotResponse_Chunk struct {
	// Chunk is a next chunk of data. You should continue to expect
	// data until an EOF is received on the stream.
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*CreateSnapshotResponse_Open_) isCreateSnapshotResponse_Event() {}

func (*CreateSnapshotResponse_Chunk) isCreateSnapshotResponse_Event() {}

type RestoreSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*RestoreSnapshotRequest_Open_
	//	*RestoreSnapshotRequest_Chunk
	Event isRestoreSnapshotRequest_Event `protobuf_oneof:"event"`
}

func (x *RestoreSnapshotRequest) Reset() {
	*x = RestoreSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreSnapshotRequest) ProtoMessage() {}

func (x *RestoreSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreSnapshotRequest.ProtoReflect.Descriptor instead.
func (*RestoreSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{147}
}

func (m *RestoreSnapshotRequest) GetEvent() isRestoreSnapshotRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *RestoreSnapshotRequest) GetOpen() *RestoreSnapshotRequest_Open {
	if x, ok := x.GetEvent().(*RestoreSnapshotRequest_Open_); ok {
		return x.Open
	}
	return nil
}

func (x *RestoreSnapshotRequest) GetChunk() []byte {
	if x, ok := x.GetEvent().(*RestoreSnapshotRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isRestoreSnapshotRequest_Event interface {
	isRestoreSnapshotRequest_Event()
}

type RestoreSnapshotRequest_Open_ struct {
	// Open MUST be sent as the first message and sent exactly once.
	// This sets the settings for the restore.
	Open *RestoreSnapshotRequest_Open `protobuf:"bytes,1,opt,name=open,proto3,oneof"`
}

type RestoreSnapshotRequest_Chunk struct {
	// Chunk is a chunk of restore data. The restore snapshot API will
	// continue reading data until an EOF is received (the write end is
	// closed).
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*RestoreSnapshotRequest_Open_) isRestoreSnapshotRequest_Event() {}

func (*RestoreSnapshotRequest_Chunk) isRestoreSnapshotRequest_Event() {}

// Snapshot is the encoding of the snapshot for all snapshot APIs.
// The encoding is proto.Message delimited data. This is also the encoding
// expected if the waypoint-restore.db file is copied manually from the
// snapshot data.
//
// For snapshots, the Header message is always guaranteed first. After that,
// it is NOT guaranteed that only data chunks are sent. It is only guaranteed
// that the data chunks are over at EOF. Unknown messages can probably be
// ignored.
//
// It is HIGHLY RECOMMENDED you do not modify snapshots, but these messages
// are publicly exported so that you can try to inspect snapshots.
type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{148}
}

type WaypointHclFmtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaypointHcl []byte `protobuf:"bytes,1,opt,name=waypoint_hcl,json=waypointHcl,proto3" json:"waypoint_hcl,omitempty"`
}

func (x *WaypointHclFmtRequest) Reset() {
	*x = WaypointHclFmtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaypointHclFmtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaypointHclFmtRequest) ProtoMessage() {}

func (x *WaypointHclFmtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaypointHclFmtRequest.ProtoReflect.Descriptor instead.
func (*WaypointHclFmtRequest) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{149}
}

func (x *WaypointHclFmtRequest) GetWaypointHcl() []byte {
	if x != nil {
		return x.WaypointHcl
	}
	return nil
}

type WaypointHclFmtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaypointHcl []byte `protobuf:"bytes,1,opt,name=waypoint_hcl,json=waypointHcl,proto3" json:"waypoint_hcl,omitempty"`
}

func (x *WaypointHclFmtResponse) Reset() {
	*x = WaypointHclFmtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaypointHclFmtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaypointHclFmtResponse) ProtoMessage() {}

func (x *WaypointHclFmtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaypointHclFmtResponse.ProtoReflect.Descriptor instead.
func (*WaypointHclFmtResponse) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{150}
}

func (x *WaypointHclFmtResponse) GetWaypointHcl() []byte {
	if x != nil {
		return x.WaypointHcl
	}
	return nil
}

type VersionInfo_ProtocolVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current uint32 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	Minimum uint32 `protobuf:"varint,2,opt,name=minimum,proto3" json:"minimum,omitempty"`
}

func (x *VersionInfo_ProtocolVersion) Reset() {
	*x = VersionInfo_ProtocolVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo_ProtocolVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo_ProtocolVersion) ProtoMessage() {}

func (x *VersionInfo_ProtocolVersion) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo_ProtocolVersion.ProtoReflect.Descriptor instead.
func (*VersionInfo_ProtocolVersion) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{1, 0}
}

func (x *VersionInfo_ProtocolVersion) GetCurrent() uint32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *VersionInfo_ProtocolVersion) GetMinimum() uint32 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

type Variable_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string             `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	HclRange *Variable_HclRange `protobuf:"bytes,2,opt,name=hcl_range,json=hclRange,proto3" json:"hcl_range,omitempty"`
}

func (x *Variable_File) Reset() {
	*x = Variable_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable_File) ProtoMessage() {}

func (x *Variable_File) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable_File.ProtoReflect.Descriptor instead.
func (*Variable_File) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Variable_File) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Variable_File) GetHclRange() *Variable_HclRange {
	if x != nil {
		return x.HclRange
	}
	return nil
}

type Variable_VCS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string             `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	HclRange *Variable_HclRange `protobuf:"bytes,2,opt,name=hcl_range,json=hclRange,proto3" json:"hcl_range,omitempty"`
}

func (x *Variable_VCS) Reset() {
	*x = Variable_VCS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable_VCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable_VCS) ProtoMessage() {}

func (x *Variable_VCS) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable_VCS.ProtoReflect.Descriptor instead.
func (*Variable_VCS) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Variable_VCS) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Variable_VCS) GetHclRange() *Variable_HclRange {
	if x != nil {
		return x.HclRange
	}
	return nil
}

// Types mapped from https://pkg.go.dev/github.com/hashicorp/hcl/v2#Pos
type Variable_HclPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Byte   int32 `protobuf:"varint,3,opt,name=byte,proto3" json:"byte,omitempty"`
}

func (x *Variable_HclPos) Reset() {
	*x = Variable_HclPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable_HclPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable_HclPos) ProtoMessage() {}

func (x *Variable_HclPos) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable_HclPos.ProtoReflect.Descriptor instead.
func (*Variable_HclPos) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Variable_HclPos) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Variable_HclPos) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Variable_HclPos) GetByte() int32 {
	if x != nil {
		return x.Byte
	}
	return 0
}

type Variable_HclRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string           `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Start    *Variable_HclPos `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End      *Variable_HclPos `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Variable_HclRange) Reset() {
	*x = Variable_HclRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable_HclRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable_HclRange) ProtoMessage() {}

func (x *Variable_HclRange) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable_HclRange.ProtoReflect.Descriptor instead.
func (*Variable_HclRange) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Variable_HclRange) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Variable_HclRange) GetStart() *Variable_HclPos {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Variable_HclRange) GetEnd() *Variable_HclPos {
	if x != nil {
		return x.End
	}
	return nil
}

type Project_Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled must be set to true to enable polling.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// interval is a duration string of how often to poll, such as "5s".
	// The server may enforce minimum values, in which case a value lower
	// than the minimum will be ignored.
	Interval string `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *Project_Poll) Reset() {
	*x = Project_Poll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project_Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project_Poll) ProtoMessage() {}

func (x *Project_Poll) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project_Poll.ProtoReflect.Descriptor instead.
func (*Project_Poll) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Project_Poll) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Project_Poll) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

type Project_AppStatusPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled must be set to true to enable application polling for the project
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// interval is a duration string of how often to poll, such as "5s".
	// The server may enforce minimum values, in which case a value lower
	// than the minimum will be ignored.
	Interval string `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *Project_AppStatusPoll) Reset() {
	*x = Project_AppStatusPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project_AppStatusPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project_AppStatusPoll) ProtoMessage() {}

func (x *Project_AppStatusPoll) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project_AppStatusPoll.ProtoReflect.Descriptor instead.
func (*Project_AppStatusPoll) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Project_AppStatusPoll) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Project_AppStatusPoll) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

type Workspace_Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project that this is referencing.
	Project *Ref_Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Workspace that this project is part of. This will only be set
	// when using the GetProject API. This will ALWAYS BE NIL on workspace
	// list and get APIs.
	Workspace *Ref_Workspace `protobuf:"bytes,5,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// The last non-local ref that was used for any operation.
	DataSourceRef *Job_DataSource_Ref `protobuf:"bytes,2,opt,name=data_source_ref,json=dataSourceRef,proto3" json:"data_source_ref,omitempty"`
	// active_time is the last time that this project had activity in
	// this workspace.
	ActiveTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
	// The list of applications that have executed at least one operation
	// within the context of this workspace. To determine which operations
	// you must call the respect list API for that operation, such as
	// ListDeployments.
	Applications []*Workspace_Application `protobuf:"bytes,4,rep,name=applications,proto3" json:"applications,omitempty"`
}

func (x *Workspace_Project) Reset() {
	*x = Workspace_Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace_Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace_Project) ProtoMessage() {}

func (x *Workspace_Project) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace_Project.ProtoReflect.Descriptor instead.
func (*Workspace_Project) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Workspace_Project) GetProject() *Ref_Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Workspace_Project) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *Workspace_Project) GetDataSourceRef() *Job_DataSource_Ref {
	if x != nil {
		return x.DataSourceRef
	}
	return nil
}

func (x *Workspace_Project) GetActiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveTime
	}
	return nil
}

func (x *Workspace_Project) GetApplications() []*Workspace_Application {
	if x != nil {
		return x.Applications
	}
	return nil
}

type Workspace_Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Application that this is referencing.
	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// active_time is the last time that this application was active
	ActiveTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
}

func (x *Workspace_Application) Reset() {
	*x = Workspace_Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace_Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace_Application) ProtoMessage() {}

func (x *Workspace_Application) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace_Application.ProtoReflect.Descriptor instead.
func (*Workspace_Application) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Workspace_Application) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Workspace_Application) GetActiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveTime
	}
	return nil
}

// Link is a connection between an authentication provider and
// the user identity. This is used to lookup a unique user account
// within Waypoint from multiple auth sources (i.e. GitHub auth,
// user/pass, etc.).
type User_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Method:
	//	*User_Link_Oidc
	Method isUser_Link_Method `protobuf_oneof:"method"`
}

func (x *User_Link) Reset() {
	*x = User_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Link) ProtoMessage() {}

func (x *User_Link) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Link.ProtoReflect.Descriptor instead.
func (*User_Link) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{6, 0}
}

func (m *User_Link) GetMethod() isUser_Link_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *User_Link) GetOidc() *User_Link_OIDC {
	if x, ok := x.GetMethod().(*User_Link_Oidc); ok {
		return x.Oidc
	}
	return nil
}

type isUser_Link_Method interface {
	isUser_Link_Method()
}

type User_Link_Oidc struct {
	Oidc *User_Link_OIDC `protobuf:"bytes,1,opt,name=oidc,proto3,oneof"`
}

func (*User_Link_Oidc) isUser_Link_Method() {}

type User_Link_OIDC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// issuer and sub claims can be used to uniquely identify a user
	Iss string `protobuf:"bytes,1,opt,name=iss,proto3" json:"iss,omitempty"`
	Sub string `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *User_Link_OIDC) Reset() {
	*x = User_Link_OIDC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Link_OIDC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Link_OIDC) ProtoMessage() {}

func (x *User_Link_OIDC) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Link_OIDC.ProtoReflect.Descriptor instead.
func (*User_Link_OIDC) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *User_Link_OIDC) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

func (x *User_Link_OIDC) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

// Global references the entire server. This is used in some APIs
// as a way to read/write values that are server-global.
type Ref_Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ref_Global) Reset() {
	*x = Ref_Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_Global) ProtoMessage() {}

func (x *Ref_Global) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_Global.ProtoReflect.Descriptor instead.
func (*Ref_Global) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 0}
}

// Application references an application. To uniquely identify an
// application, this must encapsulate the full hierarchy to the application.
type Ref_Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application string `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Project     string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *Ref_Application) Reset() {
	*x = Ref_Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_Application) ProtoMessage() {}

func (x *Ref_Application) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_Application.ProtoReflect.Descriptor instead.
func (*Ref_Application) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Ref_Application) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *Ref_Application) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Project references a project.
type Ref_Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *Ref_Project) Reset() {
	*x = Ref_Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_Project) ProtoMessage() {}

func (x *Ref_Project) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_Project.ProtoReflect.Descriptor instead.
func (*Ref_Project) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Ref_Project) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Workspace references a workspace.
type Ref_Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *Ref_Workspace) Reset() {
	*x = Ref_Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_Workspace) ProtoMessage() {}

func (x *Ref_Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_Workspace.ProtoReflect.Descriptor instead.
func (*Ref_Workspace) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 3}
}

func (x *Ref_Workspace) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

// Component references a component.
type Ref_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Component_Type `protobuf:"varint,1,opt,name=type,proto3,enum=hashicorp.waypoint.Component_Type" json:"type,omitempty"`
	Name string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Ref_Component) Reset() {
	*x = Ref_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_Component) ProtoMessage() {}

func (x *Ref_Component) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_Component.ProtoReflect.Descriptor instead.
func (*Ref_Component) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 4}
}

func (x *Ref_Component) GetType() Component_Type {
	if x != nil {
		return x.Type
	}
	return Component_UNKNOWN
}

func (x *Ref_Component) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Operation references an operation (build, deploy, etc.). This can reference
// an operation in multiple ways so you must use the oneof to choose.
type Ref_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*Ref_Operation_Id
	//	*Ref_Operation_Sequence
	Target isRef_Operation_Target `protobuf_oneof:"target"`
}

func (x *Ref_Operation) Reset() {
	*x = Ref_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_Operation) ProtoMessage() {}

func (x *Ref_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_Operation.ProtoReflect.Descriptor instead.
func (*Ref_Operation) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 5}
}

func (m *Ref_Operation) GetTarget() isRef_Operation_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Ref_Operation) GetId() string {
	if x, ok := x.GetTarget().(*Ref_Operation_Id); ok {
		return x.Id
	}
	return ""
}

func (x *Ref_Operation) GetSequence() *Ref_OperationSeq {
	if x, ok := x.GetTarget().(*Ref_Operation_Sequence); ok {
		return x.Sequence
	}
	return nil
}

type isRef_Operation_Target interface {
	isRef_Operation_Target()
}

type Ref_Operation_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Ref_Operation_Sequence struct {
	Sequence *Ref_OperationSeq `protobuf:"bytes,2,opt,name=sequence,proto3,oneof"`
}

func (*Ref_Operation_Id) isRef_Operation_Target() {}

func (*Ref_Operation_Sequence) isRef_Operation_Target() {}

// OperationSeq references an operation by sequence number.
type Ref_OperationSeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Number      uint64           `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *Ref_OperationSeq) Reset() {
	*x = Ref_OperationSeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_OperationSeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_OperationSeq) ProtoMessage() {}

func (x *Ref_OperationSeq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_OperationSeq.ProtoReflect.Descriptor instead.
func (*Ref_OperationSeq) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 6}
}

func (x *Ref_OperationSeq) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Ref_OperationSeq) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

// Runner references a runner process which executes operations. This
// can reference a runner by any of the more specific types, such as
// by ID. If you want to constrain which runners can be targeted,
// a different ref type should be used.
type Ref_Runner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*Ref_Runner_Any
	//	*Ref_Runner_Id
	Target isRef_Runner_Target `protobuf_oneof:"target"`
}

func (x *Ref_Runner) Reset() {
	*x = Ref_Runner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_Runner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_Runner) ProtoMessage() {}

func (x *Ref_Runner) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_Runner.ProtoReflect.Descriptor instead.
func (*Ref_Runner) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 7}
}

func (m *Ref_Runner) GetTarget() isRef_Runner_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Ref_Runner) GetAny() *Ref_RunnerAny {
	if x, ok := x.GetTarget().(*Ref_Runner_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Ref_Runner) GetId() *Ref_RunnerId {
	if x, ok := x.GetTarget().(*Ref_Runner_Id); ok {
		return x.Id
	}
	return nil
}

type isRef_Runner_Target interface {
	isRef_Runner_Target()
}

type Ref_Runner_Any struct {
	Any *Ref_RunnerAny `protobuf:"bytes,1,opt,name=any,proto3,oneof"`
}

type Ref_Runner_Id struct {
	Id *Ref_RunnerId `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

func (*Ref_Runner_Any) isRef_Runner_Target() {}

func (*Ref_Runner_Id) isRef_Runner_Target() {}

// RunenrId references a runner by ID.
type Ref_RunnerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Ref_RunnerId) Reset() {
	*x = Ref_RunnerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_RunnerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_RunnerId) ProtoMessage() {}

func (x *Ref_RunnerId) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_RunnerId.ProtoReflect.Descriptor instead.
func (*Ref_RunnerId) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 8}
}

func (x *Ref_RunnerId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// RunnerAny will reference any runner.
type Ref_RunnerAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ref_RunnerAny) Reset() {
	*x = Ref_RunnerAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_RunnerAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_RunnerAny) ProtoMessage() {}

func (x *Ref_RunnerAny) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_RunnerAny.ProtoReflect.Descriptor instead.
func (*Ref_RunnerAny) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 9}
}

// User references a user by either ID or username, it is up to the caller.
// This generic form makes it easy for APIs to accept multiple values, whatever
// is easiest for the caller.
type Ref_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//	*Ref_User_Id
	//	*Ref_User_Username
	Ref isRef_User_Ref `protobuf_oneof:"ref"`
}

func (x *Ref_User) Reset() {
	*x = Ref_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_User) ProtoMessage() {}

func (x *Ref_User) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_User.ProtoReflect.Descriptor instead.
func (*Ref_User) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 10}
}

func (m *Ref_User) GetRef() isRef_User_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *Ref_User) GetId() *Ref_UserId {
	if x, ok := x.GetRef().(*Ref_User_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Ref_User) GetUsername() *Ref_UserUsername {
	if x, ok := x.GetRef().(*Ref_User_Username); ok {
		return x.Username
	}
	return nil
}

type isRef_User_Ref interface {
	isRef_User_Ref()
}

type Ref_User_Id struct {
	Id *Ref_UserId `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Ref_User_Username struct {
	Username *Ref_UserUsername `protobuf:"bytes,2,opt,name=username,proto3,oneof"`
}

func (*Ref_User_Id) isRef_User_Ref() {}

func (*Ref_User_Username) isRef_User_Ref() {}

// UserId references a user by their ID (ULID-formatted).
type Ref_UserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Ref_UserId) Reset() {
	*x = Ref_UserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_UserId) ProtoMessage() {}

func (x *Ref_UserId) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_UserId.ProtoReflect.Descriptor instead.
func (*Ref_UserId) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 11}
}

func (x *Ref_UserId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// UserUsername references a user by their username. Note that usernames
// are unique but can be changed at anytime, so for long-living refs
// the ID should be used.
type Ref_UserUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Ref_UserUsername) Reset() {
	*x = Ref_UserUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_UserUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_UserUsername) ProtoMessage() {}

func (x *Ref_UserUsername) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_UserUsername.ProtoReflect.Descriptor instead.
func (*Ref_UserUsername) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 12}
}

func (x *Ref_UserUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// AuthMethod references an auth method.
type Ref_AuthMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Ref_AuthMethod) Reset() {
	*x = Ref_AuthMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_AuthMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_AuthMethod) ProtoMessage() {}

func (x *Ref_AuthMethod) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_AuthMethod.ProtoReflect.Descriptor instead.
func (*Ref_AuthMethod) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 13}
}

func (x *Ref_AuthMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeclaredResource references a declared resource.
type Ref_DeclaredResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Ref_DeclaredResource) Reset() {
	*x = Ref_DeclaredResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_DeclaredResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_DeclaredResource) ProtoMessage() {}

func (x *Ref_DeclaredResource) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_DeclaredResource.ProtoReflect.Descriptor instead.
func (*Ref_DeclaredResource) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{7, 14}
}

func (x *Ref_DeclaredResource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StatusFilter_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//	*StatusFilter_Filter_State
	Filter isStatusFilter_Filter_Filter `protobuf_oneof:"filter"`
}

func (x *StatusFilter_Filter) Reset() {
	*x = StatusFilter_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusFilter_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusFilter_Filter) ProtoMessage() {}

func (x *StatusFilter_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusFilter_Filter.ProtoReflect.Descriptor instead.
func (*StatusFilter_Filter) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{10, 0}
}

func (m *StatusFilter_Filter) GetFilter() isStatusFilter_Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *StatusFilter_Filter) GetState() Status_State {
	if x, ok := x.GetFilter().(*StatusFilter_Filter_State); ok {
		return x.State
	}
	return Status_UNKNOWN
}

type isStatusFilter_Filter_Filter interface {
	isStatusFilter_Filter_Filter()
}

type StatusFilter_Filter_State struct {
	// state will match any status that has the given state.
	State Status_State `protobuf:"varint,2,opt,name=state,proto3,enum=hashicorp.waypoint.Status_State,oneof"`
}

func (*StatusFilter_Filter_State) isStatusFilter_Filter_Filter() {}

type AuthMethod_OIDC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// client ID and secret provided by OIDC provider.
	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// scopes is a list of scopes to request from the provider
	Scopes []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// List of valid audience values to accept login. This can be
	// used to restrict only certain folks in a shared OIDC domain.
	Auds []string `protobuf:"bytes,4,rep,name=auds,proto3" json:"auds,omitempty"`
	// List of allowed redirect URIs, since our redirect URIs
	// are somewhat dynamic (UI for web UI, localhost server for
	// CLI, etc.). This protects against attack since this is not
	// generally recommended.
	AllowedRedirectUris []string `protobuf:"bytes,5,rep,name=allowed_redirect_uris,json=allowedRedirectUris,proto3" json:"allowed_redirect_uris,omitempty"`
	// The signing algorithms supported by the OIDC connect server.
	// If this isn't specified, this will default to RS256 since that
	// should be supported according to the RFC. The string values here
	// should be valid OIDC signing algorithms.
	SigningAlgs []string `protobuf:"bytes,11,rep,name=signing_algs,json=signingAlgs,proto3" json:"signing_algs,omitempty"`
	// Discovery URL endpoint to get other information.
	// Required by OIDC.
	DiscoveryUrl string `protobuf:"bytes,6,opt,name=discovery_url,json=discoveryUrl,proto3" json:"discovery_url,omitempty"`
	// Optional CA certificate chain to validate the discovery URL.
	// Multiple CA certificates can be specified to support easier
	// rotation.
	DiscoveryCaPem []string `protobuf:"bytes,7,rep,name=discovery_ca_pem,json=discoveryCaPem,proto3" json:"discovery_ca_pem,omitempty"`
	// Mapping claims to keys for usage in selectors such as the
	// "access_selector" on the root auth method.
	//
	// claim mappings are available as "value.<name>" and list
	// mappings are available as "list.<name>".
	ClaimMappings     map[string]string `protobuf:"bytes,8,rep,name=claim_mappings,json=claimMappings,proto3" json:"claim_mappings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ListClaimMappings map[string]string `protobuf:"bytes,9,rep,name=list_claim_mappings,json=listClaimMappings,proto3" json:"list_claim_mappings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuthMethod_OIDC) Reset() {
	*x = AuthMethod_OIDC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthMethod_OIDC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthMethod_OIDC) ProtoMessage() {}

func (x *AuthMethod_OIDC) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthMethod_OIDC.ProtoReflect.Descriptor instead.
func (*AuthMethod_OIDC) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{22, 0}
}

func (x *AuthMethod_OIDC) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AuthMethod_OIDC) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *AuthMethod_OIDC) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *AuthMethod_OIDC) GetAuds() []string {
	if x != nil {
		return x.Auds
	}
	return nil
}

func (x *AuthMethod_OIDC) GetAllowedRedirectUris() []string {
	if x != nil {
		return x.AllowedRedirectUris
	}
	return nil
}

func (x *AuthMethod_OIDC) GetSigningAlgs() []string {
	if x != nil {
		return x.SigningAlgs
	}
	return nil
}

func (x *AuthMethod_OIDC) GetDiscoveryUrl() string {
	if x != nil {
		return x.DiscoveryUrl
	}
	return ""
}

func (x *AuthMethod_OIDC) GetDiscoveryCaPem() []string {
	if x != nil {
		return x.DiscoveryCaPem
	}
	return nil
}

func (x *AuthMethod_OIDC) GetClaimMappings() map[string]string {
	if x != nil {
		return x.ClaimMappings
	}
	return nil
}

func (x *AuthMethod_OIDC) GetListClaimMappings() map[string]string {
	if x != nil {
		return x.ListClaimMappings
	}
	return nil
}

type Job_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Build        *Job_BuildResult        `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
	Push         *Job_PushResult         `protobuf:"bytes,2,opt,name=push,proto3" json:"push,omitempty"`
	Deploy       *Job_DeployResult       `protobuf:"bytes,3,opt,name=deploy,proto3" json:"deploy,omitempty"`
	Release      *Job_ReleaseResult      `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	Validate     *Job_ValidateResult     `protobuf:"bytes,5,opt,name=validate,proto3" json:"validate,omitempty"`
	Auth         *Job_AuthResult         `protobuf:"bytes,6,opt,name=auth,proto3" json:"auth,omitempty"`
	Docs         *Job_DocsResult         `protobuf:"bytes,7,opt,name=docs,proto3" json:"docs,omitempty"`
	ConfigSync   *Job_ConfigSyncResult   `protobuf:"bytes,8,opt,name=config_sync,json=configSync,proto3" json:"config_sync,omitempty"`
	Up           *Job_UpResult           `protobuf:"bytes,9,opt,name=up,proto3" json:"up,omitempty"`
	QueueProject *Job_QueueProjectResult `protobuf:"bytes,10,opt,name=queue_project,json=queueProject,proto3" json:"queue_project,omitempty"`
	Poll         *Job_PollResult         `protobuf:"bytes,11,opt,name=poll,proto3" json:"poll,omitempty"`
	StatusReport *Job_StatusReportResult `protobuf:"bytes,12,opt,name=status_report,json=statusReport,proto3" json:"status_report,omitempty"`
	StartTask    *Job_StartTaskResult    `protobuf:"bytes,13,opt,name=start_task,json=startTask,proto3" json:"start_task,omitempty"`
}

func (x *Job_Result) Reset() {
	*x = Job_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Result) ProtoMessage() {}

func (x *Job_Result) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Result.ProtoReflect.Descriptor instead.
func (*Job_Result) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 2}
}

func (x *Job_Result) GetBuild() *Job_BuildResult {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *Job_Result) GetPush() *Job_PushResult {
	if x != nil {
		return x.Push
	}
	return nil
}

func (x *Job_Result) GetDeploy() *Job_DeployResult {
	if x != nil {
		return x.Deploy
	}
	return nil
}

func (x *Job_Result) GetRelease() *Job_ReleaseResult {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *Job_Result) GetValidate() *Job_ValidateResult {
	if x != nil {
		return x.Validate
	}
	return nil
}

func (x *Job_Result) GetAuth() *Job_AuthResult {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Job_Result) GetDocs() *Job_DocsResult {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Job_Result) GetConfigSync() *Job_ConfigSyncResult {
	if x != nil {
		return x.ConfigSync
	}
	return nil
}

func (x *Job_Result) GetUp() *Job_UpResult {
	if x != nil {
		return x.Up
	}
	return nil
}

func (x *Job_Result) GetQueueProject() *Job_QueueProjectResult {
	if x != nil {
		return x.QueueProject
	}
	return nil
}

func (x *Job_Result) GetPoll() *Job_PollResult {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *Job_Result) GetStatusReport() *Job_StatusReportResult {
	if x != nil {
		return x.StatusReport
	}
	return nil
}

func (x *Job_Result) GetStartTask() *Job_StartTaskResult {
	if x != nil {
		return x.StartTask
	}
	return nil
}

type Job_DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*Job_DataSource_Local
	//	*Job_DataSource_Git
	Source isJob_DataSource_Source `protobuf_oneof:"source"`
}

func (x *Job_DataSource) Reset() {
	*x = Job_DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_DataSource) ProtoMessage() {}

func (x *Job_DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_DataSource.ProtoReflect.Descriptor instead.
func (*Job_DataSource) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 3}
}

func (m *Job_DataSource) GetSource() isJob_DataSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Job_DataSource) GetLocal() *Job_Local {
	if x, ok := x.GetSource().(*Job_DataSource_Local); ok {
		return x.Local
	}
	return nil
}

func (x *Job_DataSource) GetGit() *Job_Git {
	if x, ok := x.GetSource().(*Job_DataSource_Git); ok {
		return x.Git
	}
	return nil
}

type isJob_DataSource_Source interface {
	isJob_DataSource_Source()
}

type Job_DataSource_Local struct {
	// local means the runner has access to the data locally and will
	// know what to do. This is primarily only useful if the target_runner
	// is a specific runner and should not be used by any runner unless your
	// runners are configured to have access to the proper data.
	Local *Job_Local `protobuf:"bytes,1,opt,name=local,proto3,oneof"`
}

type Job_DataSource_Git struct {
	// git will check out the data from a Git repository.
	Git *Job_Git `protobuf:"bytes,2,opt,name=git,proto3,oneof"`
}

func (*Job_DataSource_Local) isJob_DataSource_Source() {}

func (*Job_DataSource_Git) isJob_DataSource_Source() {}

type Job_Local struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job_Local) Reset() {
	*x = Job_Local{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Local) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Local) ProtoMessage() {}

func (x *Job_Local) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Local.ProtoReflect.Descriptor instead.
func (*Job_Local) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 4}
}

type Job_Git struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url of the repository to clone. Local paths are not allowed.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// a ref to checkout. If this isn't specified, then the default
	// ref that is cloned from the URL above will be used.
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// path is a subdirectory within the checked out repository to
	// go into for the configuration. This must be a relative path
	// and may not contain ".."
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// This setting only takes effect if both "path" is true AND the
	// Git polling is enabled. Under those conditions, if this option
	// is true, then only changes in Git commits within the "path" will
	// trigger a deploy. Changes outside the "path" will be ignored.
	IgnoreChangesOutsidePath bool `protobuf:"varint,10,opt,name=ignore_changes_outside_path,json=ignoreChangesOutsidePath,proto3" json:"ignore_changes_outside_path,omitempty"`
	// auth is the auth mechanism to use for this data source. This is optional.
	// If this isn't set, then the data source will attempt to clone
	// without setting any explicit auth. This usually picks up machine
	// settings like ssh config files and so on if they exist.
	//
	// Note that any auth settings set here are stored in the server and
	// may NOT be encrypted. If you want increased security, we recommend
	// using auth baked into the machine running Waypoint.
	//
	// Types that are assignable to Auth:
	//	*Job_Git_Basic_
	//	*Job_Git_Ssh
	Auth isJob_Git_Auth `protobuf_oneof:"auth"`
}

func (x *Job_Git) Reset() {
	*x = Job_Git{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Git) ProtoMessage() {}

func (x *Job_Git) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Git.ProtoReflect.Descriptor instead.
func (*Job_Git) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 5}
}

func (x *Job_Git) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Job_Git) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Job_Git) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Job_Git) GetIgnoreChangesOutsidePath() bool {
	if x != nil {
		return x.IgnoreChangesOutsidePath
	}
	return false
}

func (m *Job_Git) GetAuth() isJob_Git_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (x *Job_Git) GetBasic() *Job_Git_Basic {
	if x, ok := x.GetAuth().(*Job_Git_Basic_); ok {
		return x.Basic
	}
	return nil
}

func (x *Job_Git) GetSsh() *Job_Git_SSH {
	if x, ok := x.GetAuth().(*Job_Git_Ssh); ok {
		return x.Ssh
	}
	return nil
}

type isJob_Git_Auth interface {
	isJob_Git_Auth()
}

type Job_Git_Basic_ struct {
	Basic *Job_Git_Basic `protobuf:"bytes,4,opt,name=basic,proto3,oneof"`
}

type Job_Git_Ssh struct {
	Ssh *Job_Git_SSH `protobuf:"bytes,5,opt,name=ssh,proto3,oneof"`
}

func (*Job_Git_Basic_) isJob_Git_Auth() {}

func (*Job_Git_Ssh) isJob_Git_Auth() {}

// Noop operations do nothing. This is primarily used for testing.
// This operation will still download the data from the data source.
// A noop may be useful outside of testing to verify a runner is
// executing properly or can access data properly.
type Job_Noop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job_Noop) Reset() {
	*x = Job_Noop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Noop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Noop) ProtoMessage() {}

func (x *Job_Noop) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Noop.ProtoReflect.Descriptor instead.
func (*Job_Noop) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 6}
}

// UpOp runs the "waypoint up" logic: it does a build (with push),
// deploy, and release all in one. The results for each child operation
// will be set directly on the Release message (i.e. "build" will be
// populated in addition to "up").
type Job_UpOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Options for the release stage. The "deployment" field in this will
	// be ignored since we'll always use the deployment from the deploy
	// step in Up.
	Release *Job_ReleaseOp `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *Job_UpOp) Reset() {
	*x = Job_UpOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_UpOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_UpOp) ProtoMessage() {}

func (x *Job_UpOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_UpOp.ProtoReflect.Descriptor instead.
func (*Job_UpOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 7}
}

func (x *Job_UpOp) GetRelease() *Job_ReleaseOp {
	if x != nil {
		return x.Release
	}
	return nil
}

// UpResult is the result of an UpOp. Because "up" calls other operations,
// the Result message will set the build, deploy, push, and release results.
type Job_UpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// release_url is the equivalent of Release.Url. This is the URL that
	// the release plugin generates directly from the platform. For example,
	// on AWS this might be an ALB addr, on K8S this might be a load balancer
	// addr, etc.
	//
	// This can be empty if the release plugin does not support getting a URL.
	ReleaseUrl string `protobuf:"bytes,1,opt,name=release_url,json=releaseUrl,proto3" json:"release_url,omitempty"`
	// app_url is the HashiCorp URL service URL for the entire application.
	// Example: mistakenly-crucial-malamute.waypoint.run. If there are multiple
	// hostnames registered for the application, this always picks the first one.
	//
	// This can be blank if the URL service is disabled or errored.
	AppUrl string `protobuf:"bytes,2,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// deploy_url is the HashiCorp URL service URL for this specific deploy.
	// Example: mistakenly-crucial-malamute--v1.waypoint.run. Similar to app_url,
	// if there are multiple registered hostnames for the application, this
	// always picks the first one.
	//
	// This can be blank if the URL service is disabled or errored.
	DeployUrl string `protobuf:"bytes,3,opt,name=deploy_url,json=deployUrl,proto3" json:"deploy_url,omitempty"`
}

func (x *Job_UpResult) Reset() {
	*x = Job_UpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_UpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_UpResult) ProtoMessage() {}

func (x *Job_UpResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_UpResult.ProtoReflect.Descriptor instead.
func (*Job_UpResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 8}
}

func (x *Job_UpResult) GetReleaseUrl() string {
	if x != nil {
		return x.ReleaseUrl
	}
	return ""
}

func (x *Job_UpResult) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *Job_UpResult) GetDeployUrl() string {
	if x != nil {
		return x.DeployUrl
	}
	return ""
}

// ValidateOp validates various aspects of a configuration.
type Job_ValidateOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job_ValidateOp) Reset() {
	*x = Job_ValidateOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_ValidateOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_ValidateOp) ProtoMessage() {}

func (x *Job_ValidateOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_ValidateOp.ProtoReflect.Descriptor instead.
func (*Job_ValidateOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 9}
}

type Job_ValidateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job_ValidateResult) Reset() {
	*x = Job_ValidateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_ValidateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_ValidateResult) ProtoMessage() {}

func (x *Job_ValidateResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_ValidateResult.ProtoReflect.Descriptor instead.
func (*Job_ValidateResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 10}
}

// AuthOp is the configuration to authenticate any plugins.
type Job_AuthOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if true, auth will only be checked but not attempted. Currently
	// this must ALWAYS be true. Only authentication checking is supported.
	CheckOnly bool `protobuf:"varint,1,opt,name=check_only,json=checkOnly,proto3" json:"check_only,omitempty"`
	// if set, only the component matching this reference will be authed.
	// If this component doesn't exist, an error will be returned. If this is
	// unset, all components wll be authed.
	Component *Ref_Component `protobuf:"bytes,2,opt,name=component,proto3" json:"component,omitempty"`
}

func (x *Job_AuthOp) Reset() {
	*x = Job_AuthOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_AuthOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_AuthOp) ProtoMessage() {}

func (x *Job_AuthOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_AuthOp.ProtoReflect.Descriptor instead.
func (*Job_AuthOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 11}
}

func (x *Job_AuthOp) GetCheckOnly() bool {
	if x != nil {
		return x.CheckOnly
	}
	return false
}

func (x *Job_AuthOp) GetComponent() *Ref_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

type Job_AuthResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// results are the list of components that were checked
	Results []*Job_AuthResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *Job_AuthResult) Reset() {
	*x = Job_AuthResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_AuthResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_AuthResult) ProtoMessage() {}

func (x *Job_AuthResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_AuthResult.ProtoReflect.Descriptor instead.
func (*Job_AuthResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 12}
}

func (x *Job_AuthResult) GetResults() []*Job_AuthResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type Job_BuildOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Don't push the build to any configured registry.
	DisablePush bool `protobuf:"varint,1,opt,name=disable_push,json=disablePush,proto3" json:"disable_push,omitempty"`
}

func (x *Job_BuildOp) Reset() {
	*x = Job_BuildOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_BuildOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_BuildOp) ProtoMessage() {}

func (x *Job_BuildOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_BuildOp.ProtoReflect.Descriptor instead.
func (*Job_BuildOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 13}
}

func (x *Job_BuildOp) GetDisablePush() bool {
	if x != nil {
		return x.DisablePush
	}
	return false
}

type Job_BuildResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resulting build
	Build *Build `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
	// The artifact that was pushed. This will be nil if DisablePush was set.
	Push *PushedArtifact `protobuf:"bytes,2,opt,name=push,proto3" json:"push,omitempty"`
}

func (x *Job_BuildResult) Reset() {
	*x = Job_BuildResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_BuildResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_BuildResult) ProtoMessage() {}

func (x *Job_BuildResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_BuildResult.ProtoReflect.Descriptor instead.
func (*Job_BuildResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 14}
}

func (x *Job_BuildResult) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *Job_BuildResult) GetPush() *PushedArtifact {
	if x != nil {
		return x.Push
	}
	return nil
}

type Job_PushOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Build to push
	Build *Build `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
}

func (x *Job_PushOp) Reset() {
	*x = Job_PushOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_PushOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_PushOp) ProtoMessage() {}

func (x *Job_PushOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_PushOp.ProtoReflect.Descriptor instead.
func (*Job_PushOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 15}
}

func (x *Job_PushOp) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

type Job_PushResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifact *PushedArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *Job_PushResult) Reset() {
	*x = Job_PushResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_PushResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_PushResult) ProtoMessage() {}

func (x *Job_PushResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_PushResult.ProtoReflect.Descriptor instead.
func (*Job_PushResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 16}
}

func (x *Job_PushResult) GetArtifact() *PushedArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type Job_DeployOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Artifact to deploy
	Artifact *PushedArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *Job_DeployOp) Reset() {
	*x = Job_DeployOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_DeployOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_DeployOp) ProtoMessage() {}

func (x *Job_DeployOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_DeployOp.ProtoReflect.Descriptor instead.
func (*Job_DeployOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 17}
}

func (x *Job_DeployOp) GetArtifact() *PushedArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type Job_DeployResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *Job_DeployResult) Reset() {
	*x = Job_DeployResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_DeployResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_DeployResult) ProtoMessage() {}

func (x *Job_DeployResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_DeployResult.ProtoReflect.Descriptor instead.
func (*Job_DeployResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 18}
}

func (x *Job_DeployResult) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

// Used to start a platform's exec function within a runner. This is only used
// there are no long running instances for a deployment and can fail if the
// platform plugin does not provide an exec function.
type Job_ExecOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id to assign the virtual instance created
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The deployment to create the exec session context. Ie, what
	// application code will be available within the exec session.
	Deployment *Deployment `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *Job_ExecOp) Reset() {
	*x = Job_ExecOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_ExecOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_ExecOp) ProtoMessage() {}

func (x *Job_ExecOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_ExecOp.ProtoReflect.Descriptor instead.
func (*Job_ExecOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 19}
}

func (x *Job_ExecOp) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Job_ExecOp) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type Job_ExecResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job_ExecResult) Reset() {
	*x = Job_ExecResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_ExecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_ExecResult) ProtoMessage() {}

func (x *Job_ExecResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_ExecResult.ProtoReflect.Descriptor instead.
func (*Job_ExecResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 20}
}

// Used to start a platform's log function within a runner. API users
// interested in viewing logs should use the GetLogStream API. This
// is only meant for implementing custom log handling by plugins.
type Job_LogsOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id to assign the virtual instance created
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The deployment to create the exec session context. Ie, what
	// application code will be available within the exec session.
	Deployment *Deployment `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Indicates the time horizon that log entries must be beyond for them
	// to be emitted.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The maximum of log entries to be output.
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Job_LogsOp) Reset() {
	*x = Job_LogsOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_LogsOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_LogsOp) ProtoMessage() {}

func (x *Job_LogsOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_LogsOp.ProtoReflect.Descriptor instead.
func (*Job_LogsOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 21}
}

func (x *Job_LogsOp) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Job_LogsOp) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Job_LogsOp) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Job_LogsOp) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Job_DestroyOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target is what to destroy in this operation.
	//
	// Types that are assignable to Target:
	//	*Job_DestroyOp_Workspace
	//	*Job_DestroyOp_Deployment
	Target isJob_DestroyOp_Target `protobuf_oneof:"target"`
}

func (x *Job_DestroyOp) Reset() {
	*x = Job_DestroyOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_DestroyOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_DestroyOp) ProtoMessage() {}

func (x *Job_DestroyOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_DestroyOp.ProtoReflect.Descriptor instead.
func (*Job_DestroyOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 22}
}

func (m *Job_DestroyOp) GetTarget() isJob_DestroyOp_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Job_DestroyOp) GetWorkspace() *emptypb.Empty {
	if x, ok := x.GetTarget().(*Job_DestroyOp_Workspace); ok {
		return x.Workspace
	}
	return nil
}

func (x *Job_DestroyOp) GetDeployment() *Deployment {
	if x, ok := x.GetTarget().(*Job_DestroyOp_Deployment); ok {
		return x.Deployment
	}
	return nil
}

type isJob_DestroyOp_Target interface {
	isJob_DestroyOp_Target()
}

type Job_DestroyOp_Workspace struct {
	// workspace will delete the app in the workspace that the job
	// is targeting.
	Workspace *emptypb.Empty `protobuf:"bytes,1,opt,name=workspace,proto3,oneof"`
}

type Job_DestroyOp_Deployment struct {
	Deployment *Deployment `protobuf:"bytes,2,opt,name=deployment,proto3,oneof"`
}

func (*Job_DestroyOp_Workspace) isJob_DestroyOp_Target() {}

func (*Job_DestroyOp_Deployment) isJob_DestroyOp_Target() {}

type Job_ReleaseOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Prune settings. This will prune the deployments that aren't released.
	Prune bool `protobuf:"varint,2,opt,name=prune,proto3" json:"prune,omitempty"`
	// This sets the number of unreleased deployments to retain when pruning.
	// This only has an effect if "prune_retain_override" is true. If that
	// is false, then pruning uses the default behavior (retain 2).
	PruneRetain         int32 `protobuf:"varint,3,opt,name=prune_retain,json=pruneRetain,proto3" json:"prune_retain,omitempty"`
	PruneRetainOverride bool  `protobuf:"varint,4,opt,name=prune_retain_override,json=pruneRetainOverride,proto3" json:"prune_retain_override,omitempty"`
}

func (x *Job_ReleaseOp) Reset() {
	*x = Job_ReleaseOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_ReleaseOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_ReleaseOp) ProtoMessage() {}

func (x *Job_ReleaseOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_ReleaseOp.ProtoReflect.Descriptor instead.
func (*Job_ReleaseOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 23}
}

func (x *Job_ReleaseOp) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Job_ReleaseOp) GetPrune() bool {
	if x != nil {
		return x.Prune
	}
	return false
}

func (x *Job_ReleaseOp) GetPruneRetain() int32 {
	if x != nil {
		return x.PruneRetain
	}
	return 0
}

func (x *Job_ReleaseOp) GetPruneRetainOverride() bool {
	if x != nil {
		return x.PruneRetainOverride
	}
	return false
}

type Job_ReleaseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The release that was just created. If the release operation was a noop,
	// for example if the target deployment shares a generation with the
	// previously released deployment, then this may be an existing release.
	// Callers can verify by checking if the target deployment changed
	// or not.
	Release *Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *Job_ReleaseResult) Reset() {
	*x = Job_ReleaseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_ReleaseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_ReleaseResult) ProtoMessage() {}

func (x *Job_ReleaseResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_ReleaseResult.ProtoReflect.Descriptor instead.
func (*Job_ReleaseResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 24}
}

func (x *Job_ReleaseResult) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

// TaskPluginParams contains the information about a specific task plugin
// that is used by both StartTask and StopTask
type Job_TaskPluginParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plugin type to invoke for the task plugin.
	PluginType string `protobuf:"bytes,2,opt,name=plugin_type,json=pluginType,proto3" json:"plugin_type,omitempty"`
	// The configuration information for the task. This is HCL that is
	// decoded to figure out the task plugin and then provide that
	// task plugin with configuration
	HclConfig []byte         `protobuf:"bytes,3,opt,name=hcl_config,json=hclConfig,proto3" json:"hcl_config,omitempty"`
	HclFormat Project_Format `protobuf:"varint,4,opt,name=hcl_format,json=hclFormat,proto3,enum=hashicorp.waypoint.Project_Format" json:"hcl_format,omitempty"`
}

func (x *Job_TaskPluginParams) Reset() {
	*x = Job_TaskPluginParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_TaskPluginParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_TaskPluginParams) ProtoMessage() {}

func (x *Job_TaskPluginParams) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_TaskPluginParams.ProtoReflect.Descriptor instead.
func (*Job_TaskPluginParams) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 25}
}

func (x *Job_TaskPluginParams) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

func (x *Job_TaskPluginParams) GetHclConfig() []byte {
	if x != nil {
		return x.HclConfig
	}
	return nil
}

func (x *Job_TaskPluginParams) GetHclFormat() Project_Format {
	if x != nil {
		return x.HclFormat
	}
	return Project_HCL
}

type Job_StartTaskLaunchOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The info to use to create the task
	Info *TaskLaunchInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// Params is needed to spawn the plugin so we can send it the start.
	Params *Job_TaskPluginParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *Job_StartTaskLaunchOp) Reset() {
	*x = Job_StartTaskLaunchOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_StartTaskLaunchOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_StartTaskLaunchOp) ProtoMessage() {}

func (x *Job_StartTaskLaunchOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_StartTaskLaunchOp.ProtoReflect.Descriptor instead.
func (*Job_StartTaskLaunchOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 26}
}

func (x *Job_StartTaskLaunchOp) GetInfo() *TaskLaunchInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Job_StartTaskLaunchOp) GetParams() *Job_TaskPluginParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type Job_StartTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state of the create task, used to identify it later.
	State *anypb.Any `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Job_StartTaskResult) Reset() {
	*x = Job_StartTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_StartTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_StartTaskResult) ProtoMessage() {}

func (x *Job_StartTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_StartTaskResult.ProtoReflect.Descriptor instead.
func (*Job_StartTaskResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 27}
}

func (x *Job_StartTaskResult) GetState() *anypb.Any {
	if x != nil {
		return x.State
	}
	return nil
}

type Job_StopTaskLaunchOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state returned by the start operation.
	State *anypb.Any `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// Params is needed to spawn the plugin so we can send it the stop.
	Params *Job_TaskPluginParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *Job_StopTaskLaunchOp) Reset() {
	*x = Job_StopTaskLaunchOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_StopTaskLaunchOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_StopTaskLaunchOp) ProtoMessage() {}

func (x *Job_StopTaskLaunchOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_StopTaskLaunchOp.ProtoReflect.Descriptor instead.
func (*Job_StopTaskLaunchOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 28}
}

func (x *Job_StopTaskLaunchOp) GetState() *anypb.Any {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Job_StopTaskLaunchOp) GetParams() *Job_TaskPluginParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type Job_StatusReportOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*Job_StatusReportOp_Deployment
	//	*Job_StatusReportOp_Release
	Target isJob_StatusReportOp_Target `protobuf_oneof:"target"`
}

func (x *Job_StatusReportOp) Reset() {
	*x = Job_StatusReportOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_StatusReportOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_StatusReportOp) ProtoMessage() {}

func (x *Job_StatusReportOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_StatusReportOp.ProtoReflect.Descriptor instead.
func (*Job_StatusReportOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 29}
}

func (m *Job_StatusReportOp) GetTarget() isJob_StatusReportOp_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Job_StatusReportOp) GetDeployment() *Deployment {
	if x, ok := x.GetTarget().(*Job_StatusReportOp_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (x *Job_StatusReportOp) GetRelease() *Release {
	if x, ok := x.GetTarget().(*Job_StatusReportOp_Release); ok {
		return x.Release
	}
	return nil
}

type isJob_StatusReportOp_Target interface {
	isJob_StatusReportOp_Target()
}

type Job_StatusReportOp_Deployment struct {
	// The deployment that should be associated with this status report
	// operation
	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3,oneof"`
}

type Job_StatusReportOp_Release struct {
	// The release that should be associated with this status report
	// operation
	Release *Release `protobuf:"bytes,2,opt,name=release,proto3,oneof"`
}

func (*Job_StatusReportOp_Deployment) isJob_StatusReportOp_Target() {}

func (*Job_StatusReportOp_Release) isJob_StatusReportOp_Target() {}

type Job_StatusReportResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status report that was just created
	StatusReport *StatusReport `protobuf:"bytes,1,opt,name=status_report,json=statusReport,proto3" json:"status_report,omitempty"`
}

func (x *Job_StatusReportResult) Reset() {
	*x = Job_StatusReportResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_StatusReportResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_StatusReportResult) ProtoMessage() {}

func (x *Job_StatusReportResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_StatusReportResult.ProtoReflect.Descriptor instead.
func (*Job_StatusReportResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 30}
}

func (x *Job_StatusReportResult) GetStatusReport() *StatusReport {
	if x != nil {
		return x.StatusReport
	}
	return nil
}

type Job_DocsOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job_DocsOp) Reset() {
	*x = Job_DocsOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_DocsOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_DocsOp) ProtoMessage() {}

func (x *Job_DocsOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_DocsOp.ProtoReflect.Descriptor instead.
func (*Job_DocsOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 31}
}

type Job_DocsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// results are the list of components that were checked
	Results []*Job_DocsResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *Job_DocsResult) Reset() {
	*x = Job_DocsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_DocsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_DocsResult) ProtoMessage() {}

func (x *Job_DocsResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_DocsResult.ProtoReflect.Descriptor instead.
func (*Job_DocsResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 32}
}

func (x *Job_DocsResult) GetResults() []*Job_DocsResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type Job_ConfigSyncOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job_ConfigSyncOp) Reset() {
	*x = Job_ConfigSyncOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_ConfigSyncOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_ConfigSyncOp) ProtoMessage() {}

func (x *Job_ConfigSyncOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_ConfigSyncOp.ProtoReflect.Descriptor instead.
func (*Job_ConfigSyncOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 33}
}

type Job_ConfigSyncResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job_ConfigSyncResult) Reset() {
	*x = Job_ConfigSyncResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_ConfigSyncResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_ConfigSyncResult) ProtoMessage() {}

func (x *Job_ConfigSyncResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_ConfigSyncResult.ProtoReflect.Descriptor instead.
func (*Job_ConfigSyncResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 34}
}

// PollOp triggers a poll action for a project. The job will fail if there
// is no data source configured for the project.
//
// A poll operation can be queued even if a project has polling disabled.
// If a project has polling enabled, a manually queued poll operation will
// have no effect on the poll timer or intervals.
type Job_PollOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Job_PollOp) Reset() {
	*x = Job_PollOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_PollOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_PollOp) ProtoMessage() {}

func (x *Job_PollOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_PollOp.ProtoReflect.Descriptor instead.
func (*Job_PollOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 35}
}

type Job_PollResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field will be non-empty if and only if polling resulted in
	// new data that needs to be deployed. This will be the ID of the job
	// that queues the "up" operation.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// If the poll resulted in new data, old_ref and new_ref will contain
	// the two refs that were currently in use. These are nil if the polling
	// didn't find new data.
	OldRef *Job_DataSource_Ref `protobuf:"bytes,2,opt,name=old_ref,json=oldRef,proto3" json:"old_ref,omitempty"`
	NewRef *Job_DataSource_Ref `protobuf:"bytes,3,opt,name=new_ref,json=newRef,proto3" json:"new_ref,omitempty"`
}

func (x *Job_PollResult) Reset() {
	*x = Job_PollResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_PollResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_PollResult) ProtoMessage() {}

func (x *Job_PollResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_PollResult.ProtoReflect.Descriptor instead.
func (*Job_PollResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 36}
}

func (x *Job_PollResult) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Job_PollResult) GetOldRef() *Job_DataSource_Ref {
	if x != nil {
		return x.OldRef
	}
	return nil
}

func (x *Job_PollResult) GetNewRef() *Job_DataSource_Ref {
	if x != nil {
		return x.NewRef
	}
	return nil
}

// QueueProjectOp queues a job for all applications in a project. The
// applications queued may not directly align with what can be found in
// ListProjects because the application list will be based on the config
// and not the database.
type Job_QueueProjectOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The template for the job to queue for each application. The "application"
	// field will be overwritten for each application. All other fields are
	// untouched.
	JobTemplate *Job `protobuf:"bytes,1,opt,name=job_template,json=jobTemplate,proto3" json:"job_template,omitempty"`
}

func (x *Job_QueueProjectOp) Reset() {
	*x = Job_QueueProjectOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_QueueProjectOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_QueueProjectOp) ProtoMessage() {}

func (x *Job_QueueProjectOp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_QueueProjectOp.ProtoReflect.Descriptor instead.
func (*Job_QueueProjectOp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 37}
}

func (x *Job_QueueProjectOp) GetJobTemplate() *Job {
	if x != nil {
		return x.JobTemplate
	}
	return nil
}

type Job_QueueProjectResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All applications that had jobs queued. This may be empty even if the
	// job was a success. If this is empty, it means that no applications were
	// found to have jobs queued.
	Applications []*Job_QueueProjectResult_Application `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications,omitempty"`
}

func (x *Job_QueueProjectResult) Reset() {
	*x = Job_QueueProjectResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_QueueProjectResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_QueueProjectResult) ProtoMessage() {}

func (x *Job_QueueProjectResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_QueueProjectResult.ProtoReflect.Descriptor instead.
func (*Job_QueueProjectResult) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 38}
}

func (x *Job_QueueProjectResult) GetApplications() []*Job_QueueProjectResult_Application {
	if x != nil {
		return x.Applications
	}
	return nil
}

// Ref is a reference to the exact set of data used by a data source.
type Job_DataSource_Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//	*Job_DataSource_Ref_Unknown
	//	*Job_DataSource_Ref_Git
	Ref isJob_DataSource_Ref_Ref `protobuf_oneof:"ref"`
}

func (x *Job_DataSource_Ref) Reset() {
	*x = Job_DataSource_Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_DataSource_Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_DataSource_Ref) ProtoMessage() {}

func (x *Job_DataSource_Ref) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_DataSource_Ref.ProtoReflect.Descriptor instead.
func (*Job_DataSource_Ref) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 3, 0}
}

func (m *Job_DataSource_Ref) GetRef() isJob_DataSource_Ref_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *Job_DataSource_Ref) GetUnknown() *emptypb.Empty {
	if x, ok := x.GetRef().(*Job_DataSource_Ref_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *Job_DataSource_Ref) GetGit() *Job_Git_Ref {
	if x, ok := x.GetRef().(*Job_DataSource_Ref_Git); ok {
		return x.Git
	}
	return nil
}

type isJob_DataSource_Ref_Ref interface {
	isJob_DataSource_Ref_Ref()
}

type Job_DataSource_Ref_Unknown struct {
	// unknown is set if the ref is not known or not supported, such
	// as for local data sources where we have no way to uniquely identify.
	Unknown *emptypb.Empty `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type Job_DataSource_Ref_Git struct {
	// git commit
	Git *Job_Git_Ref `protobuf:"bytes,2,opt,name=git,proto3,oneof"`
}

func (*Job_DataSource_Ref_Unknown) isJob_DataSource_Ref_Ref() {}

func (*Job_DataSource_Ref_Git) isJob_DataSource_Ref_Ref() {}

// Basic auth
type Job_Git_Basic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username for authentication. If using access token based auth
	// for something like GitHub, this can be any non-empty string.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// password for authentication. If using access token based auth
	// for GitHub, this should be the access token.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Job_Git_Basic) Reset() {
	*x = Job_Git_Basic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Git_Basic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Git_Basic) ProtoMessage() {}

func (x *Job_Git_Basic) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Git_Basic.ProtoReflect.Descriptor instead.
func (*Job_Git_Basic) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 5, 0}
}

func (x *Job_Git_Basic) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Job_Git_Basic) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// SSH private key auth
type Job_Git_SSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// private_key_pem is a PEM-encoded private key.
	PrivateKeyPem []byte `protobuf:"bytes,1,opt,name=private_key_pem,json=privateKeyPem,proto3" json:"private_key_pem,omitempty"`
	// password is an optional password for decoding the private key.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// user is the SSH user to use when cloning. This will default to
	// "git" if not specified.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Job_Git_SSH) Reset() {
	*x = Job_Git_SSH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Git_SSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Git_SSH) ProtoMessage() {}

func (x *Job_Git_SSH) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Git_SSH.ProtoReflect.Descriptor instead.
func (*Job_Git_SSH) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 5, 1}
}

func (x *Job_Git_SSH) GetPrivateKeyPem() []byte {
	if x != nil {
		return x.PrivateKeyPem
	}
	return nil
}

func (x *Job_Git_SSH) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Job_Git_SSH) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// Ref is used to populate DataSource.Ref
type Job_Git_Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commit is the full commit hash
	Commit string `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// timestamp is the timestamp of the commit
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Job_Git_Ref) Reset() {
	*x = Job_Git_Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Git_Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Git_Ref) ProtoMessage() {}

func (x *Job_Git_Ref) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Git_Ref.ProtoReflect.Descriptor instead.
func (*Job_Git_Ref) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 5, 2}
}

func (x *Job_Git_Ref) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Job_Git_Ref) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Job_AuthResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// component that was checked
	Component *Component `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// result of the auth check. If the component didn't implement the
	// auth interface this will be set to true. You can check for interface
	// implementation using auth_supported. If auth is attempted, the auth
	// operation will recheck the status and this value will reflect the
	// check post-auth attempt. You can use this to verify if the auth
	// succeeded.
	CheckResult bool           `protobuf:"varint,2,opt,name=check_result,json=checkResult,proto3" json:"check_result,omitempty"`
	CheckError  *status.Status `protobuf:"bytes,3,opt,name=check_error,json=checkError,proto3" json:"check_error,omitempty"`
	// this is true if the component was authenticated using the Auth
	// callback. If false, then no attempt was made to authenticate. This
	// can be on purpose for example if "check_only" is set to true on
	// the op.
	AuthCompleted bool           `protobuf:"varint,4,opt,name=auth_completed,json=authCompleted,proto3" json:"auth_completed,omitempty"`
	AuthError     *status.Status `protobuf:"bytes,5,opt,name=auth_error,json=authError,proto3" json:"auth_error,omitempty"`
	// auth supported is true if this component implemented the auth
	// interface.
	AuthSupported bool `protobuf:"varint,6,opt,name=auth_supported,json=authSupported,proto3" json:"auth_supported,omitempty"`
}

func (x *Job_AuthResult_Result) Reset() {
	*x = Job_AuthResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_AuthResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_AuthResult_Result) ProtoMessage() {}

func (x *Job_AuthResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_AuthResult_Result.ProtoReflect.Descriptor instead.
func (*Job_AuthResult_Result) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 12, 0}
}

func (x *Job_AuthResult_Result) GetComponent() *Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *Job_AuthResult_Result) GetCheckResult() bool {
	if x != nil {
		return x.CheckResult
	}
	return false
}

func (x *Job_AuthResult_Result) GetCheckError() *status.Status {
	if x != nil {
		return x.CheckError
	}
	return nil
}

func (x *Job_AuthResult_Result) GetAuthCompleted() bool {
	if x != nil {
		return x.AuthCompleted
	}
	return false
}

func (x *Job_AuthResult_Result) GetAuthError() *status.Status {
	if x != nil {
		return x.AuthError
	}
	return nil
}

func (x *Job_AuthResult_Result) GetAuthSupported() bool {
	if x != nil {
		return x.AuthSupported
	}
	return false
}

type Job_DocsResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// component that the docs are for
	Component *Component     `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	Docs      *Documentation `protobuf:"bytes,2,opt,name=docs,proto3" json:"docs,omitempty"`
}

func (x *Job_DocsResult_Result) Reset() {
	*x = Job_DocsResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_DocsResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_DocsResult_Result) ProtoMessage() {}

func (x *Job_DocsResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_DocsResult_Result.ProtoReflect.Descriptor instead.
func (*Job_DocsResult_Result) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 32, 0}
}

func (x *Job_DocsResult_Result) GetComponent() *Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *Job_DocsResult_Result) GetDocs() *Documentation {
	if x != nil {
		return x.Docs
	}
	return nil
}

type Job_QueueProjectResult_Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Application that was queued.
	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// ID of the job that was queued.
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *Job_QueueProjectResult_Application) Reset() {
	*x = Job_QueueProjectResult_Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_QueueProjectResult_Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_QueueProjectResult_Application) ProtoMessage() {}

func (x *Job_QueueProjectResult_Application) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_QueueProjectResult_Application.ProtoReflect.Descriptor instead.
func (*Job_QueueProjectResult_Application) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{40, 38, 0}
}

func (x *Job_QueueProjectResult_Application) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Job_QueueProjectResult_Application) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type Documentation_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Synopsis string `protobuf:"bytes,2,opt,name=synopsis,proto3" json:"synopsis,omitempty"`
	Summary  string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	Optional bool   `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty"`
	EnvVar   string `protobuf:"bytes,5,opt,name=env_var,json=envVar,proto3" json:"env_var,omitempty"`
	Type     string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Default  string `protobuf:"bytes,7,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *Documentation_Field) Reset() {
	*x = Documentation_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documentation_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documentation_Field) ProtoMessage() {}

func (x *Documentation_Field) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documentation_Field.ProtoReflect.Descriptor instead.
func (*Documentation_Field) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{41, 1}
}

func (x *Documentation_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Documentation_Field) GetSynopsis() string {
	if x != nil {
		return x.Synopsis
	}
	return ""
}

func (x *Documentation_Field) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Documentation_Field) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *Documentation_Field) GetEnvVar() string {
	if x != nil {
		return x.EnvVar
	}
	return ""
}

func (x *Documentation_Field) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Documentation_Field) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

type Documentation_Mapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input       string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output      string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Documentation_Mapper) Reset() {
	*x = Documentation_Mapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documentation_Mapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documentation_Mapper) ProtoMessage() {}

func (x *Documentation_Mapper) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documentation_Mapper.ProtoReflect.Descriptor instead.
func (*Documentation_Mapper) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{41, 2}
}

func (x *Documentation_Mapper) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *Documentation_Mapper) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *Documentation_Mapper) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetJobStreamResponse_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetJobStreamResponse_Open) Reset() {
	*x = GetJobStreamResponse_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Open) ProtoMessage() {}

func (x *GetJobStreamResponse_Open) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Open.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Open) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 0}
}

type GetJobStreamResponse_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// previous and current are the previous and current states, respectively.
	Previous Job_State `protobuf:"varint,1,opt,name=previous,proto3,enum=hashicorp.waypoint.Job_State" json:"previous,omitempty"`
	Current  Job_State `protobuf:"varint,2,opt,name=current,proto3,enum=hashicorp.waypoint.Job_State" json:"current,omitempty"`
	// The full updated job is also sent because additional fields may be
	// set depending on the state (such as the assigned runner, assignment
	// times, etc.)
	Job *Job `protobuf:"bytes,3,opt,name=job,proto3" json:"job,omitempty"`
	// canceling is true if the job was requested to be canceled.
	Canceling bool `protobuf:"varint,4,opt,name=canceling,proto3" json:"canceling,omitempty"`
}

func (x *GetJobStreamResponse_State) Reset() {
	*x = GetJobStreamResponse_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_State) ProtoMessage() {}

func (x *GetJobStreamResponse_State) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_State.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_State) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 1}
}

func (x *GetJobStreamResponse_State) GetPrevious() Job_State {
	if x != nil {
		return x.Previous
	}
	return Job_UNKNOWN
}

func (x *GetJobStreamResponse_State) GetCurrent() Job_State {
	if x != nil {
		return x.Current
	}
	return Job_UNKNOWN
}

func (x *GetJobStreamResponse_State) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *GetJobStreamResponse_State) GetCanceling() bool {
	if x != nil {
		return x.Canceling
	}
	return false
}

type GetJobStreamResponse_Download struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ref for the data that was downloaded. This can be nil if no
	// data was downloaded (though it'd be more reasonable to just not
	// send a download event in that case).
	DataSourceRef *Job_DataSource_Ref `protobuf:"bytes,1,opt,name=data_source_ref,json=dataSourceRef,proto3" json:"data_source_ref,omitempty"`
}

func (x *GetJobStreamResponse_Download) Reset() {
	*x = GetJobStreamResponse_Download{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Download) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Download) ProtoMessage() {}

func (x *GetJobStreamResponse_Download) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Download.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Download) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 2}
}

func (x *GetJobStreamResponse_Download) GetDataSourceRef() *Job_DataSource_Ref {
	if x != nil {
		return x.DataSourceRef
	}
	return nil
}

type GetJobStreamResponse_Terminal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*GetJobStreamResponse_Terminal_Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// buffered if true signifies that the data being sent is from the
	// server buffer and is historical vs real-time since the stream was
	// opened. If this is true, all lines are buffered. We will never mix
	// buffered and non-buffered lines.
	Buffered bool `protobuf:"varint,2,opt,name=buffered,proto3" json:"buffered,omitempty"`
}

func (x *GetJobStreamResponse_Terminal) Reset() {
	*x = GetJobStreamResponse_Terminal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3}
}

func (x *GetJobStreamResponse_Terminal) GetEvents() []*GetJobStreamResponse_Terminal_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal) GetBuffered() bool {
	if x != nil {
		return x.Buffered
	}
	return false
}

type GetJobStreamResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetJobStreamResponse_Error) Reset() {
	*x = GetJobStreamResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Error) ProtoMessage() {}

func (x *GetJobStreamResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Error.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Error) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 4}
}

func (x *GetJobStreamResponse_Error) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetJobStreamResponse_Complete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error, if set, is an error that occurred as part of the job execution
	// and resulted in job termination. This is different than the "error"
	// event which is an error in the stream itself.
	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Result will be set to the final result of the job execution, if any.
	Result *Job_Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetJobStreamResponse_Complete) Reset() {
	*x = GetJobStreamResponse_Complete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Complete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Complete) ProtoMessage() {}

func (x *GetJobStreamResponse_Complete) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Complete.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Complete) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 5}
}

func (x *GetJobStreamResponse_Complete) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetJobStreamResponse_Complete) GetResult() *Job_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetJobStreamResponse_Terminal_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp of the event as seen by the runner. This might be
	// skewed from the server or the client but relative to all other
	// line output, it will be accurate.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Event:
	//	*GetJobStreamResponse_Terminal_Event_Line_
	//	*GetJobStreamResponse_Terminal_Event_Status_
	//	*GetJobStreamResponse_Terminal_Event_NamedValues_
	//	*GetJobStreamResponse_Terminal_Event_Raw_
	//	*GetJobStreamResponse_Terminal_Event_Table_
	//	*GetJobStreamResponse_Terminal_Event_StepGroup_
	//	*GetJobStreamResponse_Terminal_Event_Step_
	Event isGetJobStreamResponse_Terminal_Event_Event `protobuf_oneof:"event"`
}

func (x *GetJobStreamResponse_Terminal_Event) Reset() {
	*x = GetJobStreamResponse_Terminal_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0}
}

func (x *GetJobStreamResponse_Terminal_Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *GetJobStreamResponse_Terminal_Event) GetEvent() isGetJobStreamResponse_Terminal_Event_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal_Event) GetLine() *GetJobStreamResponse_Terminal_Event_Line {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Terminal_Event_Line_); ok {
		return x.Line
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal_Event) GetStatus() *GetJobStreamResponse_Terminal_Event_Status {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Terminal_Event_Status_); ok {
		return x.Status
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal_Event) GetNamedValues() *GetJobStreamResponse_Terminal_Event_NamedValues {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Terminal_Event_NamedValues_); ok {
		return x.NamedValues
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal_Event) GetRaw() *GetJobStreamResponse_Terminal_Event_Raw {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Terminal_Event_Raw_); ok {
		return x.Raw
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal_Event) GetTable() *GetJobStreamResponse_Terminal_Event_Table {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Terminal_Event_Table_); ok {
		return x.Table
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal_Event) GetStepGroup() *GetJobStreamResponse_Terminal_Event_StepGroup {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Terminal_Event_StepGroup_); ok {
		return x.StepGroup
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal_Event) GetStep() *GetJobStreamResponse_Terminal_Event_Step {
	if x, ok := x.GetEvent().(*GetJobStreamResponse_Terminal_Event_Step_); ok {
		return x.Step
	}
	return nil
}

type isGetJobStreamResponse_Terminal_Event_Event interface {
	isGetJobStreamResponse_Terminal_Event_Event()
}

type GetJobStreamResponse_Terminal_Event_Line_ struct {
	Line *GetJobStreamResponse_Terminal_Event_Line `protobuf:"bytes,2,opt,name=line,proto3,oneof"`
}

type GetJobStreamResponse_Terminal_Event_Status_ struct {
	Status *GetJobStreamResponse_Terminal_Event_Status `protobuf:"bytes,3,opt,name=status,proto3,oneof"`
}

type GetJobStreamResponse_Terminal_Event_NamedValues_ struct {
	NamedValues *GetJobStreamResponse_Terminal_Event_NamedValues `protobuf:"bytes,4,opt,name=named_values,json=namedValues,proto3,oneof"`
}

type GetJobStreamResponse_Terminal_Event_Raw_ struct {
	Raw *GetJobStreamResponse_Terminal_Event_Raw `protobuf:"bytes,5,opt,name=raw,proto3,oneof"`
}

type GetJobStreamResponse_Terminal_Event_Table_ struct {
	Table *GetJobStreamResponse_Terminal_Event_Table `protobuf:"bytes,6,opt,name=table,proto3,oneof"`
}

type GetJobStreamResponse_Terminal_Event_StepGroup_ struct {
	StepGroup *GetJobStreamResponse_Terminal_Event_StepGroup `protobuf:"bytes,7,opt,name=step_group,json=stepGroup,proto3,oneof"`
}

type GetJobStreamResponse_Terminal_Event_Step_ struct {
	Step *GetJobStreamResponse_Terminal_Event_Step `protobuf:"bytes,8,opt,name=step,proto3,oneof"`
}

func (*GetJobStreamResponse_Terminal_Event_Line_) isGetJobStreamResponse_Terminal_Event_Event() {}

func (*GetJobStreamResponse_Terminal_Event_Status_) isGetJobStreamResponse_Terminal_Event_Event() {}

func (*GetJobStreamResponse_Terminal_Event_NamedValues_) isGetJobStreamResponse_Terminal_Event_Event() {
}

func (*GetJobStreamResponse_Terminal_Event_Raw_) isGetJobStreamResponse_Terminal_Event_Event() {}

func (*GetJobStreamResponse_Terminal_Event_Table_) isGetJobStreamResponse_Terminal_Event_Event() {}

func (*GetJobStreamResponse_Terminal_Event_StepGroup_) isGetJobStreamResponse_Terminal_Event_Event() {
}

func (*GetJobStreamResponse_Terminal_Event_Step_) isGetJobStreamResponse_Terminal_Event_Event() {}

type GetJobStreamResponse_Terminal_Event_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Step   bool   `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_Status) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_Status) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_Status) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_Status.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_Status) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 0}
}

func (x *GetJobStreamResponse_Terminal_Event_Status) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetJobStreamResponse_Terminal_Event_Status) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetJobStreamResponse_Terminal_Event_Status) GetStep() bool {
	if x != nil {
		return x.Step
	}
	return false
}

type GetJobStreamResponse_Terminal_Event_Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg   string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Style string `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_Line) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_Line) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_Line) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_Line.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_Line) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 1}
}

func (x *GetJobStreamResponse_Terminal_Event_Line) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetJobStreamResponse_Terminal_Event_Line) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

type GetJobStreamResponse_Terminal_Event_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Stderr bool   `protobuf:"varint,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_Raw) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_Raw) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_Raw.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_Raw) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 2}
}

func (x *GetJobStreamResponse_Terminal_Event_Raw) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal_Event_Raw) GetStderr() bool {
	if x != nil {
		return x.Stderr
	}
	return false
}

type GetJobStreamResponse_Terminal_Event_NamedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_NamedValue) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_NamedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_NamedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_NamedValue) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_NamedValue) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_NamedValue.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_NamedValue) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 3}
}

func (x *GetJobStreamResponse_Terminal_Event_NamedValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetJobStreamResponse_Terminal_Event_NamedValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetJobStreamResponse_Terminal_Event_NamedValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*GetJobStreamResponse_Terminal_Event_NamedValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_NamedValues) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_NamedValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_NamedValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_NamedValues) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_NamedValues) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_NamedValues.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_NamedValues) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 4}
}

func (x *GetJobStreamResponse_Terminal_Event_NamedValues) GetValues() []*GetJobStreamResponse_Terminal_Event_NamedValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type GetJobStreamResponse_Terminal_Event_TableEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_TableEntry) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_TableEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_TableEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_TableEntry) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_TableEntry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_TableEntry.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_TableEntry) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 5}
}

func (x *GetJobStreamResponse_Terminal_Event_TableEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetJobStreamResponse_Terminal_Event_TableEntry) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type GetJobStreamResponse_Terminal_Event_TableRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*GetJobStreamResponse_Terminal_Event_TableEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_TableRow) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_TableRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_TableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_TableRow) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_TableRow) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_TableRow.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_TableRow) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 6}
}

func (x *GetJobStreamResponse_Terminal_Event_TableRow) GetEntries() []*GetJobStreamResponse_Terminal_Event_TableEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetJobStreamResponse_Terminal_Event_Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []string                                        `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	Rows    []*GetJobStreamResponse_Terminal_Event_TableRow `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_Table) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_Table) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_Table) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_Table.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_Table) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 7}
}

func (x *GetJobStreamResponse_Terminal_Event_Table) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *GetJobStreamResponse_Terminal_Event_Table) GetRows() []*GetJobStreamResponse_Terminal_Event_TableRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type GetJobStreamResponse_Terminal_Event_StepGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Close bool `protobuf:"varint,1,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_StepGroup) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_StepGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_StepGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_StepGroup) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_StepGroup) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_StepGroup.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_StepGroup) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 8}
}

func (x *GetJobStreamResponse_Terminal_Event_StepGroup) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

type GetJobStreamResponse_Terminal_Event_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Close  bool   `protobuf:"varint,2,opt,name=close,proto3" json:"close,omitempty"`
	Msg    string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Output []byte `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetJobStreamResponse_Terminal_Event_Step) Reset() {
	*x = GetJobStreamResponse_Terminal_Event_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobStreamResponse_Terminal_Event_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStreamResponse_Terminal_Event_Step) ProtoMessage() {}

func (x *GetJobStreamResponse_Terminal_Event_Step) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStreamResponse_Terminal_Event_Step.ProtoReflect.Descriptor instead.
func (*GetJobStreamResponse_Terminal_Event_Step) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{46, 3, 0, 9}
}

func (x *GetJobStreamResponse_Terminal_Event_Step) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetJobStreamResponse_Terminal_Event_Step) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

func (x *GetJobStreamResponse_Terminal_Event_Step) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetJobStreamResponse_Terminal_Event_Step) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetJobStreamResponse_Terminal_Event_Step) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type RunnerConfigRequest_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Runner to register. See Runner for what fields can be set.
	Runner *Runner `protobuf:"bytes,1,opt,name=runner,proto3" json:"runner,omitempty"`
}

func (x *RunnerConfigRequest_Open) Reset() {
	*x = RunnerConfigRequest_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerConfigRequest_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigRequest_Open) ProtoMessage() {}

func (x *RunnerConfigRequest_Open) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigRequest_Open.ProtoReflect.Descriptor instead.
func (*RunnerConfigRequest_Open) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{48, 0}
}

func (x *RunnerConfigRequest_Open) GetRunner() *Runner {
	if x != nil {
		return x.Runner
	}
	return nil
}

type RunnerJobStreamRequest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *RunnerJobStreamRequest_Request) Reset() {
	*x = RunnerJobStreamRequest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerJobStreamRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerJobStreamRequest_Request) ProtoMessage() {}

func (x *RunnerJobStreamRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerJobStreamRequest_Request.ProtoReflect.Descriptor instead.
func (*RunnerJobStreamRequest_Request) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{51, 0}
}

func (x *RunnerJobStreamRequest_Request) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type RunnerJobStreamRequest_Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunnerJobStreamRequest_Ack) Reset() {
	*x = RunnerJobStreamRequest_Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerJobStreamRequest_Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerJobStreamRequest_Ack) ProtoMessage() {}

func (x *RunnerJobStreamRequest_Ack) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerJobStreamRequest_Ack.ProtoReflect.Descriptor instead.
func (*RunnerJobStreamRequest_Ack) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{51, 1}
}

type RunnerJobStreamRequest_Complete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Job_Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RunnerJobStreamRequest_Complete) Reset() {
	*x = RunnerJobStreamRequest_Complete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerJobStreamRequest_Complete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerJobStreamRequest_Complete) ProtoMessage() {}

func (x *RunnerJobStreamRequest_Complete) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerJobStreamRequest_Complete.ProtoReflect.Descriptor instead.
func (*RunnerJobStreamRequest_Complete) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{51, 2}
}

func (x *RunnerJobStreamRequest_Complete) GetResult() *Job_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type RunnerJobStreamRequest_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RunnerJobStreamRequest_Error) Reset() {
	*x = RunnerJobStreamRequest_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerJobStreamRequest_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerJobStreamRequest_Error) ProtoMessage() {}

func (x *RunnerJobStreamRequest_Error) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerJobStreamRequest_Error.ProtoReflect.Descriptor instead.
func (*RunnerJobStreamRequest_Error) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{51, 3}
}

func (x *RunnerJobStreamRequest_Error) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

type RunnerJobStreamRequest_Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunnerJobStreamRequest_Heartbeat) Reset() {
	*x = RunnerJobStreamRequest_Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerJobStreamRequest_Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerJobStreamRequest_Heartbeat) ProtoMessage() {}

func (x *RunnerJobStreamRequest_Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerJobStreamRequest_Heartbeat.ProtoReflect.Descriptor instead.
func (*RunnerJobStreamRequest_Heartbeat) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{51, 4}
}

type RunnerJobStreamResponse_JobAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *RunnerJobStreamResponse_JobAssignment) Reset() {
	*x = RunnerJobStreamResponse_JobAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerJobStreamResponse_JobAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerJobStreamResponse_JobAssignment) ProtoMessage() {}

func (x *RunnerJobStreamResponse_JobAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerJobStreamResponse_JobAssignment.ProtoReflect.Descriptor instead.
func (*RunnerJobStreamResponse_JobAssignment) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{52, 0}
}

func (x *RunnerJobStreamResponse_JobAssignment) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type RunnerJobStreamResponse_JobCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *RunnerJobStreamResponse_JobCancel) Reset() {
	*x = RunnerJobStreamResponse_JobCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerJobStreamResponse_JobCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerJobStreamResponse_JobCancel) ProtoMessage() {}

func (x *RunnerJobStreamResponse_JobCancel) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerJobStreamResponse_JobCancel.ProtoReflect.Descriptor instead.
func (*RunnerJobStreamResponse_JobCancel) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{52, 1}
}

func (x *RunnerJobStreamResponse_JobCancel) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ServerConfig_AdvertiseAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr          string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Tls           bool   `protobuf:"varint,2,opt,name=tls,proto3" json:"tls,omitempty"`
	TlsSkipVerify bool   `protobuf:"varint,3,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty"`
}

func (x *ServerConfig_AdvertiseAddr) Reset() {
	*x = ServerConfig_AdvertiseAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerConfig_AdvertiseAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfig_AdvertiseAddr) ProtoMessage() {}

func (x *ServerConfig_AdvertiseAddr) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfig_AdvertiseAddr.ProtoReflect.Descriptor instead.
func (*ServerConfig_AdvertiseAddr) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{58, 0}
}

func (x *ServerConfig_AdvertiseAddr) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServerConfig_AdvertiseAddr) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

func (x *ServerConfig_AdvertiseAddr) GetTlsSkipVerify() bool {
	if x != nil {
		return x.TlsSkipVerify
	}
	return false
}

type Hostname_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*Hostname_Target_Application
	Target isHostname_Target_Target `protobuf_oneof:"target"`
}

func (x *Hostname_Target) Reset() {
	*x = Hostname_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hostname_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hostname_Target) ProtoMessage() {}

func (x *Hostname_Target) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hostname_Target.ProtoReflect.Descriptor instead.
func (*Hostname_Target) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{64, 1}
}

func (m *Hostname_Target) GetTarget() isHostname_Target_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Hostname_Target) GetApplication() *Hostname_TargetApp {
	if x, ok := x.GetTarget().(*Hostname_Target_Application); ok {
		return x.Application
	}
	return nil
}

type isHostname_Target_Target interface {
	isHostname_Target_Target()
}

type Hostname_Target_Application struct {
	Application *Hostname_TargetApp `protobuf:"bytes,20,opt,name=application,proto3,oneof"`
}

func (*Hostname_Target_Application) isHostname_Target_Target() {}

// TargetApp targets an application in a specific workspace. With
// this target type, you can still target specific deployments by
// appending `--<deployment id>` to the hostname after registration.
type Hostname_TargetApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Workspace   *Ref_Workspace   `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *Hostname_TargetApp) Reset() {
	*x = Hostname_TargetApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hostname_TargetApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hostname_TargetApp) ProtoMessage() {}

func (x *Hostname_TargetApp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hostname_TargetApp.ProtoReflect.Descriptor instead.
func (*Hostname_TargetApp) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{64, 2}
}

func (x *Hostname_TargetApp) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Hostname_TargetApp) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type Build_Preload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ref that was used in the job to run this operation. This is
	// also accessible by querying the job via the job_id and should always
	// match.
	//
	// This may be null under multiple circumstances: (1) the job was
	// manually triggered with local data (no datasource) or (2) the job
	// was run in earlier versions of Waypoint before we tracked this or
	// (3) the job hasn't yet loaded the data.
	//
	// This is always pre-populated if it is exists.
	JobDataSourceRef *Job_DataSource_Ref `protobuf:"bytes,1,opt,name=job_data_source_ref,json=jobDataSourceRef,proto3" json:"job_data_source_ref,omitempty"`
}

func (x *Build_Preload) Reset() {
	*x = Build_Preload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build_Preload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build_Preload) ProtoMessage() {}

func (x *Build_Preload) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build_Preload.ProtoReflect.Descriptor instead.
func (*Build_Preload) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{82, 1}
}

func (x *Build_Preload) GetJobDataSourceRef() *Job_DataSource_Ref {
	if x != nil {
		return x.JobDataSourceRef
	}
	return nil
}

type PushedArtifact_Preload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ref that was used in the job to run this operation. This is
	// also accessible by querying the job via the job_id and should always
	// match.
	//
	// This may be null under multiple circumstances: (1) the job was
	// manually triggered with local data (no datasource) or (2) the job
	// was run in earlier versions of Waypoint before we tracked this or
	// (3) the job hasn't yet loaded the data.
	//
	// This is always pre-populated if it is exists.
	JobDataSourceRef *Job_DataSource_Ref `protobuf:"bytes,1,opt,name=job_data_source_ref,json=jobDataSourceRef,proto3" json:"job_data_source_ref,omitempty"`
}

func (x *PushedArtifact_Preload) Reset() {
	*x = PushedArtifact_Preload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushedArtifact_Preload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushedArtifact_Preload) ProtoMessage() {}

func (x *PushedArtifact_Preload) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushedArtifact_Preload.ProtoReflect.Descriptor instead.
func (*PushedArtifact_Preload) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{90, 1}
}

func (x *PushedArtifact_Preload) GetJobDataSourceRef() *Job_DataSource_Ref {
	if x != nil {
		return x.JobDataSourceRef
	}
	return nil
}

type Deployment_Preload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Populated when a Deployment is read with LoadDetails set
	// to ARTIFACT or BUILD
	Artifact *PushedArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// Populated when a Deployment is read with LoadDetails set to BUILD
	Build *Build `protobuf:"bytes,2,opt,name=build,proto3" json:"build,omitempty"`
	// The deployment-specific URL from the URL service. This is set on
	// all deployment API calls. This will be empty if the URL service
	// is not enabled or there was an error loading this information.
	DeployUrl string `protobuf:"bytes,3,opt,name=deploy_url,json=deployUrl,proto3" json:"deploy_url,omitempty"`
	// The ref that was used in the job to run this operation. This is
	// also accessible by querying the job via the job_id and should always
	// match.
	//
	// This may be null under multiple circumstances: (1) the job was
	// manually triggered with local data (no datasource) or (2) the job
	// was run in earlier versions of Waypoint before we tracked this or
	// (3) the job hasn't yet loaded the data.
	//
	// This is always pre-populated if it is exists.
	JobDataSourceRef *Job_DataSource_Ref `protobuf:"bytes,4,opt,name=job_data_source_ref,json=jobDataSourceRef,proto3" json:"job_data_source_ref,omitempty"`
}

func (x *Deployment_Preload) Reset() {
	*x = Deployment_Preload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_Preload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_Preload) ProtoMessage() {}

func (x *Deployment_Preload) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_Preload.ProtoReflect.Descriptor instead.
func (*Deployment_Preload) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{96, 1}
}

func (x *Deployment_Preload) GetArtifact() *PushedArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *Deployment_Preload) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *Deployment_Preload) GetDeployUrl() string {
	if x != nil {
		return x.DeployUrl
	}
	return ""
}

func (x *Deployment_Preload) GetJobDataSourceRef() *Job_DataSource_Ref {
	if x != nil {
		return x.JobDataSourceRef
	}
	return nil
}

type ListInstancesRequest_Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Application to query. This must have both a project/app set.
	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// Workspace to filter by. If this isn't set, then all workspaces for
	// the app are returned.
	Workspace *Ref_Workspace `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *ListInstancesRequest_Application) Reset() {
	*x = ListInstancesRequest_Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesRequest_Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesRequest_Application) ProtoMessage() {}

func (x *ListInstancesRequest_Application) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesRequest_Application.ProtoReflect.Descriptor instead.
func (*ListInstancesRequest_Application) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{98, 0}
}

func (x *ListInstancesRequest_Application) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *ListInstancesRequest_Application) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type Release_Preload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Populated when LoadDetails is set.
	Deployment *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Populated when LoadDetails is set.
	Artifact *PushedArtifact `protobuf:"bytes,2,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// Populated when LoadDetails is set.
	Build *Build `protobuf:"bytes,3,opt,name=build,proto3" json:"build,omitempty"`
	// The ref that was used in the job to run this operation. This is
	// also accessible by querying the job via the job_id and should always
	// match.
	//
	// This may be null under multiple circumstances: (1) the job was
	// manually triggered with local data (no datasource) or (2) the job
	// was run in earlier versions of Waypoint before we tracked this or
	// (3) the job hasn't yet loaded the data.
	//
	// This is always pre-populated if it is exists.
	JobDataSourceRef *Job_DataSource_Ref `protobuf:"bytes,4,opt,name=job_data_source_ref,json=jobDataSourceRef,proto3" json:"job_data_source_ref,omitempty"`
}

func (x *Release_Preload) Reset() {
	*x = Release_Preload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_Preload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_Preload) ProtoMessage() {}

func (x *Release_Preload) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_Preload.ProtoReflect.Descriptor instead.
func (*Release_Preload) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{107, 1}
}

func (x *Release_Preload) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Release_Preload) GetArtifact() *PushedArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *Release_Preload) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *Release_Preload) GetJobDataSourceRef() *Job_DataSource_Ref {
	if x != nil {
		return x.JobDataSourceRef
	}
	return nil
}

// A resource as observed in a platform
type StatusReport_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the resource, according to the platform.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// declared resource that this directly references.
	DeclaredResource *Ref_DeclaredResource `protobuf:"bytes,2,opt,name=declared_resource,json=declaredResource,proto3" json:"declared_resource,omitempty"`
	// Resources that created this resource.
	ParentResourceId string `protobuf:"bytes,3,opt,name=parent_resource_id,json=parentResourceId,proto3" json:"parent_resource_id,omitempty"`
	// Friendly name of the resource, if applicable
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The platform on which the resource exists.
	Platform string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	// platform-specific name of the resource type. i.e. instance, pod, auto-scaling group, etc
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// A link directly to the resource in the platform, if applicable.
	PlatformUrl string `protobuf:"bytes,7,opt,name=platform_url,json=platformUrl,proto3" json:"platform_url,omitempty"`
	// The high level category of the resource, used as a hint to the UI on how to display the resource.
	CategoryDisplayHint ResourceCategoryDisplayHint `protobuf:"varint,8,opt,name=category_display_hint,json=categoryDisplayHint,proto3,enum=hashicorp.waypoint.ResourceCategoryDisplayHint" json:"category_display_hint,omitempty"`
	// platform-reported time of resource creation
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// any additional metadata about the resource, encoded as JSON
	StateJson string `protobuf:"bytes,10,opt,name=state_json,json=stateJson,proto3" json:"state_json,omitempty"`
	// the current health state for a single resource
	Health *StatusReport_Health `protobuf:"bytes,11,opt,name=health,proto3" json:"health,omitempty"`
	// a simple human readable message detailing the Health state
	HealthMessage string `protobuf:"bytes,12,opt,name=health_message,json=healthMessage,proto3" json:"health_message,omitempty"`
}

func (x *StatusReport_Resource) Reset() {
	*x = StatusReport_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReport_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReport_Resource) ProtoMessage() {}

func (x *StatusReport_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReport_Resource.ProtoReflect.Descriptor instead.
func (*StatusReport_Resource) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{117, 0}
}

func (x *StatusReport_Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusReport_Resource) GetDeclaredResource() *Ref_DeclaredResource {
	if x != nil {
		return x.DeclaredResource
	}
	return nil
}

func (x *StatusReport_Resource) GetParentResourceId() string {
	if x != nil {
		return x.ParentResourceId
	}
	return ""
}

func (x *StatusReport_Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatusReport_Resource) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *StatusReport_Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StatusReport_Resource) GetPlatformUrl() string {
	if x != nil {
		return x.PlatformUrl
	}
	return ""
}

func (x *StatusReport_Resource) GetCategoryDisplayHint() ResourceCategoryDisplayHint {
	if x != nil {
		return x.CategoryDisplayHint
	}
	return ResourceCategoryDisplayHint_UNKNOWN
}

func (x *StatusReport_Resource) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *StatusReport_Resource) GetStateJson() string {
	if x != nil {
		return x.StateJson
	}
	return ""
}

func (x *StatusReport_Resource) GetHealth() *StatusReport_Health {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *StatusReport_Resource) GetHealthMessage() string {
	if x != nil {
		return x.HealthMessage
	}
	return ""
}

type StatusReport_Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the overall health of the report for a resource
	HealthStatus string `protobuf:"bytes,1,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	// the overall health message of the report for a resource
	HealthMessage string `protobuf:"bytes,2,opt,name=health_message,json=healthMessage,proto3" json:"health_message,omitempty"`
	// Resource name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Resource id
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StatusReport_Health) Reset() {
	*x = StatusReport_Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReport_Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReport_Health) ProtoMessage() {}

func (x *StatusReport_Health) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReport_Health.ProtoReflect.Descriptor instead.
func (*StatusReport_Health) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{117, 1}
}

func (x *StatusReport_Health) GetHealthStatus() string {
	if x != nil {
		return x.HealthStatus
	}
	return ""
}

func (x *StatusReport_Health) GetHealthMessage() string {
	if x != nil {
		return x.HealthMessage
	}
	return ""
}

func (x *StatusReport_Health) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatusReport_Health) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetLogStreamRequest_Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Application *Ref_Application `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	Workspace   *Ref_Workspace   `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *GetLogStreamRequest_Application) Reset() {
	*x = GetLogStreamRequest_Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogStreamRequest_Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogStreamRequest_Application) ProtoMessage() {}

func (x *GetLogStreamRequest_Application) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogStreamRequest_Application.ProtoReflect.Descriptor instead.
func (*GetLogStreamRequest_Application) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{118, 0}
}

func (x *GetLogStreamRequest_Application) GetApplication() *Ref_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *GetLogStreamRequest_Application) GetWorkspace() *Ref_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type LogBatch_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    LogBatch_Entry_Source  `protobuf:"varint,3,opt,name=source,proto3,enum=hashicorp.waypoint.LogBatch_Entry_Source" json:"source,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Line      string                 `protobuf:"bytes,2,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *LogBatch_Entry) Reset() {
	*x = LogBatch_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogBatch_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBatch_Entry) ProtoMessage() {}

func (x *LogBatch_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBatch_Entry.ProtoReflect.Descriptor instead.
func (*LogBatch_Entry) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{119, 0}
}

func (x *LogBatch_Entry) GetSource() LogBatch_Entry_Source {
	if x != nil {
		return x.Source
	}
	return LogBatch_Entry_APP
}

func (x *LogBatch_Entry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogBatch_Entry) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

// DynamicVal is the configuration for dynamic values for configuration.
type ConfigVar_DynamicVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from is the config source plugin to use
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// config is the configuration for the config source plugin that
	// defines how the value is read. For example, for a "Vault" config
	// source this may contain the path in the KV store to read the value.
	Config map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigVar_DynamicVal) Reset() {
	*x = ConfigVar_DynamicVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigVar_DynamicVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigVar_DynamicVal) ProtoMessage() {}

func (x *ConfigVar_DynamicVal) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigVar_DynamicVal.ProtoReflect.Descriptor instead.
func (*ConfigVar_DynamicVal) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{120, 0}
}

func (x *ConfigVar_DynamicVal) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ConfigVar_DynamicVal) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type ExecStreamRequest_Start struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*ExecStreamRequest_Start_DeploymentId
	//	*ExecStreamRequest_Start_InstanceId
	Target isExecStreamRequest_Start_Target `protobuf_oneof:"target"`
	// Args including the command at args[0] to execute.
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// Pty is set if we should allocate a PTY for this exec stream.
	Pty *ExecStreamRequest_PTY `protobuf:"bytes,3,opt,name=pty,proto3" json:"pty,omitempty"`
}

func (x *ExecStreamRequest_Start) Reset() {
	*x = ExecStreamRequest_Start{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamRequest_Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamRequest_Start) ProtoMessage() {}

func (x *ExecStreamRequest_Start) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamRequest_Start.ProtoReflect.Descriptor instead.
func (*ExecStreamRequest_Start) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{129, 0}
}

func (m *ExecStreamRequest_Start) GetTarget() isExecStreamRequest_Start_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *ExecStreamRequest_Start) GetDeploymentId() string {
	if x, ok := x.GetTarget().(*ExecStreamRequest_Start_DeploymentId); ok {
		return x.DeploymentId
	}
	return ""
}

func (x *ExecStreamRequest_Start) GetInstanceId() string {
	if x, ok := x.GetTarget().(*ExecStreamRequest_Start_InstanceId); ok {
		return x.InstanceId
	}
	return ""
}

func (x *ExecStreamRequest_Start) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecStreamRequest_Start) GetPty() *ExecStreamRequest_PTY {
	if x != nil {
		return x.Pty
	}
	return nil
}

type isExecStreamRequest_Start_Target interface {
	isExecStreamRequest_Start_Target()
}

type ExecStreamRequest_Start_DeploymentId struct {
	// Deployment to exec into
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3,oneof"`
}

type ExecStreamRequest_Start_InstanceId struct {
	// Instance to send the exec request to. This is indicates that
	// the client wants an exec session to this specific instance,
	// rather than one the server picks. Targetted instances can be
	// any instance type, where as untargeted have to be LONG_RUNNING.
	InstanceId string `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3,oneof"`
}

func (*ExecStreamRequest_Start_DeploymentId) isExecStreamRequest_Start_Target() {}

func (*ExecStreamRequest_Start_InstanceId) isExecStreamRequest_Start_Target() {}

type ExecStreamRequest_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExecStreamRequest_Input) Reset() {
	*x = ExecStreamRequest_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamRequest_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamRequest_Input) ProtoMessage() {}

func (x *ExecStreamRequest_Input) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamRequest_Input.ProtoReflect.Descriptor instead.
func (*ExecStreamRequest_Input) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{129, 1}
}

func (x *ExecStreamRequest_Input) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExecStreamRequest_PTY struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// term is the TERM value to request on the remote side. This should be set.
	Term string `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	// window_size is the initial window size
	WindowSize *ExecStreamRequest_WindowSize `protobuf:"bytes,3,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
}

func (x *ExecStreamRequest_PTY) Reset() {
	*x = ExecStreamRequest_PTY{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamRequest_PTY) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamRequest_PTY) ProtoMessage() {}

func (x *ExecStreamRequest_PTY) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamRequest_PTY.ProtoReflect.Descriptor instead.
func (*ExecStreamRequest_PTY) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{129, 2}
}

func (x *ExecStreamRequest_PTY) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *ExecStreamRequest_PTY) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *ExecStreamRequest_PTY) GetWindowSize() *ExecStreamRequest_WindowSize {
	if x != nil {
		return x.WindowSize
	}
	return nil
}

type ExecStreamRequest_WindowSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows   int32 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols   int32 `protobuf:"varint,2,opt,name=cols,proto3" json:"cols,omitempty"`
	Width  int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ExecStreamRequest_WindowSize) Reset() {
	*x = ExecStreamRequest_WindowSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamRequest_WindowSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamRequest_WindowSize) ProtoMessage() {}

func (x *ExecStreamRequest_WindowSize) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamRequest_WindowSize.ProtoReflect.Descriptor instead.
func (*ExecStreamRequest_WindowSize) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{129, 3}
}

func (x *ExecStreamRequest_WindowSize) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *ExecStreamRequest_WindowSize) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *ExecStreamRequest_WindowSize) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ExecStreamRequest_WindowSize) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ExecStreamResponse_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecStreamResponse_Open) Reset() {
	*x = ExecStreamResponse_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamResponse_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamResponse_Open) ProtoMessage() {}

func (x *ExecStreamResponse_Open) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamResponse_Open.ProtoReflect.Descriptor instead.
func (*ExecStreamResponse_Open) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{130, 0}
}

type ExecStreamResponse_Exit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ExecStreamResponse_Exit) Reset() {
	*x = ExecStreamResponse_Exit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamResponse_Exit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamResponse_Exit) ProtoMessage() {}

func (x *ExecStreamResponse_Exit) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamResponse_Exit.ProtoReflect.Descriptor instead.
func (*ExecStreamResponse_Exit) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{130, 1}
}

func (x *ExecStreamResponse_Exit) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type ExecStreamResponse_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel ExecStreamResponse_Output_Channel `protobuf:"varint,1,opt,name=channel,proto3,enum=hashicorp.waypoint.ExecStreamResponse_Output_Channel" json:"channel,omitempty"`
	Data    []byte                            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExecStreamResponse_Output) Reset() {
	*x = ExecStreamResponse_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStreamResponse_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStreamResponse_Output) ProtoMessage() {}

func (x *ExecStreamResponse_Output) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStreamResponse_Output.ProtoReflect.Descriptor instead.
func (*ExecStreamResponse_Output) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{130, 2}
}

func (x *ExecStreamResponse_Output) GetChannel() ExecStreamResponse_Output_Channel {
	if x != nil {
		return x.Channel
	}
	return ExecStreamResponse_Output_UNKNOWN
}

func (x *ExecStreamResponse_Output) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type EntrypointConfig_Exec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Args  []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Pty   *ExecStreamRequest_PTY `protobuf:"bytes,3,opt,name=pty,proto3" json:"pty,omitempty"`
}

func (x *EntrypointConfig_Exec) Reset() {
	*x = EntrypointConfig_Exec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointConfig_Exec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointConfig_Exec) ProtoMessage() {}

func (x *EntrypointConfig_Exec) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointConfig_Exec.ProtoReflect.Descriptor instead.
func (*EntrypointConfig_Exec) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{133, 0}
}

func (x *EntrypointConfig_Exec) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EntrypointConfig_Exec) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *EntrypointConfig_Exec) GetPty() *ExecStreamRequest_PTY {
	if x != nil {
		return x.Pty
	}
	return nil
}

type EntrypointConfig_URLService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address to the control server and the token for auth
	ControlAddr string `protobuf:"bytes,1,opt,name=control_addr,json=controlAddr,proto3" json:"control_addr,omitempty"`
	Token       string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// labels to register this instance under
	Labels string `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
}

func (x *EntrypointConfig_URLService) Reset() {
	*x = EntrypointConfig_URLService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointConfig_URLService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointConfig_URLService) ProtoMessage() {}

func (x *EntrypointConfig_URLService) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointConfig_URLService.ProtoReflect.Descriptor instead.
func (*EntrypointConfig_URLService) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{133, 1}
}

func (x *EntrypointConfig_URLService) GetControlAddr() string {
	if x != nil {
		return x.ControlAddr
	}
	return ""
}

func (x *EntrypointConfig_URLService) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *EntrypointConfig_URLService) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

type EntrypointConfig_DeploymentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// component is the deployment plugin information that launched this instance.
	Component *Component `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// labels are the set of labels that are present on the deployment.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EntrypointConfig_DeploymentInfo) Reset() {
	*x = EntrypointConfig_DeploymentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointConfig_DeploymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointConfig_DeploymentInfo) ProtoMessage() {}

func (x *EntrypointConfig_DeploymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointConfig_DeploymentInfo.ProtoReflect.Descriptor instead.
func (*EntrypointConfig_DeploymentInfo) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{133, 2}
}

func (x *EntrypointConfig_DeploymentInfo) GetComponent() *Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *EntrypointConfig_DeploymentInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type EntrypointExecRequest_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Index      int64  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *EntrypointExecRequest_Open) Reset() {
	*x = EntrypointExecRequest_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointExecRequest_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointExecRequest_Open) ProtoMessage() {}

func (x *EntrypointExecRequest_Open) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointExecRequest_Open.ProtoReflect.Descriptor instead.
func (*EntrypointExecRequest_Open) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{135, 0}
}

func (x *EntrypointExecRequest_Open) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *EntrypointExecRequest_Open) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type EntrypointExecRequest_Exit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *EntrypointExecRequest_Exit) Reset() {
	*x = EntrypointExecRequest_Exit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointExecRequest_Exit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointExecRequest_Exit) ProtoMessage() {}

func (x *EntrypointExecRequest_Exit) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointExecRequest_Exit.ProtoReflect.Descriptor instead.
func (*EntrypointExecRequest_Exit) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{135, 1}
}

func (x *EntrypointExecRequest_Exit) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type EntrypointExecRequest_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel EntrypointExecRequest_Output_Channel `protobuf:"varint,1,opt,name=channel,proto3,enum=hashicorp.waypoint.EntrypointExecRequest_Output_Channel" json:"channel,omitempty"`
	Data    []byte                               `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EntrypointExecRequest_Output) Reset() {
	*x = EntrypointExecRequest_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointExecRequest_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointExecRequest_Output) ProtoMessage() {}

func (x *EntrypointExecRequest_Output) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointExecRequest_Output.ProtoReflect.Descriptor instead.
func (*EntrypointExecRequest_Output) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{135, 2}
}

func (x *EntrypointExecRequest_Output) GetChannel() EntrypointExecRequest_Output_Channel {
	if x != nil {
		return x.Channel
	}
	return EntrypointExecRequest_Output_UNKNOWN
}

func (x *EntrypointExecRequest_Output) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type EntrypointExecRequest_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EntrypointExecRequest_Error) Reset() {
	*x = EntrypointExecRequest_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntrypointExecRequest_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntrypointExecRequest_Error) ProtoMessage() {}

func (x *EntrypointExecRequest_Error) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntrypointExecRequest_Error.ProtoReflect.Descriptor instead.
func (*EntrypointExecRequest_Error) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{135, 3}
}

func (x *EntrypointExecRequest_Error) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

type Token_Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User that this token represents. This is the internal user ID (ULID),
	// not the username/email/etc. The special value of "waypoint" means the
	// superuser (default user) that is setup on bootstrap. This is for
	// historical reasons only and is the only valid non-ULID value.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// If set, this login token can only be used for entrypoint-related
	// APIs against the configured deployment.
	Entrypoint *Token_Entrypoint `protobuf:"bytes,2,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
}

func (x *Token_Login) Reset() {
	*x = Token_Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token_Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token_Login) ProtoMessage() {}

func (x *Token_Login) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token_Login.ProtoReflect.Descriptor instead.
func (*Token_Login) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{138, 0}
}

func (x *Token_Login) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Token_Login) GetEntrypoint() *Token_Entrypoint {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

type Token_Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user that initiated the invite
	FromUserId string `protobuf:"bytes,1,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`
	// The login token we'd like to create. This can be used to setup
	// all the policy attachments and other restrictions. If this is a
	// signup-only invite token, then "user_id" in this login field will
	// be ignored and set to the newly created user ID.
	Login *Token_Login `protobuf:"bytes,2,opt,name=login,proto3" json:"login,omitempty"`
	// Signup, if non-nil, makes this invite a signup-only invite token. This
	// means that this token can only be used to create a new account, not
	// to exchange for a token for an existing account.
	Signup *Token_Invite_Signup `protobuf:"bytes,3,opt,name=signup,proto3" json:"signup,omitempty"`
}

func (x *Token_Invite) Reset() {
	*x = Token_Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token_Invite) ProtoMessage() {}

func (x *Token_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token_Invite.ProtoReflect.Descriptor instead.
func (*Token_Invite) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{138, 1}
}

func (x *Token_Invite) GetFromUserId() string {
	if x != nil {
		return x.FromUserId
	}
	return ""
}

func (x *Token_Invite) GetLogin() *Token_Login {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *Token_Invite) GetSignup() *Token_Invite_Signup {
	if x != nil {
		return x.Signup
	}
	return nil
}

type Token_Entrypoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deployment id is the deployment to restrict this token to.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *Token_Entrypoint) Reset() {
	*x = Token_Entrypoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token_Entrypoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token_Entrypoint) ProtoMessage() {}

func (x *Token_Entrypoint) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token_Entrypoint.ProtoReflect.Descriptor instead.
func (*Token_Entrypoint) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{138, 2}
}

func (x *Token_Entrypoint) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type Token_Invite_Signup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The initial username that the new user should be given. If this
	// username is taken, a random number will be appended. If this is
	// empty, a totally random username will be given to the new user.
	InitialUsername string `protobuf:"bytes,1,opt,name=initial_username,json=initialUsername,proto3" json:"initial_username,omitempty"`
}

func (x *Token_Invite_Signup) Reset() {
	*x = Token_Invite_Signup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token_Invite_Signup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token_Invite_Signup) ProtoMessage() {}

func (x *Token_Invite_Signup) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token_Invite_Signup.ProtoReflect.Descriptor instead.
func (*Token_Invite_Signup) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{138, 1, 0}
}

func (x *Token_Invite_Signup) GetInitialUsername() string {
	if x != nil {
		return x.InitialUsername
	}
	return ""
}

// One day we may add information here. For now we are reserving this.
type CreateSnapshotResponse_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSnapshotResponse_Open) Reset() {
	*x = CreateSnapshotResponse_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotResponse_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotResponse_Open) ProtoMessage() {}

func (x *CreateSnapshotResponse_Open) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotResponse_Open.ProtoReflect.Descriptor instead.
func (*CreateSnapshotResponse_Open) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{146, 0}
}

type RestoreSnapshotRequest_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, the server will exit after the restore is staged. This will
	// SHUT DOWN the server and some external process you created is expected
	// to bring it back. The Waypoint server on its own WILL NOT automatically
	// restart. You should only set this if you have some operation to
	// automate restart such as running in Nomad or Kubernetes.
	Exit bool `protobuf:"varint,1,opt,name=exit,proto3" json:"exit,omitempty"`
}

func (x *RestoreSnapshotRequest_Open) Reset() {
	*x = RestoreSnapshotRequest_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreSnapshotRequest_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreSnapshotRequest_Open) ProtoMessage() {}

func (x *RestoreSnapshotRequest_Open) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreSnapshotRequest_Open.ProtoReflect.Descriptor instead.
func (*RestoreSnapshotRequest_Open) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{147, 0}
}

func (x *RestoreSnapshotRequest_Open) GetExit() bool {
	if x != nil {
		return x.Exit
	}
	return false
}

// Header is _always_ the first message encoded into a snapshot. If
// this isn't present, the entire snapshot can be considered corrupt.
type Snapshot_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version is the version of Waypoint that generated this snapshot.
	Version *VersionInfo `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// format is the format of the remaining messages. This can be used
	// to determine what messages to expect following the header.
	Format Snapshot_Header_Format `protobuf:"varint,2,opt,name=format,proto3,enum=hashicorp.waypoint.Snapshot_Header_Format" json:"format,omitempty"`
}

func (x *Snapshot_Header) Reset() {
	*x = Snapshot_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Header) ProtoMessage() {}

func (x *Snapshot_Header) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Header.ProtoReflect.Descriptor instead.
func (*Snapshot_Header) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{148, 0}
}

func (x *Snapshot_Header) GetVersion() *VersionInfo {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Snapshot_Header) GetFormat() Snapshot_Header_Format {
	if x != nil {
		return x.Format
	}
	return Snapshot_Header_UNKNOWN
}

// Trailer is sent as the final message encoded into a snapshot. Detecting
// when the trailer is is dependent on the format.
type Snapshot_Trailer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// checksum is the checksum of all the bytes up to but not including
	// this proto message. The checksum is for the raw uncompressed bytes.
	//
	// Types that are assignable to Checksum:
	//	*Snapshot_Trailer_Sha256
	Checksum isSnapshot_Trailer_Checksum `protobuf_oneof:"checksum"`
}

func (x *Snapshot_Trailer) Reset() {
	*x = Snapshot_Trailer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Trailer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Trailer) ProtoMessage() {}

func (x *Snapshot_Trailer) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Trailer.ProtoReflect.Descriptor instead.
func (*Snapshot_Trailer) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{148, 1}
}

func (m *Snapshot_Trailer) GetChecksum() isSnapshot_Trailer_Checksum {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func (x *Snapshot_Trailer) GetSha256() string {
	if x, ok := x.GetChecksum().(*Snapshot_Trailer_Sha256); ok {
		return x.Sha256
	}
	return ""
}

type isSnapshot_Trailer_Checksum interface {
	isSnapshot_Trailer_Checksum()
}

type Snapshot_Trailer_Sha256 struct {
	Sha256 string `protobuf:"bytes,1,opt,name=sha256,proto3,oneof"` // SHA-256 checksum
}

func (*Snapshot_Trailer_Sha256) isSnapshot_Trailer_Checksum() {}

// BoltChunk is a single chunk of data for BoltDB if the snapshot format
// is BOLT. A chunk will always contain items designated for a single bucket,
// but a bucket may be repeated multiple time across chunks if there are
// too many items in the bucket.
//
// The final BoltChunk will have trailer set to true. Immediaetly following
// that chunk will be the Trailer message.
type Snapshot_BoltChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bucket is the name of the bucket. This may be empty. If this is empty,
	// then this chunk should be ignored.
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// items is a id/value mapping of all this chunk of items in this bucket
	Items map[string][]byte `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// final is true if this is the last bolt chunk being written.
	Final bool `protobuf:"varint,3,opt,name=final,proto3" json:"final,omitempty"`
}

func (x *Snapshot_BoltChunk) Reset() {
	*x = Snapshot_BoltChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_proto_server_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_BoltChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_BoltChunk) ProtoMessage() {}

func (x *Snapshot_BoltChunk) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_proto_server_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_BoltChunk.ProtoReflect.Descriptor instead.
func (*Snapshot_BoltChunk) Descriptor() ([]byte, []int) {
	return file_internal_server_proto_server_proto_rawDescGZIP(), []int{148, 2}
}

func (x *Snapshot_BoltChunk) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Snapshot_BoltChunk) GetItems() map[string][]byte {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Snapshot_BoltChunk) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

var File_internal_server_proto_server_proto protoreflect.FileDescriptor

var file_internal_server_proto_server_proto_rawDesc = []byte{
	0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x82, 0x02, 0x0a, 0x0b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x03, 0x61, 0x70, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x4f, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x8a,
	0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xb0, 0x06, 0x0a, 0x08,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72,
	0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x68, 0x63,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x68, 0x63, 0x6c, 0x12, 0x2a,
	0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x01, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x34, 0x0a, 0x03, 0x76, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x56, 0x43, 0x53, 0x48, 0x01,
	0x52, 0x03, 0x76, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x66, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x68,
	0x63, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x48, 0x63, 0x6c,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x68, 0x63, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0x65, 0x0a, 0x03, 0x56, 0x43, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x68, 0x63, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x48, 0x63, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x68, 0x63,
	0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x48, 0x0a, 0x06, 0x48, 0x63, 0x6c, 0x50, 0x6f, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x79, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x79, 0x74, 0x65,
	0x1a, 0x98, 0x01, 0x0a, 0x08, 0x48, 0x63, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x48, 0x63, 0x6c, 0x50, 0x6f, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x48, 0x63, 0x6c, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf6,
	0x05, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x4a, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x63, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x63, 0x6c, 0x12, 0x52,
	0x0a, 0x13, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x63, 0x6c, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x11, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x63, 0x6c, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x12, 0x3a, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x1a, 0x3c, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x1a, 0x45, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x1b, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x43, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0xab, 0x05, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xe1, 0x02, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x91, 0x01,
	0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x1a,
	0x76, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x69, 0x64,
	0x63, 0x1a, 0x2a, 0x0a, 0x04, 0x4f, 0x49, 0x44, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x42, 0x08, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x99, 0x07, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x1a,
	0x08, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x1a, 0x49, 0x0a, 0x0b, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x1a, 0x23, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x29, 0x0a, 0x09, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x1a, 0x57, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x6b, 0x0a,
	0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x71, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x6d, 0x0a, 0x0c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x7d, 0x0a, 0x06, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x0b, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x6e,
	0x79, 0x1a, 0x83, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x1a, 0x18, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x1a, 0x2a, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x20, 0x0a,
	0x0a, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x22, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x04, 0x22,
	0xbb, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x39, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x9f, 0x01,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0x4c, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x52, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x0d,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45,
	0x44, 0x10, 0x04, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x35, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x22, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0x82, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x63, 0x0a, 0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74,
	0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x63, 0x69, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x63, 0x69, 0x55, 0x72,
	0x6c, 0x12, 0x71, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x43, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0xc3, 0x06, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x1a,
	0xed, 0x04, 0x0a, 0x04, 0x4f, 0x49, 0x44, 0x43, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x75, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x61, 0x50, 0x65, 0x6d, 0x12, 0x5d, 0x0a, 0x0e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x13, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x4f, 0x49,
	0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x2b, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x22, 0x5a, 0x0a,
	0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x5b, 0x0a, 0x18, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0x58, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x5e, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x5c, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74,
	0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x64,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0x29, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x22, 0x29, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x66, 0x0a,
	0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xcf, 0x3a, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x15,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f,
	0x6f, 0x70, 0x12, 0x37, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x4f, 0x70, 0x48, 0x00, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x70,
	0x75, 0x73, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x73,
	0x68, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x3d, 0x0a,
	0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4f,
	0x70, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x3d, 0x0a, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x70,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x6f, 0x63, 0x73, 0x4f,
	0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79,
	0x6e, 0x63, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x34, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x70,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x55, 0x70,
	0x4f, 0x70, 0x48, 0x00, 0x52, 0x02, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x4c, 0x6f, 0x67, 0x73, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x4d,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x48, 0x00, 0x52,
	0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a,
	0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x6f, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4f,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x47,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46,
	0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xcd, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x39, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x04,
	0x70, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04,
	0x70, 0x75, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x36, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x30, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x02, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x50, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x4f, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x46,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0xf5, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x03,
	0x67, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x1a, 0x75, 0x0a,
	0x03, 0x52, 0x65, 0x66, 0x12, 0x32, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x33, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x47,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x42, 0x05, 0x0a,
	0x03, 0x72, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x07,
	0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x1a, 0xed, 0x03, 0x0a, 0x03, 0x47, 0x69, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x47,
	0x69, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x12, 0x33, 0x0a, 0x03, 0x73, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x47, 0x69, 0x74, 0x2e, 0x53, 0x53, 0x48, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x73, 0x68, 0x1a, 0x3f, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x5d, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x57, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x06, 0x0a, 0x04, 0x4e, 0x6f, 0x6f, 0x70, 0x1a,
	0x43, 0x0a, 0x04, 0x55, 0x70, 0x4f, 0x70, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f,
	0x62, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x52, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x1a, 0x63, 0x0a, 0x08, 0x55, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x55, 0x72, 0x6c, 0x1a, 0x0c, 0x0a, 0x0a, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x1a, 0x10, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x68, 0x0a, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x1a, 0xf2, 0x02, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x9e, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x2c, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x4f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x1a, 0x76, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x1a, 0x39,
	0x0a, 0x06, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x1a, 0x4c, 0x0a, 0x0a, 0x50, 0x75, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x4a, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x4f, 0x70, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x1a, 0x4e, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x69, 0x0a, 0x06, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0c,
	0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xba, 0x01, 0x0a,
	0x06, 0x4c, 0x6f, 0x67, 0x73, 0x4f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x8f, 0x01, 0x0a, 0x09, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x4f, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xb8, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x75,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x46, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0x95,
	0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x63, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x63, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x68, 0x63, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x09, 0x68, 0x63, 0x6c,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x8d, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x12, 0x36, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x80, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x12, 0x40, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x1a, 0x5b, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x08, 0x0a,
	0x06, 0x44, 0x6f, 0x63, 0x73, 0x4f, 0x70, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x7c, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x1a, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x1a, 0x12, 0x0a, 0x10, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x08, 0x0a,
	0x06, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x1a, 0xa5, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x12, 0x3f,
	0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x66, 0x1a,
	0x4c, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f,
	0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0xdd, 0x01,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4a, 0x6f, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x6b, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x52, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x05, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04,
	0x08, 0x44, 0x10, 0x64, 0x22, 0xf9, 0x04, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x45, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x1a, 0x62, 0x0a, 0x0b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xb4, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x58, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x26, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x2c, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xf0, 0x13, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4f, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x06, 0x0a, 0x04, 0x4f,
	0x70, 0x65, 0x6e, 0x1a, 0xc4, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x5a, 0x0a, 0x08, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x1a, 0xba, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x1a, 0xc0, 0x0b, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x52, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x68, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x03,
	0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x55, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x74, 0x65, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x52, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x1a, 0x46, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x1a, 0x2e, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x1a, 0x31, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x1a, 0x36, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x69, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x5a,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x68, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77,
	0x12, 0x5c, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x77,
	0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x54, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x1a, 0x21, 0x0a, 0x09, 0x53, 0x74, 0x65, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x1a, 0x6e, 0x0a, 0x04, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x1a, 0x31, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x6c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x75, 0x0a,
	0x06, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x79, 0x49,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x1a, 0x3a, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4e, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x73, 0x22, 0xfd, 0x05, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x51, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x1a, 0x26, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x1a, 0x05, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x1a, 0x42, 0x0a, 0x08, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x31,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x1a, 0x0b, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x4f, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4a, 0x6f,
	0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x1a, 0x3a, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x1a, 0x21, 0x0a,
	0x09, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x98, 0x01,
	0x0a, 0x21, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6c, 0x73, 0x53, 0x6b,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x53, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0e, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x5d, 0x0a, 0x0d, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x6c, 0x73, 0x53, 0x6b, 0x69,
	0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x70, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x53, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x03, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3f,
	0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5e, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a,
	0x93, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x12, 0x45, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x47,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0x57, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x4e, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x4e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22,
	0x97, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x19, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x12, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x22, 0x46, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x47, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x66, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x22, 0xbb, 0x05, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x45, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x60, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x6a, 0x6f,
	0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x52,
	0x10, 0x6a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x22, 0x3c, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x30, 0x0a,
	0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22,
	0x5d, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x5e,
	0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0xa8,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4f, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0xbd, 0x02, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x22, 0x5f, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x22, 0xa2, 0x06, 0x0a, 0x0e,
	0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x45,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60,
	0x0a, 0x07, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x6a, 0x6f, 0x62,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x10,
	0x6a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x22, 0x9a, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x4d,
	0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe0, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x08, 0x54, 0x72, 0x69, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02,
	0x22, 0x5a, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb7, 0x03, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5b, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x98, 0x0a, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x68, 0x61, 0x73, 0x45, 0x78, 0x65, 0x63, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x67,
	0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xf0, 0x01, 0x0a, 0x07, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x55, 0x0a, 0x13, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x22, 0x30, 0x0a, 0x0b,
	0x4c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x22, 0xa8,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x95, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xb4, 0x02, 0x0a,
	0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4d, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41,
	0x4c, 0x10, 0x02, 0x22, 0x4d, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x22, 0x4e, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xb1, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0e,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x66, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x12, 0x4a, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xa0,
	0x09, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75,
	0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x12,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x91, 0x02, 0x0a, 0x07,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x6a, 0x6f, 0x62, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x10, 0x6a,
	0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x22,
	0x40, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10,
	0x03, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x14,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x12, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x62, 0x0a, 0x19, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x63, 0x0a, 0x1a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x64, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22,
	0x4d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0xec,
	0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x35, 0x0a,
	0x1c, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x22, 0xd5, 0x0a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x0e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x1a, 0xb1, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55,
	0x0a, 0x11, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x66, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x63, 0x0a, 0x15, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x68,
	0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x25,
	0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x78, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xdb, 0x02, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x1a, 0x95, 0x01, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0xbb, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x21, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x50, 0x50, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x01, 0x22, 0xeb, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x66, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01,
	0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61,
	0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x07,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x1a, 0xa9, 0x01, 0x0a, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x22, 0x50, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x62, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xde,
	0x05, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x48,
	0x0a, 0x05, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6f, 0x66, 0x1a,
	0xac, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x70, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x54, 0x59, 0x52,
	0x03, 0x70, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x1b,
	0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x84, 0x01, 0x0a, 0x03,
	0x50, 0x54, 0x59, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12,
	0x51, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x1a, 0x62, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0xb0, 0x03, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x65, 0x78, 0x69, 0x74, 0x1a, 0x06, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x1a, 0x1a, 0x0a,
	0x04, 0x45, 0x78, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x9d, 0x01, 0x0a, 0x06, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x65, 0x63, 0x22, 0x58,
	0x0a, 0x18, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xdb, 0x06, 0x0a, 0x10, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a,
	0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x08,
	0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x52, 0x07, 0x65,
	0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x50, 0x0a,
	0x0b, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x52, 0x4c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0a, 0x75, 0x72, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x53, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x6d, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x54, 0x59, 0x52, 0x03,
	0x70, 0x74, 0x79, 0x1a, 0x5d, 0x0a, 0x0a, 0x55, 0x52, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0xe1, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x57, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xf2, 0x04, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x4a, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x3d, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x1a, 0x1a, 0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa0, 0x01,
	0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x52, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x2e, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f,
	0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10, 0x02,
	0x1a, 0x31, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xd4, 0x01, 0x0a,
	0x16, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x35, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x45, 0x6f, 0x66, 0x12, 0x48, 0x0a, 0x05, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x6e, 0x63, 0x68,
	0x12, 0x18, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x06, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x51, 0x0a,
	0x11, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x1a, 0x66, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xd7, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x1a, 0x33, 0x0a,
	0x06, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x31, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x2b, 0x0a,
	0x07, 0x48, 0x4d, 0x41, 0x43, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2a, 0x0a, 0x12, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x40, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x61, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x22, 0xfb, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3f,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12,
	0x51, 0x0a, 0x11, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x10, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x28, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x31, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x88, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x06, 0x0a, 0x04, 0x4f, 0x70, 0x65,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1a, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x65, 0x78, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xa5, 0x03, 0x0a, 0x08, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0xa8, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0x1f, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4c, 0x54, 0x10,
	0x01, 0x1a, 0x2f, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x1a, 0xbc, 0x01, 0x0a, 0x09, 0x42, 0x6f, 0x6c, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x42, 0x6f, 0x6c, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3a, 0x0a, 0x15, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x63, 0x6c,
	0x46, 0x6d, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x63, 0x6c, 0x22, 0x3b, 0x0a,
	0x16, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x63, 0x6c, 0x46, 0x6d, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x68, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x63, 0x6c, 0x2a, 0x98, 0x01, 0x0a, 0x1b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x10, 0x08, 0x32, 0xa7, 0x36, 0x0a, 0x08, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x54, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f,
	0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x12, 0x29, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x49,
	0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6d, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x49, 0x44,
	0x43, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x10, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x28, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x67, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x70, 0x0a, 0x11, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x23, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x76, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x6a, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x29, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x32, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x61, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01, 0x12,
	0x64, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x6a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x23, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x21, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x12, 0x56, 0x0a, 0x09, 0x5f, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12,
	0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2a,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x01, 0x12, 0x4e, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x70, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x65, 0x64,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x0f, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2a, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x71,
	0x0a, 0x14, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x67, 0x0a, 0x0e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x63, 0x6c,
	0x46, 0x6d, 0x74, 0x12, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x63, 0x6c, 0x46, 0x6d, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x63, 0x6c, 0x46,
	0x6d, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x12, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x15, 0x5a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_server_proto_server_proto_rawDescOnce sync.Once
	file_internal_server_proto_server_proto_rawDescData = file_internal_server_proto_server_proto_rawDesc
)

func file_internal_server_proto_server_proto_rawDescGZIP() []byte {
	file_internal_server_proto_server_proto_rawDescOnce.Do(func() {
		file_internal_server_proto_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_server_proto_server_proto_rawDescData)
	})
	return file_internal_server_proto_server_proto_rawDescData
}

var file_internal_server_proto_server_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_internal_server_proto_server_proto_msgTypes = make([]protoimpl.MessageInfo, 302)
var file_internal_server_proto_server_proto_goTypes = []interface{}{
	(ResourceCategoryDisplayHint)(0),           // 0: hashicorp.waypoint.ResourceCategoryDisplayHint
	(Project_Format)(0),                        // 1: hashicorp.waypoint.Project.Format
	(Component_Type)(0),                        // 2: hashicorp.waypoint.Component.Type
	(Status_State)(0),                          // 3: hashicorp.waypoint.Status.State
	(Operation_PhysicalState)(0),               // 4: hashicorp.waypoint.Operation.PhysicalState
	(OperationOrder_Order)(0),                  // 5: hashicorp.waypoint.OperationOrder.Order
	(OIDCAuthMethod_Kind)(0),                   // 6: hashicorp.waypoint.OIDCAuthMethod.Kind
	(Job_State)(0),                             // 7: hashicorp.waypoint.Job.State
	(UpsertDeploymentRequest_Tristate)(0),      // 8: hashicorp.waypoint.UpsertDeploymentRequest.Tristate
	(Deployment_LoadDetails)(0),                // 9: hashicorp.waypoint.Deployment.LoadDetails
	(Instance_Type)(0),                         // 10: hashicorp.waypoint.Instance.Type
	(Release_LoadDetails)(0),                   // 11: hashicorp.waypoint.Release.LoadDetails
	(LogBatch_Entry_Source)(0),                 // 12: hashicorp.waypoint.LogBatch.Entry.Source
	(ExecStreamResponse_Output_Channel)(0),     // 13: hashicorp.waypoint.ExecStreamResponse.Output.Channel
	(EntrypointExecRequest_Output_Channel)(0),  // 14: hashicorp.waypoint.EntrypointExecRequest.Output.Channel
	(Snapshot_Header_Format)(0),                // 15: hashicorp.waypoint.Snapshot.Header.Format
	(*GetVersionInfoResponse)(nil),             // 16: hashicorp.waypoint.GetVersionInfoResponse
	(*VersionInfo)(nil),                        // 17: hashicorp.waypoint.VersionInfo
	(*Application)(nil),                        // 18: hashicorp.waypoint.Application
	(*Variable)(nil),                           // 19: hashicorp.waypoint.Variable
	(*Project)(nil),                            // 20: hashicorp.waypoint.Project
	(*Workspace)(nil),                          // 21: hashicorp.waypoint.Workspace
	(*User)(nil),                               // 22: hashicorp.waypoint.User
	(*Ref)(nil),                                // 23: hashicorp.waypoint.Ref
	(*Component)(nil),                          // 24: hashicorp.waypoint.Component
	(*Status)(nil),                             // 25: hashicorp.waypoint.Status
	(*StatusFilter)(nil),                       // 26: hashicorp.waypoint.StatusFilter
	(*Operation)(nil),                          // 27: hashicorp.waypoint.Operation
	(*OperationOrder)(nil),                     // 28: hashicorp.waypoint.OperationOrder
	(*Generation)(nil),                         // 29: hashicorp.waypoint.Generation
	(*DeclaredResource)(nil),                   // 30: hashicorp.waypoint.DeclaredResource
	(*TaskLaunchInfo)(nil),                     // 31: hashicorp.waypoint.TaskLaunchInfo
	(*GetUserRequest)(nil),                     // 32: hashicorp.waypoint.GetUserRequest
	(*GetUserResponse)(nil),                    // 33: hashicorp.waypoint.GetUserResponse
	(*ListUsersResponse)(nil),                  // 34: hashicorp.waypoint.ListUsersResponse
	(*UpdateUserRequest)(nil),                  // 35: hashicorp.waypoint.UpdateUserRequest
	(*UpdateUserResponse)(nil),                 // 36: hashicorp.waypoint.UpdateUserResponse
	(*DeleteUserRequest)(nil),                  // 37: hashicorp.waypoint.DeleteUserRequest
	(*AuthMethod)(nil),                         // 38: hashicorp.waypoint.AuthMethod
	(*OIDCAuthMethod)(nil),                     // 39: hashicorp.waypoint.OIDCAuthMethod
	(*UpsertAuthMethodRequest)(nil),            // 40: hashicorp.waypoint.UpsertAuthMethodRequest
	(*UpsertAuthMethodResponse)(nil),           // 41: hashicorp.waypoint.UpsertAuthMethodResponse
	(*GetAuthMethodRequest)(nil),               // 42: hashicorp.waypoint.GetAuthMethodRequest
	(*GetAuthMethodResponse)(nil),              // 43: hashicorp.waypoint.GetAuthMethodResponse
	(*DeleteAuthMethodRequest)(nil),            // 44: hashicorp.waypoint.DeleteAuthMethodRequest
	(*ListAuthMethodsResponse)(nil),            // 45: hashicorp.waypoint.ListAuthMethodsResponse
	(*ListOIDCAuthMethodsResponse)(nil),        // 46: hashicorp.waypoint.ListOIDCAuthMethodsResponse
	(*GetOIDCAuthURLRequest)(nil),              // 47: hashicorp.waypoint.GetOIDCAuthURLRequest
	(*GetOIDCAuthURLResponse)(nil),             // 48: hashicorp.waypoint.GetOIDCAuthURLResponse
	(*CompleteOIDCAuthRequest)(nil),            // 49: hashicorp.waypoint.CompleteOIDCAuthRequest
	(*CompleteOIDCAuthResponse)(nil),           // 50: hashicorp.waypoint.CompleteOIDCAuthResponse
	(*QueueJobRequest)(nil),                    // 51: hashicorp.waypoint.QueueJobRequest
	(*QueueJobResponse)(nil),                   // 52: hashicorp.waypoint.QueueJobResponse
	(*CancelJobRequest)(nil),                   // 53: hashicorp.waypoint.CancelJobRequest
	(*ValidateJobRequest)(nil),                 // 54: hashicorp.waypoint.ValidateJobRequest
	(*ValidateJobResponse)(nil),                // 55: hashicorp.waypoint.ValidateJobResponse
	(*Job)(nil),                                // 56: hashicorp.waypoint.Job
	(*Documentation)(nil),                      // 57: hashicorp.waypoint.Documentation
	(*GetJobRequest)(nil),                      // 58: hashicorp.waypoint.GetJobRequest
	(*ListJobsRequest)(nil),                    // 59: hashicorp.waypoint.ListJobsRequest
	(*ListJobsResponse)(nil),                   // 60: hashicorp.waypoint.ListJobsResponse
	(*GetJobStreamRequest)(nil),                // 61: hashicorp.waypoint.GetJobStreamRequest
	(*GetJobStreamResponse)(nil),               // 62: hashicorp.waypoint.GetJobStreamResponse
	(*Runner)(nil),                             // 63: hashicorp.waypoint.Runner
	(*RunnerConfigRequest)(nil),                // 64: hashicorp.waypoint.RunnerConfigRequest
	(*RunnerConfigResponse)(nil),               // 65: hashicorp.waypoint.RunnerConfigResponse
	(*RunnerConfig)(nil),                       // 66: hashicorp.waypoint.RunnerConfig
	(*RunnerJobStreamRequest)(nil),             // 67: hashicorp.waypoint.RunnerJobStreamRequest
	(*RunnerJobStreamResponse)(nil),            // 68: hashicorp.waypoint.RunnerJobStreamResponse
	(*RunnerGetDeploymentConfigRequest)(nil),   // 69: hashicorp.waypoint.RunnerGetDeploymentConfigRequest
	(*RunnerGetDeploymentConfigResponse)(nil),  // 70: hashicorp.waypoint.RunnerGetDeploymentConfigResponse
	(*GetRunnerRequest)(nil),                   // 71: hashicorp.waypoint.GetRunnerRequest
	(*SetServerConfigRequest)(nil),             // 72: hashicorp.waypoint.SetServerConfigRequest
	(*GetServerConfigResponse)(nil),            // 73: hashicorp.waypoint.GetServerConfigResponse
	(*ServerConfig)(nil),                       // 74: hashicorp.waypoint.ServerConfig
	(*CreateHostnameRequest)(nil),              // 75: hashicorp.waypoint.CreateHostnameRequest
	(*CreateHostnameResponse)(nil),             // 76: hashicorp.waypoint.CreateHostnameResponse
	(*ListHostnamesRequest)(nil),               // 77: hashicorp.waypoint.ListHostnamesRequest
	(*ListHostnamesResponse)(nil),              // 78: hashicorp.waypoint.ListHostnamesResponse
	(*DeleteHostnameRequest)(nil),              // 79: hashicorp.waypoint.DeleteHostnameRequest
	(*Hostname)(nil),                           // 80: hashicorp.waypoint.Hostname
	(*ListWorkspacesRequest)(nil),              // 81: hashicorp.waypoint.ListWorkspacesRequest
	(*ListWorkspacesResponse)(nil),             // 82: hashicorp.waypoint.ListWorkspacesResponse
	(*GetWorkspaceRequest)(nil),                // 83: hashicorp.waypoint.GetWorkspaceRequest
	(*GetWorkspaceResponse)(nil),               // 84: hashicorp.waypoint.GetWorkspaceResponse
	(*UpsertProjectRequest)(nil),               // 85: hashicorp.waypoint.UpsertProjectRequest
	(*UpsertProjectResponse)(nil),              // 86: hashicorp.waypoint.UpsertProjectResponse
	(*GetProjectRequest)(nil),                  // 87: hashicorp.waypoint.GetProjectRequest
	(*GetProjectResponse)(nil),                 // 88: hashicorp.waypoint.GetProjectResponse
	(*ListProjectsResponse)(nil),               // 89: hashicorp.waypoint.ListProjectsResponse
	(*UpsertApplicationRequest)(nil),           // 90: hashicorp.waypoint.UpsertApplicationRequest
	(*UpsertApplicationResponse)(nil),          // 91: hashicorp.waypoint.UpsertApplicationResponse
	(*UpsertBuildRequest)(nil),                 // 92: hashicorp.waypoint.UpsertBuildRequest
	(*UpsertBuildResponse)(nil),                // 93: hashicorp.waypoint.UpsertBuildResponse
	(*ListBuildsRequest)(nil),                  // 94: hashicorp.waypoint.ListBuildsRequest
	(*ListBuildsResponse)(nil),                 // 95: hashicorp.waypoint.ListBuildsResponse
	(*GetLatestBuildRequest)(nil),              // 96: hashicorp.waypoint.GetLatestBuildRequest
	(*GetBuildRequest)(nil),                    // 97: hashicorp.waypoint.GetBuildRequest
	(*Build)(nil),                              // 98: hashicorp.waypoint.Build
	(*Artifact)(nil),                           // 99: hashicorp.waypoint.Artifact
	(*UpsertPushedArtifactRequest)(nil),        // 100: hashicorp.waypoint.UpsertPushedArtifactRequest
	(*UpsertPushedArtifactResponse)(nil),       // 101: hashicorp.waypoint.UpsertPushedArtifactResponse
	(*GetLatestPushedArtifactRequest)(nil),     // 102: hashicorp.waypoint.GetLatestPushedArtifactRequest
	(*GetPushedArtifactRequest)(nil),           // 103: hashicorp.waypoint.GetPushedArtifactRequest
	(*ListPushedArtifactsRequest)(nil),         // 104: hashicorp.waypoint.ListPushedArtifactsRequest
	(*ListPushedArtifactsResponse)(nil),        // 105: hashicorp.waypoint.ListPushedArtifactsResponse
	(*PushedArtifact)(nil),                     // 106: hashicorp.waypoint.PushedArtifact
	(*GetDeploymentRequest)(nil),               // 107: hashicorp.waypoint.GetDeploymentRequest
	(*UpsertDeploymentRequest)(nil),            // 108: hashicorp.waypoint.UpsertDeploymentRequest
	(*UpsertDeploymentResponse)(nil),           // 109: hashicorp.waypoint.UpsertDeploymentResponse
	(*ListDeploymentsRequest)(nil),             // 110: hashicorp.waypoint.ListDeploymentsRequest
	(*ListDeploymentsResponse)(nil),            // 111: hashicorp.waypoint.ListDeploymentsResponse
	(*Deployment)(nil),                         // 112: hashicorp.waypoint.Deployment
	(*DeploymentExpanded)(nil),                 // 113: hashicorp.waypoint.DeploymentExpanded
	(*ListInstancesRequest)(nil),               // 114: hashicorp.waypoint.ListInstancesRequest
	(*ListInstancesResponse)(nil),              // 115: hashicorp.waypoint.ListInstancesResponse
	(*Instance)(nil),                           // 116: hashicorp.waypoint.Instance
	(*UpsertReleaseRequest)(nil),               // 117: hashicorp.waypoint.UpsertReleaseRequest
	(*UpsertReleaseResponse)(nil),              // 118: hashicorp.waypoint.UpsertReleaseResponse
	(*GetLatestReleaseRequest)(nil),            // 119: hashicorp.waypoint.GetLatestReleaseRequest
	(*ListReleasesRequest)(nil),                // 120: hashicorp.waypoint.ListReleasesRequest
	(*ListReleasesResponse)(nil),               // 121: hashicorp.waypoint.ListReleasesResponse
	(*GetReleaseRequest)(nil),                  // 122: hashicorp.waypoint.GetReleaseRequest
	(*Release)(nil),                            // 123: hashicorp.waypoint.Release
	(*ReleaseExpanded)(nil),                    // 124: hashicorp.waypoint.ReleaseExpanded
	(*UpsertStatusReportRequest)(nil),          // 125: hashicorp.waypoint.UpsertStatusReportRequest
	(*UpsertStatusReportResponse)(nil),         // 126: hashicorp.waypoint.UpsertStatusReportResponse
	(*GetLatestStatusReportRequest)(nil),       // 127: hashicorp.waypoint.GetLatestStatusReportRequest
	(*ListStatusReportsRequest)(nil),           // 128: hashicorp.waypoint.ListStatusReportsRequest
	(*ListStatusReportsResponse)(nil),          // 129: hashicorp.waypoint.ListStatusReportsResponse
	(*GetStatusReportRequest)(nil),             // 130: hashicorp.waypoint.GetStatusReportRequest
	(*ExpediteStatusReportRequest)(nil),        // 131: hashicorp.waypoint.ExpediteStatusReportRequest
	(*ExpediteStatusReportResponse)(nil),       // 132: hashicorp.waypoint.ExpediteStatusReportResponse
	(*StatusReport)(nil),                       // 133: hashicorp.waypoint.StatusReport
	(*GetLogStreamRequest)(nil),                // 134: hashicorp.waypoint.GetLogStreamRequest
	(*LogBatch)(nil),                           // 135: hashicorp.waypoint.LogBatch
	(*ConfigVar)(nil),                          // 136: hashicorp.waypoint.ConfigVar
	(*ConfigSetRequest)(nil),                   // 137: hashicorp.waypoint.ConfigSetRequest
	(*ConfigSetResponse)(nil),                  // 138: hashicorp.waypoint.ConfigSetResponse
	(*ConfigGetRequest)(nil),                   // 139: hashicorp.waypoint.ConfigGetRequest
	(*ConfigGetResponse)(nil),                  // 140: hashicorp.waypoint.ConfigGetResponse
	(*ConfigSource)(nil),                       // 141: hashicorp.waypoint.ConfigSource
	(*SetConfigSourceRequest)(nil),             // 142: hashicorp.waypoint.SetConfigSourceRequest
	(*GetConfigSourceRequest)(nil),             // 143: hashicorp.waypoint.GetConfigSourceRequest
	(*GetConfigSourceResponse)(nil),            // 144: hashicorp.waypoint.GetConfigSourceResponse
	(*ExecStreamRequest)(nil),                  // 145: hashicorp.waypoint.ExecStreamRequest
	(*ExecStreamResponse)(nil),                 // 146: hashicorp.waypoint.ExecStreamResponse
	(*EntrypointConfigRequest)(nil),            // 147: hashicorp.waypoint.EntrypointConfigRequest
	(*EntrypointConfigResponse)(nil),           // 148: hashicorp.waypoint.EntrypointConfigResponse
	(*EntrypointConfig)(nil),                   // 149: hashicorp.waypoint.EntrypointConfig
	(*EntrypointLogBatch)(nil),                 // 150: hashicorp.waypoint.EntrypointLogBatch
	(*EntrypointExecRequest)(nil),              // 151: hashicorp.waypoint.EntrypointExecRequest
	(*EntrypointExecResponse)(nil),             // 152: hashicorp.waypoint.EntrypointExecResponse
	(*TokenTransport)(nil),                     // 153: hashicorp.waypoint.TokenTransport
	(*Token)(nil),                              // 154: hashicorp.waypoint.Token
	(*HMACKey)(nil),                            // 155: hashicorp.waypoint.HMACKey
	(*DecodeTokenRequest)(nil),                 // 156: hashicorp.waypoint.DecodeTokenRequest
	(*DecodeTokenResponse)(nil),                // 157: hashicorp.waypoint.DecodeTokenResponse
	(*LoginTokenRequest)(nil),                  // 158: hashicorp.waypoint.LoginTokenRequest
	(*InviteTokenRequest)(nil),                 // 159: hashicorp.waypoint.InviteTokenRequest
	(*NewTokenResponse)(nil),                   // 160: hashicorp.waypoint.NewTokenResponse
	(*ConvertInviteTokenRequest)(nil),          // 161: hashicorp.waypoint.ConvertInviteTokenRequest
	(*CreateSnapshotResponse)(nil),             // 162: hashicorp.waypoint.CreateSnapshotResponse
	(*RestoreSnapshotRequest)(nil),             // 163: hashicorp.waypoint.RestoreSnapshotRequest
	(*Snapshot)(nil),                           // 164: hashicorp.waypoint.Snapshot
	(*WaypointHclFmtRequest)(nil),              // 165: hashicorp.waypoint.WaypointHclFmtRequest
	(*WaypointHclFmtResponse)(nil),             // 166: hashicorp.waypoint.WaypointHclFmtResponse
	(*VersionInfo_ProtocolVersion)(nil),        // 167: hashicorp.waypoint.VersionInfo.ProtocolVersion
	(*Variable_File)(nil),                      // 168: hashicorp.waypoint.Variable.File
	(*Variable_VCS)(nil),                       // 169: hashicorp.waypoint.Variable.VCS
	(*Variable_HclPos)(nil),                    // 170: hashicorp.waypoint.Variable.HclPos
	(*Variable_HclRange)(nil),                  // 171: hashicorp.waypoint.Variable.HclRange
	(*Project_Poll)(nil),                       // 172: hashicorp.waypoint.Project.Poll
	(*Project_AppStatusPoll)(nil),              // 173: hashicorp.waypoint.Project.AppStatusPoll
	(*Workspace_Project)(nil),                  // 174: hashicorp.waypoint.Workspace.Project
	(*Workspace_Application)(nil),              // 175: hashicorp.waypoint.Workspace.Application
	(*User_Link)(nil),                          // 176: hashicorp.waypoint.User.Link
	(*User_Link_OIDC)(nil),                     // 177: hashicorp.waypoint.User.Link.OIDC
	(*Ref_Global)(nil),                         // 178: hashicorp.waypoint.Ref.Global
	(*Ref_Application)(nil),                    // 179: hashicorp.waypoint.Ref.Application
	(*Ref_Project)(nil),                        // 180: hashicorp.waypoint.Ref.Project
	(*Ref_Workspace)(nil),                      // 181: hashicorp.waypoint.Ref.Workspace
	(*Ref_Component)(nil),                      // 182: hashicorp.waypoint.Ref.Component
	(*Ref_Operation)(nil),                      // 183: hashicorp.waypoint.Ref.Operation
	(*Ref_OperationSeq)(nil),                   // 184: hashicorp.waypoint.Ref.OperationSeq
	(*Ref_Runner)(nil),                         // 185: hashicorp.waypoint.Ref.Runner
	(*Ref_RunnerId)(nil),                       // 186: hashicorp.waypoint.Ref.RunnerId
	(*Ref_RunnerAny)(nil),                      // 187: hashicorp.waypoint.Ref.RunnerAny
	(*Ref_User)(nil),                           // 188: hashicorp.waypoint.Ref.User
	(*Ref_UserId)(nil),                         // 189: hashicorp.waypoint.Ref.UserId
	(*Ref_UserUsername)(nil),                   // 190: hashicorp.waypoint.Ref.UserUsername
	(*Ref_AuthMethod)(nil),                     // 191: hashicorp.waypoint.Ref.AuthMethod
	(*Ref_DeclaredResource)(nil),               // 192: hashicorp.waypoint.Ref.DeclaredResource
	(*StatusFilter_Filter)(nil),                // 193: hashicorp.waypoint.StatusFilter.Filter
	nil,                                        // 194: hashicorp.waypoint.TaskLaunchInfo.EnvironmentVariablesEntry
	(*AuthMethod_OIDC)(nil),                    // 195: hashicorp.waypoint.AuthMethod.OIDC
	nil,                                        // 196: hashicorp.waypoint.AuthMethod.OIDC.ClaimMappingsEntry
	nil,                                        // 197: hashicorp.waypoint.AuthMethod.OIDC.ListClaimMappingsEntry
	nil,                                        // 198: hashicorp.waypoint.Job.LabelsEntry
	nil,                                        // 199: hashicorp.waypoint.Job.DataSourceOverridesEntry
	(*Job_Result)(nil),                         // 200: hashicorp.waypoint.Job.Result
	(*Job_DataSource)(nil),                     // 201: hashicorp.waypoint.Job.DataSource
	(*Job_Local)(nil),                          // 202: hashicorp.waypoint.Job.Local
	(*Job_Git)(nil),                            // 203: hashicorp.waypoint.Job.Git
	(*Job_Noop)(nil),                           // 204: hashicorp.waypoint.Job.Noop
	(*Job_UpOp)(nil),                           // 205: hashicorp.waypoint.Job.UpOp
	(*Job_UpResult)(nil),                       // 206: hashicorp.waypoint.Job.UpResult
	(*Job_ValidateOp)(nil),                     // 207: hashicorp.waypoint.Job.ValidateOp
	(*Job_ValidateResult)(nil),                 // 208: hashicorp.waypoint.Job.ValidateResult
	(*Job_AuthOp)(nil),                         // 209: hashicorp.waypoint.Job.AuthOp
	(*Job_AuthResult)(nil),                     // 210: hashicorp.waypoint.Job.AuthResult
	(*Job_BuildOp)(nil),                        // 211: hashicorp.waypoint.Job.BuildOp
	(*Job_BuildResult)(nil),                    // 212: hashicorp.waypoint.Job.BuildResult
	(*Job_PushOp)(nil),                         // 213: hashicorp.waypoint.Job.PushOp
	(*Job_PushResult)(nil),                     // 214: hashicorp.waypoint.Job.PushResult
	(*Job_DeployOp)(nil),                       // 215: hashicorp.waypoint.Job.DeployOp
	(*Job_DeployResult)(nil),                   // 216: hashicorp.waypoint.Job.DeployResult
	(*Job_ExecOp)(nil),                         // 217: hashicorp.waypoint.Job.ExecOp
	(*Job_ExecResult)(nil),                     // 218: hashicorp.waypoint.Job.ExecResult
	(*Job_LogsOp)(nil),                         // 219: hashicorp.waypoint.Job.LogsOp
	(*Job_DestroyOp)(nil),                      // 220: hashicorp.waypoint.Job.DestroyOp
	(*Job_ReleaseOp)(nil),                      // 221: hashicorp.waypoint.Job.ReleaseOp
	(*Job_ReleaseResult)(nil),                  // 222: hashicorp.waypoint.Job.ReleaseResult
	(*Job_TaskPluginParams)(nil),               // 223: hashicorp.waypoint.Job.TaskPluginParams
	(*Job_StartTaskLaunchOp)(nil),              // 224: hashicorp.waypoint.Job.StartTaskLaunchOp
	(*Job_StartTaskResult)(nil),                // 225: hashicorp.waypoint.Job.StartTaskResult
	(*Job_StopTaskLaunchOp)(nil),               // 226: hashicorp.waypoint.Job.StopTaskLaunchOp
	(*Job_StatusReportOp)(nil),                 // 227: hashicorp.waypoint.Job.StatusReportOp
	(*Job_StatusReportResult)(nil),             // 228: hashicorp.waypoint.Job.StatusReportResult
	(*Job_DocsOp)(nil),                         // 229: hashicorp.waypoint.Job.DocsOp
	(*Job_DocsResult)(nil),                     // 230: hashicorp.waypoint.Job.DocsResult
	(*Job_ConfigSyncOp)(nil),                   // 231: hashicorp.waypoint.Job.ConfigSyncOp
	(*Job_ConfigSyncResult)(nil),               // 232: hashicorp.waypoint.Job.ConfigSyncResult
	(*Job_PollOp)(nil),                         // 233: hashicorp.waypoint.Job.PollOp
	(*Job_PollResult)(nil),                     // 234: hashicorp.waypoint.Job.PollResult
	(*Job_QueueProjectOp)(nil),                 // 235: hashicorp.waypoint.Job.QueueProjectOp
	(*Job_QueueProjectResult)(nil),             // 236: hashicorp.waypoint.Job.QueueProjectResult
	(*Job_DataSource_Ref)(nil),                 // 237: hashicorp.waypoint.Job.DataSource.Ref
	(*Job_Git_Basic)(nil),                      // 238: hashicorp.waypoint.Job.Git.Basic
	(*Job_Git_SSH)(nil),                        // 239: hashicorp.waypoint.Job.Git.SSH
	(*Job_Git_Ref)(nil),                        // 240: hashicorp.waypoint.Job.Git.Ref
	(*Job_AuthResult_Result)(nil),              // 241: hashicorp.waypoint.Job.AuthResult.Result
	(*Job_DocsResult_Result)(nil),              // 242: hashicorp.waypoint.Job.DocsResult.Result
	(*Job_QueueProjectResult_Application)(nil), // 243: hashicorp.waypoint.Job.QueueProjectResult.Application
	nil,                                                     // 244: hashicorp.waypoint.Documentation.FieldsEntry
	(*Documentation_Field)(nil),                             // 245: hashicorp.waypoint.Documentation.Field
	(*Documentation_Mapper)(nil),                            // 246: hashicorp.waypoint.Documentation.Mapper
	(*GetJobStreamResponse_Open)(nil),                       // 247: hashicorp.waypoint.GetJobStreamResponse.Open
	(*GetJobStreamResponse_State)(nil),                      // 248: hashicorp.waypoint.GetJobStreamResponse.State
	(*GetJobStreamResponse_Download)(nil),                   // 249: hashicorp.waypoint.GetJobStreamResponse.Download
	(*GetJobStreamResponse_Terminal)(nil),                   // 250: hashicorp.waypoint.GetJobStreamResponse.Terminal
	(*GetJobStreamResponse_Error)(nil),                      // 251: hashicorp.waypoint.GetJobStreamResponse.Error
	(*GetJobStreamResponse_Complete)(nil),                   // 252: hashicorp.waypoint.GetJobStreamResponse.Complete
	(*GetJobStreamResponse_Terminal_Event)(nil),             // 253: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event
	(*GetJobStreamResponse_Terminal_Event_Status)(nil),      // 254: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Status
	(*GetJobStreamResponse_Terminal_Event_Line)(nil),        // 255: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Line
	(*GetJobStreamResponse_Terminal_Event_Raw)(nil),         // 256: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Raw
	(*GetJobStreamResponse_Terminal_Event_NamedValue)(nil),  // 257: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.NamedValue
	(*GetJobStreamResponse_Terminal_Event_NamedValues)(nil), // 258: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.NamedValues
	(*GetJobStreamResponse_Terminal_Event_TableEntry)(nil),  // 259: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.TableEntry
	(*GetJobStreamResponse_Terminal_Event_TableRow)(nil),    // 260: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.TableRow
	(*GetJobStreamResponse_Terminal_Event_Table)(nil),       // 261: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Table
	(*GetJobStreamResponse_Terminal_Event_StepGroup)(nil),   // 262: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.StepGroup
	(*GetJobStreamResponse_Terminal_Event_Step)(nil),        // 263: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Step
	(*RunnerConfigRequest_Open)(nil),                        // 264: hashicorp.waypoint.RunnerConfigRequest.Open
	(*RunnerJobStreamRequest_Request)(nil),                  // 265: hashicorp.waypoint.RunnerJobStreamRequest.Request
	(*RunnerJobStreamRequest_Ack)(nil),                      // 266: hashicorp.waypoint.RunnerJobStreamRequest.Ack
	(*RunnerJobStreamRequest_Complete)(nil),                 // 267: hashicorp.waypoint.RunnerJobStreamRequest.Complete
	(*RunnerJobStreamRequest_Error)(nil),                    // 268: hashicorp.waypoint.RunnerJobStreamRequest.Error
	(*RunnerJobStreamRequest_Heartbeat)(nil),                // 269: hashicorp.waypoint.RunnerJobStreamRequest.Heartbeat
	(*RunnerJobStreamResponse_JobAssignment)(nil),           // 270: hashicorp.waypoint.RunnerJobStreamResponse.JobAssignment
	(*RunnerJobStreamResponse_JobCancel)(nil),               // 271: hashicorp.waypoint.RunnerJobStreamResponse.JobCancel
	(*ServerConfig_AdvertiseAddr)(nil),                      // 272: hashicorp.waypoint.ServerConfig.AdvertiseAddr
	nil,                                                     // 273: hashicorp.waypoint.Hostname.TargetLabelsEntry
	(*Hostname_Target)(nil),                                 // 274: hashicorp.waypoint.Hostname.Target
	(*Hostname_TargetApp)(nil),                              // 275: hashicorp.waypoint.Hostname.TargetApp
	nil,                                                     // 276: hashicorp.waypoint.Build.LabelsEntry
	(*Build_Preload)(nil),                                   // 277: hashicorp.waypoint.Build.Preload
	nil,                                                     // 278: hashicorp.waypoint.PushedArtifact.LabelsEntry
	(*PushedArtifact_Preload)(nil),                          // 279: hashicorp.waypoint.PushedArtifact.Preload
	nil,                                                     // 280: hashicorp.waypoint.Deployment.LabelsEntry
	(*Deployment_Preload)(nil),                              // 281: hashicorp.waypoint.Deployment.Preload
	(*ListInstancesRequest_Application)(nil),                // 282: hashicorp.waypoint.ListInstancesRequest.Application
	nil,                                                     // 283: hashicorp.waypoint.Release.LabelsEntry
	(*Release_Preload)(nil),                                 // 284: hashicorp.waypoint.Release.Preload
	(*StatusReport_Resource)(nil),                           // 285: hashicorp.waypoint.StatusReport.Resource
	(*StatusReport_Health)(nil),                             // 286: hashicorp.waypoint.StatusReport.Health
	(*GetLogStreamRequest_Application)(nil),                 // 287: hashicorp.waypoint.GetLogStreamRequest.Application
	(*LogBatch_Entry)(nil),                                  // 288: hashicorp.waypoint.LogBatch.Entry
	(*ConfigVar_DynamicVal)(nil),                            // 289: hashicorp.waypoint.ConfigVar.DynamicVal
	nil,                                                     // 290: hashicorp.waypoint.ConfigVar.DynamicVal.ConfigEntry
	nil,                                                     // 291: hashicorp.waypoint.ConfigSource.ConfigEntry
	(*ExecStreamRequest_Start)(nil),                         // 292: hashicorp.waypoint.ExecStreamRequest.Start
	(*ExecStreamRequest_Input)(nil),                         // 293: hashicorp.waypoint.ExecStreamRequest.Input
	(*ExecStreamRequest_PTY)(nil),                           // 294: hashicorp.waypoint.ExecStreamRequest.PTY
	(*ExecStreamRequest_WindowSize)(nil),                    // 295: hashicorp.waypoint.ExecStreamRequest.WindowSize
	(*ExecStreamResponse_Open)(nil),                         // 296: hashicorp.waypoint.ExecStreamResponse.Open
	(*ExecStreamResponse_Exit)(nil),                         // 297: hashicorp.waypoint.ExecStreamResponse.Exit
	(*ExecStreamResponse_Output)(nil),                       // 298: hashicorp.waypoint.ExecStreamResponse.Output
	(*EntrypointConfig_Exec)(nil),                           // 299: hashicorp.waypoint.EntrypointConfig.Exec
	(*EntrypointConfig_URLService)(nil),                     // 300: hashicorp.waypoint.EntrypointConfig.URLService
	(*EntrypointConfig_DeploymentInfo)(nil),                 // 301: hashicorp.waypoint.EntrypointConfig.DeploymentInfo
	nil,                                                     // 302: hashicorp.waypoint.EntrypointConfig.DeploymentInfo.LabelsEntry
	(*EntrypointExecRequest_Open)(nil),                      // 303: hashicorp.waypoint.EntrypointExecRequest.Open
	(*EntrypointExecRequest_Exit)(nil),                      // 304: hashicorp.waypoint.EntrypointExecRequest.Exit
	(*EntrypointExecRequest_Output)(nil),                    // 305: hashicorp.waypoint.EntrypointExecRequest.Output
	(*EntrypointExecRequest_Error)(nil),                     // 306: hashicorp.waypoint.EntrypointExecRequest.Error
	nil,                                                     // 307: hashicorp.waypoint.TokenTransport.MetadataEntry
	(*Token_Login)(nil),                                     // 308: hashicorp.waypoint.Token.Login
	(*Token_Invite)(nil),                                    // 309: hashicorp.waypoint.Token.Invite
	(*Token_Entrypoint)(nil),                                // 310: hashicorp.waypoint.Token.Entrypoint
	(*Token_Invite_Signup)(nil),                             // 311: hashicorp.waypoint.Token.Invite.Signup
	(*CreateSnapshotResponse_Open)(nil),                     // 312: hashicorp.waypoint.CreateSnapshotResponse.Open
	(*RestoreSnapshotRequest_Open)(nil),                     // 313: hashicorp.waypoint.RestoreSnapshotRequest.Open
	(*Snapshot_Header)(nil),                                 // 314: hashicorp.waypoint.Snapshot.Header
	(*Snapshot_Trailer)(nil),                                // 315: hashicorp.waypoint.Snapshot.Trailer
	(*Snapshot_BoltChunk)(nil),                              // 316: hashicorp.waypoint.Snapshot.BoltChunk
	nil,                                                     // 317: hashicorp.waypoint.Snapshot.BoltChunk.ItemsEntry
	(*emptypb.Empty)(nil),                                   // 318: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),                           // 319: google.protobuf.Timestamp
	(*status.Status)(nil),                                   // 320: google.rpc.Status
	(*anypb.Any)(nil),                                       // 321: google.protobuf.Any
}
var file_internal_server_proto_server_proto_depIdxs = []int32{
	17,  // 0: hashicorp.waypoint.GetVersionInfoResponse.info:type_name -> hashicorp.waypoint.VersionInfo
	167, // 1: hashicorp.waypoint.VersionInfo.api:type_name -> hashicorp.waypoint.VersionInfo.ProtocolVersion
	167, // 2: hashicorp.waypoint.VersionInfo.entrypoint:type_name -> hashicorp.waypoint.VersionInfo.ProtocolVersion
	180, // 3: hashicorp.waypoint.Application.project:type_name -> hashicorp.waypoint.Ref.Project
	318, // 4: hashicorp.waypoint.Variable.cli:type_name -> google.protobuf.Empty
	168, // 5: hashicorp.waypoint.Variable.file:type_name -> hashicorp.waypoint.Variable.File
	318, // 6: hashicorp.waypoint.Variable.env:type_name -> google.protobuf.Empty
	169, // 7: hashicorp.waypoint.Variable.vcs:type_name -> hashicorp.waypoint.Variable.VCS
	318, // 8: hashicorp.waypoint.Variable.server:type_name -> google.protobuf.Empty
	18,  // 9: hashicorp.waypoint.Project.applications:type_name -> hashicorp.waypoint.Application
	201, // 10: hashicorp.waypoint.Project.data_source:type_name -> hashicorp.waypoint.Job.DataSource
	172, // 11: hashicorp.waypoint.Project.data_source_poll:type_name -> hashicorp.waypoint.Project.Poll
	1,   // 12: hashicorp.waypoint.Project.waypoint_hcl_format:type_name -> hashicorp.waypoint.Project.Format
	19,  // 13: hashicorp.waypoint.Project.variables:type_name -> hashicorp.waypoint.Variable
	173, // 14: hashicorp.waypoint.Project.status_report_poll:type_name -> hashicorp.waypoint.Project.AppStatusPoll
	174, // 15: hashicorp.waypoint.Workspace.projects:type_name -> hashicorp.waypoint.Workspace.Project
	319, // 16: hashicorp.waypoint.Workspace.active_time:type_name -> google.protobuf.Timestamp
	176, // 17: hashicorp.waypoint.User.links:type_name -> hashicorp.waypoint.User.Link
	2,   // 18: hashicorp.waypoint.Component.type:type_name -> hashicorp.waypoint.Component.Type
	3,   // 19: hashicorp.waypoint.Status.state:type_name -> hashicorp.waypoint.Status.State
	320, // 20: hashicorp.waypoint.Status.error:type_name -> google.rpc.Status
	319, // 21: hashicorp.waypoint.Status.start_time:type_name -> google.protobuf.Timestamp
	319, // 22: hashicorp.waypoint.Status.complete_time:type_name -> google.protobuf.Timestamp
	193, // 23: hashicorp.waypoint.StatusFilter.filters:type_name -> hashicorp.waypoint.StatusFilter.Filter
	5,   // 24: hashicorp.waypoint.OperationOrder.order:type_name -> hashicorp.waypoint.OperationOrder.Order
	321, // 25: hashicorp.waypoint.DeclaredResource.state:type_name -> google.protobuf.Any
	0,   // 26: hashicorp.waypoint.DeclaredResource.category_display_hint:type_name -> hashicorp.waypoint.ResourceCategoryDisplayHint
	194, // 27: hashicorp.waypoint.TaskLaunchInfo.environment_variables:type_name -> hashicorp.waypoint.TaskLaunchInfo.EnvironmentVariablesEntry
	188, // 28: hashicorp.waypoint.GetUserRequest.user:type_name -> hashicorp.waypoint.Ref.User
	22,  // 29: hashicorp.waypoint.GetUserResponse.user:type_name -> hashicorp.waypoint.User
	22,  // 30: hashicorp.waypoint.ListUsersResponse.users:type_name -> hashicorp.waypoint.User
	22,  // 31: hashicorp.waypoint.UpdateUserRequest.user:type_name -> hashicorp.waypoint.User
	22,  // 32: hashicorp.waypoint.UpdateUserResponse.user:type_name -> hashicorp.waypoint.User
	188, // 33: hashicorp.waypoint.DeleteUserRequest.user:type_name -> hashicorp.waypoint.Ref.User
	195, // 34: hashicorp.waypoint.AuthMethod.oidc:type_name -> hashicorp.waypoint.AuthMethod.OIDC
	6,   // 35: hashicorp.waypoint.OIDCAuthMethod.kind:type_name -> hashicorp.waypoint.OIDCAuthMethod.Kind
	38,  // 36: hashicorp.waypoint.UpsertAuthMethodRequest.auth_method:type_name -> hashicorp.waypoint.AuthMethod
	38,  // 37: hashicorp.waypoint.UpsertAuthMethodResponse.auth_method:type_name -> hashicorp.waypoint.AuthMethod
	191, // 38: hashicorp.waypoint.GetAuthMethodRequest.auth_method:type_name -> hashicorp.waypoint.Ref.AuthMethod
	38,  // 39: hashicorp.waypoint.GetAuthMethodResponse.auth_method:type_name -> hashicorp.waypoint.AuthMethod
	191, // 40: hashicorp.waypoint.DeleteAuthMethodRequest.auth_method:type_name -> hashicorp.waypoint.Ref.AuthMethod
	38,  // 41: hashicorp.waypoint.ListAuthMethodsResponse.auth_methods:type_name -> hashicorp.waypoint.AuthMethod
	39,  // 42: hashicorp.waypoint.ListOIDCAuthMethodsResponse.auth_methods:type_name -> hashicorp.waypoint.OIDCAuthMethod
	191, // 43: hashicorp.waypoint.GetOIDCAuthURLRequest.auth_method:type_name -> hashicorp.waypoint.Ref.AuthMethod
	191, // 44: hashicorp.waypoint.CompleteOIDCAuthRequest.auth_method:type_name -> hashicorp.waypoint.Ref.AuthMethod
	22,  // 45: hashicorp.waypoint.CompleteOIDCAuthResponse.user:type_name -> hashicorp.waypoint.User
	56,  // 46: hashicorp.waypoint.QueueJobRequest.job:type_name -> hashicorp.waypoint.Job
	56,  // 47: hashicorp.waypoint.ValidateJobRequest.job:type_name -> hashicorp.waypoint.Job
	320, // 48: hashicorp.waypoint.ValidateJobResponse.validation_error:type_name -> google.rpc.Status
	179, // 49: hashicorp.waypoint.Job.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 50: hashicorp.waypoint.Job.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	185, // 51: hashicorp.waypoint.Job.target_runner:type_name -> hashicorp.waypoint.Ref.Runner
	198, // 52: hashicorp.waypoint.Job.labels:type_name -> hashicorp.waypoint.Job.LabelsEntry
	201, // 53: hashicorp.waypoint.Job.data_source:type_name -> hashicorp.waypoint.Job.DataSource
	199, // 54: hashicorp.waypoint.Job.data_source_overrides:type_name -> hashicorp.waypoint.Job.DataSourceOverridesEntry
	19,  // 55: hashicorp.waypoint.Job.variables:type_name -> hashicorp.waypoint.Variable
	204, // 56: hashicorp.waypoint.Job.noop:type_name -> hashicorp.waypoint.Job.Noop
	211, // 57: hashicorp.waypoint.Job.build:type_name -> hashicorp.waypoint.Job.BuildOp
	213, // 58: hashicorp.waypoint.Job.push:type_name -> hashicorp.waypoint.Job.PushOp
	215, // 59: hashicorp.waypoint.Job.deploy:type_name -> hashicorp.waypoint.Job.DeployOp
	220, // 60: hashicorp.waypoint.Job.destroy:type_name -> hashicorp.waypoint.Job.DestroyOp
	221, // 61: hashicorp.waypoint.Job.release:type_name -> hashicorp.waypoint.Job.ReleaseOp
	207, // 62: hashicorp.waypoint.Job.validate:type_name -> hashicorp.waypoint.Job.ValidateOp
	209, // 63: hashicorp.waypoint.Job.auth:type_name -> hashicorp.waypoint.Job.AuthOp
	229, // 64: hashicorp.waypoint.Job.docs:type_name -> hashicorp.waypoint.Job.DocsOp
	231, // 65: hashicorp.waypoint.Job.config_sync:type_name -> hashicorp.waypoint.Job.ConfigSyncOp
	217, // 66: hashicorp.waypoint.Job.exec:type_name -> hashicorp.waypoint.Job.ExecOp
	205, // 67: hashicorp.waypoint.Job.up:type_name -> hashicorp.waypoint.Job.UpOp
	219, // 68: hashicorp.waypoint.Job.logs:type_name -> hashicorp.waypoint.Job.LogsOp
	235, // 69: hashicorp.waypoint.Job.queue_project:type_name -> hashicorp.waypoint.Job.QueueProjectOp
	233, // 70: hashicorp.waypoint.Job.poll:type_name -> hashicorp.waypoint.Job.PollOp
	227, // 71: hashicorp.waypoint.Job.status_report:type_name -> hashicorp.waypoint.Job.StatusReportOp
	224, // 72: hashicorp.waypoint.Job.start_task:type_name -> hashicorp.waypoint.Job.StartTaskLaunchOp
	226, // 73: hashicorp.waypoint.Job.stop_task:type_name -> hashicorp.waypoint.Job.StopTaskLaunchOp
	7,   // 74: hashicorp.waypoint.Job.state:type_name -> hashicorp.waypoint.Job.State
	186, // 75: hashicorp.waypoint.Job.assigned_runner:type_name -> hashicorp.waypoint.Ref.RunnerId
	319, // 76: hashicorp.waypoint.Job.queue_time:type_name -> google.protobuf.Timestamp
	319, // 77: hashicorp.waypoint.Job.assign_time:type_name -> google.protobuf.Timestamp
	319, // 78: hashicorp.waypoint.Job.ack_time:type_name -> google.protobuf.Timestamp
	319, // 79: hashicorp.waypoint.Job.complete_time:type_name -> google.protobuf.Timestamp
	237, // 80: hashicorp.waypoint.Job.data_source_ref:type_name -> hashicorp.waypoint.Job.DataSource.Ref
	320, // 81: hashicorp.waypoint.Job.error:type_name -> google.rpc.Status
	200, // 82: hashicorp.waypoint.Job.result:type_name -> hashicorp.waypoint.Job.Result
	319, // 83: hashicorp.waypoint.Job.cancel_time:type_name -> google.protobuf.Timestamp
	319, // 84: hashicorp.waypoint.Job.expire_time:type_name -> google.protobuf.Timestamp
	244, // 85: hashicorp.waypoint.Documentation.fields:type_name -> hashicorp.waypoint.Documentation.FieldsEntry
	246, // 86: hashicorp.waypoint.Documentation.mappers:type_name -> hashicorp.waypoint.Documentation.Mapper
	56,  // 87: hashicorp.waypoint.ListJobsResponse.jobs:type_name -> hashicorp.waypoint.Job
	247, // 88: hashicorp.waypoint.GetJobStreamResponse.open:type_name -> hashicorp.waypoint.GetJobStreamResponse.Open
	248, // 89: hashicorp.waypoint.GetJobStreamResponse.state:type_name -> hashicorp.waypoint.GetJobStreamResponse.State
	250, // 90: hashicorp.waypoint.GetJobStreamResponse.terminal:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal
	249, // 91: hashicorp.waypoint.GetJobStreamResponse.download:type_name -> hashicorp.waypoint.GetJobStreamResponse.Download
	251, // 92: hashicorp.waypoint.GetJobStreamResponse.error:type_name -> hashicorp.waypoint.GetJobStreamResponse.Error
	252, // 93: hashicorp.waypoint.GetJobStreamResponse.complete:type_name -> hashicorp.waypoint.GetJobStreamResponse.Complete
	24,  // 94: hashicorp.waypoint.Runner.components:type_name -> hashicorp.waypoint.Component
	264, // 95: hashicorp.waypoint.RunnerConfigRequest.open:type_name -> hashicorp.waypoint.RunnerConfigRequest.Open
	66,  // 96: hashicorp.waypoint.RunnerConfigResponse.config:type_name -> hashicorp.waypoint.RunnerConfig
	136, // 97: hashicorp.waypoint.RunnerConfig.config_vars:type_name -> hashicorp.waypoint.ConfigVar
	265, // 98: hashicorp.waypoint.RunnerJobStreamRequest.request:type_name -> hashicorp.waypoint.RunnerJobStreamRequest.Request
	266, // 99: hashicorp.waypoint.RunnerJobStreamRequest.ack:type_name -> hashicorp.waypoint.RunnerJobStreamRequest.Ack
	267, // 100: hashicorp.waypoint.RunnerJobStreamRequest.complete:type_name -> hashicorp.waypoint.RunnerJobStreamRequest.Complete
	268, // 101: hashicorp.waypoint.RunnerJobStreamRequest.error:type_name -> hashicorp.waypoint.RunnerJobStreamRequest.Error
	250, // 102: hashicorp.waypoint.RunnerJobStreamRequest.terminal:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal
	249, // 103: hashicorp.waypoint.RunnerJobStreamRequest.download:type_name -> hashicorp.waypoint.GetJobStreamResponse.Download
	269, // 104: hashicorp.waypoint.RunnerJobStreamRequest.heartbeat:type_name -> hashicorp.waypoint.RunnerJobStreamRequest.Heartbeat
	270, // 105: hashicorp.waypoint.RunnerJobStreamResponse.assignment:type_name -> hashicorp.waypoint.RunnerJobStreamResponse.JobAssignment
	271, // 106: hashicorp.waypoint.RunnerJobStreamResponse.cancel:type_name -> hashicorp.waypoint.RunnerJobStreamResponse.JobCancel
	74,  // 107: hashicorp.waypoint.SetServerConfigRequest.config:type_name -> hashicorp.waypoint.ServerConfig
	74,  // 108: hashicorp.waypoint.GetServerConfigResponse.config:type_name -> hashicorp.waypoint.ServerConfig
	272, // 109: hashicorp.waypoint.ServerConfig.advertise_addrs:type_name -> hashicorp.waypoint.ServerConfig.AdvertiseAddr
	274, // 110: hashicorp.waypoint.CreateHostnameRequest.target:type_name -> hashicorp.waypoint.Hostname.Target
	80,  // 111: hashicorp.waypoint.CreateHostnameResponse.hostname:type_name -> hashicorp.waypoint.Hostname
	274, // 112: hashicorp.waypoint.ListHostnamesRequest.target:type_name -> hashicorp.waypoint.Hostname.Target
	80,  // 113: hashicorp.waypoint.ListHostnamesResponse.hostnames:type_name -> hashicorp.waypoint.Hostname
	273, // 114: hashicorp.waypoint.Hostname.target_labels:type_name -> hashicorp.waypoint.Hostname.TargetLabelsEntry
	318, // 115: hashicorp.waypoint.ListWorkspacesRequest.global:type_name -> google.protobuf.Empty
	180, // 116: hashicorp.waypoint.ListWorkspacesRequest.project:type_name -> hashicorp.waypoint.Ref.Project
	179, // 117: hashicorp.waypoint.ListWorkspacesRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	21,  // 118: hashicorp.waypoint.ListWorkspacesResponse.workspaces:type_name -> hashicorp.waypoint.Workspace
	181, // 119: hashicorp.waypoint.GetWorkspaceRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	21,  // 120: hashicorp.waypoint.GetWorkspaceResponse.workspace:type_name -> hashicorp.waypoint.Workspace
	20,  // 121: hashicorp.waypoint.UpsertProjectRequest.project:type_name -> hashicorp.waypoint.Project
	20,  // 122: hashicorp.waypoint.UpsertProjectResponse.project:type_name -> hashicorp.waypoint.Project
	180, // 123: hashicorp.waypoint.GetProjectRequest.project:type_name -> hashicorp.waypoint.Ref.Project
	20,  // 124: hashicorp.waypoint.GetProjectResponse.project:type_name -> hashicorp.waypoint.Project
	174, // 125: hashicorp.waypoint.GetProjectResponse.workspaces:type_name -> hashicorp.waypoint.Workspace.Project
	180, // 126: hashicorp.waypoint.ListProjectsResponse.projects:type_name -> hashicorp.waypoint.Ref.Project
	180, // 127: hashicorp.waypoint.UpsertApplicationRequest.project:type_name -> hashicorp.waypoint.Ref.Project
	18,  // 128: hashicorp.waypoint.UpsertApplicationResponse.application:type_name -> hashicorp.waypoint.Application
	98,  // 129: hashicorp.waypoint.UpsertBuildRequest.build:type_name -> hashicorp.waypoint.Build
	98,  // 130: hashicorp.waypoint.UpsertBuildResponse.build:type_name -> hashicorp.waypoint.Build
	179, // 131: hashicorp.waypoint.ListBuildsRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 132: hashicorp.waypoint.ListBuildsRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	28,  // 133: hashicorp.waypoint.ListBuildsRequest.order:type_name -> hashicorp.waypoint.OperationOrder
	98,  // 134: hashicorp.waypoint.ListBuildsResponse.builds:type_name -> hashicorp.waypoint.Build
	179, // 135: hashicorp.waypoint.GetLatestBuildRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 136: hashicorp.waypoint.GetLatestBuildRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	183, // 137: hashicorp.waypoint.GetBuildRequest.ref:type_name -> hashicorp.waypoint.Ref.Operation
	179, // 138: hashicorp.waypoint.Build.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 139: hashicorp.waypoint.Build.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	25,  // 140: hashicorp.waypoint.Build.status:type_name -> hashicorp.waypoint.Status
	24,  // 141: hashicorp.waypoint.Build.component:type_name -> hashicorp.waypoint.Component
	99,  // 142: hashicorp.waypoint.Build.artifact:type_name -> hashicorp.waypoint.Artifact
	276, // 143: hashicorp.waypoint.Build.labels:type_name -> hashicorp.waypoint.Build.LabelsEntry
	277, // 144: hashicorp.waypoint.Build.preload:type_name -> hashicorp.waypoint.Build.Preload
	321, // 145: hashicorp.waypoint.Artifact.artifact:type_name -> google.protobuf.Any
	106, // 146: hashicorp.waypoint.UpsertPushedArtifactRequest.artifact:type_name -> hashicorp.waypoint.PushedArtifact
	106, // 147: hashicorp.waypoint.UpsertPushedArtifactResponse.artifact:type_name -> hashicorp.waypoint.PushedArtifact
	179, // 148: hashicorp.waypoint.GetLatestPushedArtifactRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 149: hashicorp.waypoint.GetLatestPushedArtifactRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	183, // 150: hashicorp.waypoint.GetPushedArtifactRequest.ref:type_name -> hashicorp.waypoint.Ref.Operation
	179, // 151: hashicorp.waypoint.ListPushedArtifactsRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 152: hashicorp.waypoint.ListPushedArtifactsRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	26,  // 153: hashicorp.waypoint.ListPushedArtifactsRequest.status:type_name -> hashicorp.waypoint.StatusFilter
	28,  // 154: hashicorp.waypoint.ListPushedArtifactsRequest.order:type_name -> hashicorp.waypoint.OperationOrder
	106, // 155: hashicorp.waypoint.ListPushedArtifactsResponse.artifacts:type_name -> hashicorp.waypoint.PushedArtifact
	179, // 156: hashicorp.waypoint.PushedArtifact.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 157: hashicorp.waypoint.PushedArtifact.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	25,  // 158: hashicorp.waypoint.PushedArtifact.status:type_name -> hashicorp.waypoint.Status
	24,  // 159: hashicorp.waypoint.PushedArtifact.component:type_name -> hashicorp.waypoint.Component
	99,  // 160: hashicorp.waypoint.PushedArtifact.artifact:type_name -> hashicorp.waypoint.Artifact
	278, // 161: hashicorp.waypoint.PushedArtifact.labels:type_name -> hashicorp.waypoint.PushedArtifact.LabelsEntry
	98,  // 162: hashicorp.waypoint.PushedArtifact.build:type_name -> hashicorp.waypoint.Build
	279, // 163: hashicorp.waypoint.PushedArtifact.preload:type_name -> hashicorp.waypoint.PushedArtifact.Preload
	183, // 164: hashicorp.waypoint.GetDeploymentRequest.ref:type_name -> hashicorp.waypoint.Ref.Operation
	9,   // 165: hashicorp.waypoint.GetDeploymentRequest.load_details:type_name -> hashicorp.waypoint.Deployment.LoadDetails
	112, // 166: hashicorp.waypoint.UpsertDeploymentRequest.deployment:type_name -> hashicorp.waypoint.Deployment
	8,   // 167: hashicorp.waypoint.UpsertDeploymentRequest.auto_hostname:type_name -> hashicorp.waypoint.UpsertDeploymentRequest.Tristate
	112, // 168: hashicorp.waypoint.UpsertDeploymentResponse.deployment:type_name -> hashicorp.waypoint.Deployment
	179, // 169: hashicorp.waypoint.ListDeploymentsRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 170: hashicorp.waypoint.ListDeploymentsRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	26,  // 171: hashicorp.waypoint.ListDeploymentsRequest.status:type_name -> hashicorp.waypoint.StatusFilter
	4,   // 172: hashicorp.waypoint.ListDeploymentsRequest.physical_state:type_name -> hashicorp.waypoint.Operation.PhysicalState
	28,  // 173: hashicorp.waypoint.ListDeploymentsRequest.order:type_name -> hashicorp.waypoint.OperationOrder
	9,   // 174: hashicorp.waypoint.ListDeploymentsRequest.load_details:type_name -> hashicorp.waypoint.Deployment.LoadDetails
	112, // 175: hashicorp.waypoint.ListDeploymentsResponse.deployments:type_name -> hashicorp.waypoint.Deployment
	179, // 176: hashicorp.waypoint.Deployment.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 177: hashicorp.waypoint.Deployment.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	29,  // 178: hashicorp.waypoint.Deployment.generation:type_name -> hashicorp.waypoint.Generation
	4,   // 179: hashicorp.waypoint.Deployment.state:type_name -> hashicorp.waypoint.Operation.PhysicalState
	25,  // 180: hashicorp.waypoint.Deployment.status:type_name -> hashicorp.waypoint.Status
	24,  // 181: hashicorp.waypoint.Deployment.component:type_name -> hashicorp.waypoint.Component
	321, // 182: hashicorp.waypoint.Deployment.deployment:type_name -> google.protobuf.Any
	280, // 183: hashicorp.waypoint.Deployment.labels:type_name -> hashicorp.waypoint.Deployment.LabelsEntry
	30,  // 184: hashicorp.waypoint.Deployment.declared_resources:type_name -> hashicorp.waypoint.DeclaredResource
	281, // 185: hashicorp.waypoint.Deployment.preload:type_name -> hashicorp.waypoint.Deployment.Preload
	112, // 186: hashicorp.waypoint.DeploymentExpanded.deployment:type_name -> hashicorp.waypoint.Deployment
	133, // 187: hashicorp.waypoint.DeploymentExpanded.latest_status_report:type_name -> hashicorp.waypoint.StatusReport
	282, // 188: hashicorp.waypoint.ListInstancesRequest.application:type_name -> hashicorp.waypoint.ListInstancesRequest.Application
	116, // 189: hashicorp.waypoint.ListInstancesResponse.instances:type_name -> hashicorp.waypoint.Instance
	179, // 190: hashicorp.waypoint.Instance.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 191: hashicorp.waypoint.Instance.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	10,  // 192: hashicorp.waypoint.Instance.type:type_name -> hashicorp.waypoint.Instance.Type
	123, // 193: hashicorp.waypoint.UpsertReleaseRequest.release:type_name -> hashicorp.waypoint.Release
	123, // 194: hashicorp.waypoint.UpsertReleaseResponse.release:type_name -> hashicorp.waypoint.Release
	179, // 195: hashicorp.waypoint.GetLatestReleaseRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 196: hashicorp.waypoint.GetLatestReleaseRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	11,  // 197: hashicorp.waypoint.GetLatestReleaseRequest.load_details:type_name -> hashicorp.waypoint.Release.LoadDetails
	179, // 198: hashicorp.waypoint.ListReleasesRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 199: hashicorp.waypoint.ListReleasesRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	26,  // 200: hashicorp.waypoint.ListReleasesRequest.status:type_name -> hashicorp.waypoint.StatusFilter
	4,   // 201: hashicorp.waypoint.ListReleasesRequest.physical_state:type_name -> hashicorp.waypoint.Operation.PhysicalState
	28,  // 202: hashicorp.waypoint.ListReleasesRequest.order:type_name -> hashicorp.waypoint.OperationOrder
	11,  // 203: hashicorp.waypoint.ListReleasesRequest.load_details:type_name -> hashicorp.waypoint.Release.LoadDetails
	123, // 204: hashicorp.waypoint.ListReleasesResponse.releases:type_name -> hashicorp.waypoint.Release
	183, // 205: hashicorp.waypoint.GetReleaseRequest.ref:type_name -> hashicorp.waypoint.Ref.Operation
	11,  // 206: hashicorp.waypoint.GetReleaseRequest.load_details:type_name -> hashicorp.waypoint.Release.LoadDetails
	179, // 207: hashicorp.waypoint.Release.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 208: hashicorp.waypoint.Release.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	25,  // 209: hashicorp.waypoint.Release.status:type_name -> hashicorp.waypoint.Status
	4,   // 210: hashicorp.waypoint.Release.state:type_name -> hashicorp.waypoint.Operation.PhysicalState
	24,  // 211: hashicorp.waypoint.Release.component:type_name -> hashicorp.waypoint.Component
	321, // 212: hashicorp.waypoint.Release.release:type_name -> google.protobuf.Any
	283, // 213: hashicorp.waypoint.Release.labels:type_name -> hashicorp.waypoint.Release.LabelsEntry
	30,  // 214: hashicorp.waypoint.Release.declared_resources:type_name -> hashicorp.waypoint.DeclaredResource
	284, // 215: hashicorp.waypoint.Release.preload:type_name -> hashicorp.waypoint.Release.Preload
	123, // 216: hashicorp.waypoint.ReleaseExpanded.release:type_name -> hashicorp.waypoint.Release
	133, // 217: hashicorp.waypoint.ReleaseExpanded.latest_status_report:type_name -> hashicorp.waypoint.StatusReport
	133, // 218: hashicorp.waypoint.UpsertStatusReportRequest.status_report:type_name -> hashicorp.waypoint.StatusReport
	133, // 219: hashicorp.waypoint.UpsertStatusReportResponse.status_report:type_name -> hashicorp.waypoint.StatusReport
	179, // 220: hashicorp.waypoint.GetLatestStatusReportRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 221: hashicorp.waypoint.GetLatestStatusReportRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	26,  // 222: hashicorp.waypoint.ListStatusReportsRequest.status:type_name -> hashicorp.waypoint.StatusFilter
	28,  // 223: hashicorp.waypoint.ListStatusReportsRequest.order:type_name -> hashicorp.waypoint.OperationOrder
	179, // 224: hashicorp.waypoint.ListStatusReportsRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 225: hashicorp.waypoint.ListStatusReportsRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	183, // 226: hashicorp.waypoint.ListStatusReportsRequest.deployment:type_name -> hashicorp.waypoint.Ref.Operation
	183, // 227: hashicorp.waypoint.ListStatusReportsRequest.release:type_name -> hashicorp.waypoint.Ref.Operation
	133, // 228: hashicorp.waypoint.ListStatusReportsResponse.status_reports:type_name -> hashicorp.waypoint.StatusReport
	183, // 229: hashicorp.waypoint.GetStatusReportRequest.ref:type_name -> hashicorp.waypoint.Ref.Operation
	181, // 230: hashicorp.waypoint.ExpediteStatusReportRequest.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	183, // 231: hashicorp.waypoint.ExpediteStatusReportRequest.deployment:type_name -> hashicorp.waypoint.Ref.Operation
	183, // 232: hashicorp.waypoint.ExpediteStatusReportRequest.release:type_name -> hashicorp.waypoint.Ref.Operation
	179, // 233: hashicorp.waypoint.StatusReport.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 234: hashicorp.waypoint.StatusReport.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	25,  // 235: hashicorp.waypoint.StatusReport.status:type_name -> hashicorp.waypoint.Status
	321, // 236: hashicorp.waypoint.StatusReport.status_report:type_name -> google.protobuf.Any
	286, // 237: hashicorp.waypoint.StatusReport.health:type_name -> hashicorp.waypoint.StatusReport.Health
	286, // 238: hashicorp.waypoint.StatusReport.resources_health:type_name -> hashicorp.waypoint.StatusReport.Health
	319, // 239: hashicorp.waypoint.StatusReport.generated_time:type_name -> google.protobuf.Timestamp
	285, // 240: hashicorp.waypoint.StatusReport.resources:type_name -> hashicorp.waypoint.StatusReport.Resource
	287, // 241: hashicorp.waypoint.GetLogStreamRequest.application:type_name -> hashicorp.waypoint.GetLogStreamRequest.Application
	288, // 242: hashicorp.waypoint.LogBatch.lines:type_name -> hashicorp.waypoint.LogBatch.Entry
	179, // 243: hashicorp.waypoint.ConfigVar.application:type_name -> hashicorp.waypoint.Ref.Application
	180, // 244: hashicorp.waypoint.ConfigVar.project:type_name -> hashicorp.waypoint.Ref.Project
	185, // 245: hashicorp.waypoint.ConfigVar.runner:type_name -> hashicorp.waypoint.Ref.Runner
	318, // 246: hashicorp.waypoint.ConfigVar.unset:type_name -> google.protobuf.Empty
	289, // 247: hashicorp.waypoint.ConfigVar.dynamic:type_name -> hashicorp.waypoint.ConfigVar.DynamicVal
	136, // 248: hashicorp.waypoint.ConfigSetRequest.variables:type_name -> hashicorp.waypoint.ConfigVar
	179, // 249: hashicorp.waypoint.ConfigGetRequest.application:type_name -> hashicorp.waypoint.Ref.Application
	180, // 250: hashicorp.waypoint.ConfigGetRequest.project:type_name -> hashicorp.waypoint.Ref.Project
	186, // 251: hashicorp.waypoint.ConfigGetRequest.runner:type_name -> hashicorp.waypoint.Ref.RunnerId
	136, // 252: hashicorp.waypoint.ConfigGetResponse.variables:type_name -> hashicorp.waypoint.ConfigVar
	178, // 253: hashicorp.waypoint.ConfigSource.global:type_name -> hashicorp.waypoint.Ref.Global
	291, // 254: hashicorp.waypoint.ConfigSource.config:type_name -> hashicorp.waypoint.ConfigSource.ConfigEntry
	141, // 255: hashicorp.waypoint.SetConfigSourceRequest.config_source:type_name -> hashicorp.waypoint.ConfigSource
	178, // 256: hashicorp.waypoint.GetConfigSourceRequest.global:type_name -> hashicorp.waypoint.Ref.Global
	141, // 257: hashicorp.waypoint.GetConfigSourceResponse.config_sources:type_name -> hashicorp.waypoint.ConfigSource
	292, // 258: hashicorp.waypoint.ExecStreamRequest.start:type_name -> hashicorp.waypoint.ExecStreamRequest.Start
	293, // 259: hashicorp.waypoint.ExecStreamRequest.input:type_name -> hashicorp.waypoint.ExecStreamRequest.Input
	295, // 260: hashicorp.waypoint.ExecStreamRequest.winch:type_name -> hashicorp.waypoint.ExecStreamRequest.WindowSize
	318, // 261: hashicorp.waypoint.ExecStreamRequest.input_eof:type_name -> google.protobuf.Empty
	296, // 262: hashicorp.waypoint.ExecStreamResponse.open:type_name -> hashicorp.waypoint.ExecStreamResponse.Open
	298, // 263: hashicorp.waypoint.ExecStreamResponse.output:type_name -> hashicorp.waypoint.ExecStreamResponse.Output
	297, // 264: hashicorp.waypoint.ExecStreamResponse.exit:type_name -> hashicorp.waypoint.ExecStreamResponse.Exit
	10,  // 265: hashicorp.waypoint.EntrypointConfigRequest.type:type_name -> hashicorp.waypoint.Instance.Type
	149, // 266: hashicorp.waypoint.EntrypointConfigResponse.config:type_name -> hashicorp.waypoint.EntrypointConfig
	299, // 267: hashicorp.waypoint.EntrypointConfig.exec:type_name -> hashicorp.waypoint.EntrypointConfig.Exec
	136, // 268: hashicorp.waypoint.EntrypointConfig.env_vars:type_name -> hashicorp.waypoint.ConfigVar
	141, // 269: hashicorp.waypoint.EntrypointConfig.config_sources:type_name -> hashicorp.waypoint.ConfigSource
	300, // 270: hashicorp.waypoint.EntrypointConfig.url_service:type_name -> hashicorp.waypoint.EntrypointConfig.URLService
	301, // 271: hashicorp.waypoint.EntrypointConfig.deployment:type_name -> hashicorp.waypoint.EntrypointConfig.DeploymentInfo
	288, // 272: hashicorp.waypoint.EntrypointLogBatch.lines:type_name -> hashicorp.waypoint.LogBatch.Entry
	303, // 273: hashicorp.waypoint.EntrypointExecRequest.open:type_name -> hashicorp.waypoint.EntrypointExecRequest.Open
	304, // 274: hashicorp.waypoint.EntrypointExecRequest.exit:type_name -> hashicorp.waypoint.EntrypointExecRequest.Exit
	305, // 275: hashicorp.waypoint.EntrypointExecRequest.output:type_name -> hashicorp.waypoint.EntrypointExecRequest.Output
	306, // 276: hashicorp.waypoint.EntrypointExecRequest.error:type_name -> hashicorp.waypoint.EntrypointExecRequest.Error
	318, // 277: hashicorp.waypoint.EntrypointExecResponse.input_eof:type_name -> google.protobuf.Empty
	295, // 278: hashicorp.waypoint.EntrypointExecResponse.winch:type_name -> hashicorp.waypoint.ExecStreamRequest.WindowSize
	307, // 279: hashicorp.waypoint.TokenTransport.metadata:type_name -> hashicorp.waypoint.TokenTransport.MetadataEntry
	319, // 280: hashicorp.waypoint.Token.valid_until:type_name -> google.protobuf.Timestamp
	319, // 281: hashicorp.waypoint.Token.issued_time:type_name -> google.protobuf.Timestamp
	308, // 282: hashicorp.waypoint.Token.login:type_name -> hashicorp.waypoint.Token.Login
	309, // 283: hashicorp.waypoint.Token.invite:type_name -> hashicorp.waypoint.Token.Invite
	310, // 284: hashicorp.waypoint.Token.unused_entrypoint:type_name -> hashicorp.waypoint.Token.Entrypoint
	154, // 285: hashicorp.waypoint.DecodeTokenResponse.token:type_name -> hashicorp.waypoint.Token
	153, // 286: hashicorp.waypoint.DecodeTokenResponse.transport:type_name -> hashicorp.waypoint.TokenTransport
	188, // 287: hashicorp.waypoint.LoginTokenRequest.user:type_name -> hashicorp.waypoint.Ref.User
	308, // 288: hashicorp.waypoint.InviteTokenRequest.login:type_name -> hashicorp.waypoint.Token.Login
	311, // 289: hashicorp.waypoint.InviteTokenRequest.signup:type_name -> hashicorp.waypoint.Token.Invite.Signup
	310, // 290: hashicorp.waypoint.InviteTokenRequest.unused_entrypoint:type_name -> hashicorp.waypoint.Token.Entrypoint
	312, // 291: hashicorp.waypoint.CreateSnapshotResponse.open:type_name -> hashicorp.waypoint.CreateSnapshotResponse.Open
	313, // 292: hashicorp.waypoint.RestoreSnapshotRequest.open:type_name -> hashicorp.waypoint.RestoreSnapshotRequest.Open
	171, // 293: hashicorp.waypoint.Variable.File.hcl_range:type_name -> hashicorp.waypoint.Variable.HclRange
	171, // 294: hashicorp.waypoint.Variable.VCS.hcl_range:type_name -> hashicorp.waypoint.Variable.HclRange
	170, // 295: hashicorp.waypoint.Variable.HclRange.start:type_name -> hashicorp.waypoint.Variable.HclPos
	170, // 296: hashicorp.waypoint.Variable.HclRange.end:type_name -> hashicorp.waypoint.Variable.HclPos
	180, // 297: hashicorp.waypoint.Workspace.Project.project:type_name -> hashicorp.waypoint.Ref.Project
	181, // 298: hashicorp.waypoint.Workspace.Project.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	237, // 299: hashicorp.waypoint.Workspace.Project.data_source_ref:type_name -> hashicorp.waypoint.Job.DataSource.Ref
	319, // 300: hashicorp.waypoint.Workspace.Project.active_time:type_name -> google.protobuf.Timestamp
	175, // 301: hashicorp.waypoint.Workspace.Project.applications:type_name -> hashicorp.waypoint.Workspace.Application
	179, // 302: hashicorp.waypoint.Workspace.Application.application:type_name -> hashicorp.waypoint.Ref.Application
	319, // 303: hashicorp.waypoint.Workspace.Application.active_time:type_name -> google.protobuf.Timestamp
	177, // 304: hashicorp.waypoint.User.Link.oidc:type_name -> hashicorp.waypoint.User.Link.OIDC
	2,   // 305: hashicorp.waypoint.Ref.Component.type:type_name -> hashicorp.waypoint.Component.Type
	184, // 306: hashicorp.waypoint.Ref.Operation.sequence:type_name -> hashicorp.waypoint.Ref.OperationSeq
	179, // 307: hashicorp.waypoint.Ref.OperationSeq.application:type_name -> hashicorp.waypoint.Ref.Application
	187, // 308: hashicorp.waypoint.Ref.Runner.any:type_name -> hashicorp.waypoint.Ref.RunnerAny
	186, // 309: hashicorp.waypoint.Ref.Runner.id:type_name -> hashicorp.waypoint.Ref.RunnerId
	189, // 310: hashicorp.waypoint.Ref.User.id:type_name -> hashicorp.waypoint.Ref.UserId
	190, // 311: hashicorp.waypoint.Ref.User.username:type_name -> hashicorp.waypoint.Ref.UserUsername
	3,   // 312: hashicorp.waypoint.StatusFilter.Filter.state:type_name -> hashicorp.waypoint.Status.State
	196, // 313: hashicorp.waypoint.AuthMethod.OIDC.claim_mappings:type_name -> hashicorp.waypoint.AuthMethod.OIDC.ClaimMappingsEntry
	197, // 314: hashicorp.waypoint.AuthMethod.OIDC.list_claim_mappings:type_name -> hashicorp.waypoint.AuthMethod.OIDC.ListClaimMappingsEntry
	212, // 315: hashicorp.waypoint.Job.Result.build:type_name -> hashicorp.waypoint.Job.BuildResult
	214, // 316: hashicorp.waypoint.Job.Result.push:type_name -> hashicorp.waypoint.Job.PushResult
	216, // 317: hashicorp.waypoint.Job.Result.deploy:type_name -> hashicorp.waypoint.Job.DeployResult
	222, // 318: hashicorp.waypoint.Job.Result.release:type_name -> hashicorp.waypoint.Job.ReleaseResult
	208, // 319: hashicorp.waypoint.Job.Result.validate:type_name -> hashicorp.waypoint.Job.ValidateResult
	210, // 320: hashicorp.waypoint.Job.Result.auth:type_name -> hashicorp.waypoint.Job.AuthResult
	230, // 321: hashicorp.waypoint.Job.Result.docs:type_name -> hashicorp.waypoint.Job.DocsResult
	232, // 322: hashicorp.waypoint.Job.Result.config_sync:type_name -> hashicorp.waypoint.Job.ConfigSyncResult
	206, // 323: hashicorp.waypoint.Job.Result.up:type_name -> hashicorp.waypoint.Job.UpResult
	236, // 324: hashicorp.waypoint.Job.Result.queue_project:type_name -> hashicorp.waypoint.Job.QueueProjectResult
	234, // 325: hashicorp.waypoint.Job.Result.poll:type_name -> hashicorp.waypoint.Job.PollResult
	228, // 326: hashicorp.waypoint.Job.Result.status_report:type_name -> hashicorp.waypoint.Job.StatusReportResult
	225, // 327: hashicorp.waypoint.Job.Result.start_task:type_name -> hashicorp.waypoint.Job.StartTaskResult
	202, // 328: hashicorp.waypoint.Job.DataSource.local:type_name -> hashicorp.waypoint.Job.Local
	203, // 329: hashicorp.waypoint.Job.DataSource.git:type_name -> hashicorp.waypoint.Job.Git
	238, // 330: hashicorp.waypoint.Job.Git.basic:type_name -> hashicorp.waypoint.Job.Git.Basic
	239, // 331: hashicorp.waypoint.Job.Git.ssh:type_name -> hashicorp.waypoint.Job.Git.SSH
	221, // 332: hashicorp.waypoint.Job.UpOp.release:type_name -> hashicorp.waypoint.Job.ReleaseOp
	182, // 333: hashicorp.waypoint.Job.AuthOp.component:type_name -> hashicorp.waypoint.Ref.Component
	241, // 334: hashicorp.waypoint.Job.AuthResult.results:type_name -> hashicorp.waypoint.Job.AuthResult.Result
	98,  // 335: hashicorp.waypoint.Job.BuildResult.build:type_name -> hashicorp.waypoint.Build
	106, // 336: hashicorp.waypoint.Job.BuildResult.push:type_name -> hashicorp.waypoint.PushedArtifact
	98,  // 337: hashicorp.waypoint.Job.PushOp.build:type_name -> hashicorp.waypoint.Build
	106, // 338: hashicorp.waypoint.Job.PushResult.artifact:type_name -> hashicorp.waypoint.PushedArtifact
	106, // 339: hashicorp.waypoint.Job.DeployOp.artifact:type_name -> hashicorp.waypoint.PushedArtifact
	112, // 340: hashicorp.waypoint.Job.DeployResult.deployment:type_name -> hashicorp.waypoint.Deployment
	112, // 341: hashicorp.waypoint.Job.ExecOp.deployment:type_name -> hashicorp.waypoint.Deployment
	112, // 342: hashicorp.waypoint.Job.LogsOp.deployment:type_name -> hashicorp.waypoint.Deployment
	319, // 343: hashicorp.waypoint.Job.LogsOp.start_time:type_name -> google.protobuf.Timestamp
	318, // 344: hashicorp.waypoint.Job.DestroyOp.workspace:type_name -> google.protobuf.Empty
	112, // 345: hashicorp.waypoint.Job.DestroyOp.deployment:type_name -> hashicorp.waypoint.Deployment
	112, // 346: hashicorp.waypoint.Job.ReleaseOp.deployment:type_name -> hashicorp.waypoint.Deployment
	123, // 347: hashicorp.waypoint.Job.ReleaseResult.release:type_name -> hashicorp.waypoint.Release
	1,   // 348: hashicorp.waypoint.Job.TaskPluginParams.hcl_format:type_name -> hashicorp.waypoint.Project.Format
	31,  // 349: hashicorp.waypoint.Job.StartTaskLaunchOp.info:type_name -> hashicorp.waypoint.TaskLaunchInfo
	223, // 350: hashicorp.waypoint.Job.StartTaskLaunchOp.params:type_name -> hashicorp.waypoint.Job.TaskPluginParams
	321, // 351: hashicorp.waypoint.Job.StartTaskResult.state:type_name -> google.protobuf.Any
	321, // 352: hashicorp.waypoint.Job.StopTaskLaunchOp.state:type_name -> google.protobuf.Any
	223, // 353: hashicorp.waypoint.Job.StopTaskLaunchOp.params:type_name -> hashicorp.waypoint.Job.TaskPluginParams
	112, // 354: hashicorp.waypoint.Job.StatusReportOp.deployment:type_name -> hashicorp.waypoint.Deployment
	123, // 355: hashicorp.waypoint.Job.StatusReportOp.release:type_name -> hashicorp.waypoint.Release
	133, // 356: hashicorp.waypoint.Job.StatusReportResult.status_report:type_name -> hashicorp.waypoint.StatusReport
	242, // 357: hashicorp.waypoint.Job.DocsResult.results:type_name -> hashicorp.waypoint.Job.DocsResult.Result
	237, // 358: hashicorp.waypoint.Job.PollResult.old_ref:type_name -> hashicorp.waypoint.Job.DataSource.Ref
	237, // 359: hashicorp.waypoint.Job.PollResult.new_ref:type_name -> hashicorp.waypoint.Job.DataSource.Ref
	56,  // 360: hashicorp.waypoint.Job.QueueProjectOp.job_template:type_name -> hashicorp.waypoint.Job
	243, // 361: hashicorp.waypoint.Job.QueueProjectResult.applications:type_name -> hashicorp.waypoint.Job.QueueProjectResult.Application
	318, // 362: hashicorp.waypoint.Job.DataSource.Ref.unknown:type_name -> google.protobuf.Empty
	240, // 363: hashicorp.waypoint.Job.DataSource.Ref.git:type_name -> hashicorp.waypoint.Job.Git.Ref
	319, // 364: hashicorp.waypoint.Job.Git.Ref.timestamp:type_name -> google.protobuf.Timestamp
	24,  // 365: hashicorp.waypoint.Job.AuthResult.Result.component:type_name -> hashicorp.waypoint.Component
	320, // 366: hashicorp.waypoint.Job.AuthResult.Result.check_error:type_name -> google.rpc.Status
	320, // 367: hashicorp.waypoint.Job.AuthResult.Result.auth_error:type_name -> google.rpc.Status
	24,  // 368: hashicorp.waypoint.Job.DocsResult.Result.component:type_name -> hashicorp.waypoint.Component
	57,  // 369: hashicorp.waypoint.Job.DocsResult.Result.docs:type_name -> hashicorp.waypoint.Documentation
	179, // 370: hashicorp.waypoint.Job.QueueProjectResult.Application.application:type_name -> hashicorp.waypoint.Ref.Application
	245, // 371: hashicorp.waypoint.Documentation.FieldsEntry.value:type_name -> hashicorp.waypoint.Documentation.Field
	7,   // 372: hashicorp.waypoint.GetJobStreamResponse.State.previous:type_name -> hashicorp.waypoint.Job.State
	7,   // 373: hashicorp.waypoint.GetJobStreamResponse.State.current:type_name -> hashicorp.waypoint.Job.State
	56,  // 374: hashicorp.waypoint.GetJobStreamResponse.State.job:type_name -> hashicorp.waypoint.Job
	237, // 375: hashicorp.waypoint.GetJobStreamResponse.Download.data_source_ref:type_name -> hashicorp.waypoint.Job.DataSource.Ref
	253, // 376: hashicorp.waypoint.GetJobStreamResponse.Terminal.events:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event
	320, // 377: hashicorp.waypoint.GetJobStreamResponse.Error.error:type_name -> google.rpc.Status
	320, // 378: hashicorp.waypoint.GetJobStreamResponse.Complete.error:type_name -> google.rpc.Status
	200, // 379: hashicorp.waypoint.GetJobStreamResponse.Complete.result:type_name -> hashicorp.waypoint.Job.Result
	319, // 380: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.timestamp:type_name -> google.protobuf.Timestamp
	255, // 381: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.line:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Line
	254, // 382: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.status:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Status
	258, // 383: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.named_values:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.NamedValues
	256, // 384: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.raw:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Raw
	261, // 385: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.table:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Table
	262, // 386: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.step_group:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.StepGroup
	263, // 387: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.step:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Step
	257, // 388: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.NamedValues.values:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.NamedValue
	259, // 389: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.TableRow.entries:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.TableEntry
	260, // 390: hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.Table.rows:type_name -> hashicorp.waypoint.GetJobStreamResponse.Terminal.Event.TableRow
	63,  // 391: hashicorp.waypoint.RunnerConfigRequest.Open.runner:type_name -> hashicorp.waypoint.Runner
	200, // 392: hashicorp.waypoint.RunnerJobStreamRequest.Complete.result:type_name -> hashicorp.waypoint.Job.Result
	320, // 393: hashicorp.waypoint.RunnerJobStreamRequest.Error.error:type_name -> google.rpc.Status
	56,  // 394: hashicorp.waypoint.RunnerJobStreamResponse.JobAssignment.job:type_name -> hashicorp.waypoint.Job
	275, // 395: hashicorp.waypoint.Hostname.Target.application:type_name -> hashicorp.waypoint.Hostname.TargetApp
	179, // 396: hashicorp.waypoint.Hostname.TargetApp.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 397: hashicorp.waypoint.Hostname.TargetApp.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	237, // 398: hashicorp.waypoint.Build.Preload.job_data_source_ref:type_name -> hashicorp.waypoint.Job.DataSource.Ref
	237, // 399: hashicorp.waypoint.PushedArtifact.Preload.job_data_source_ref:type_name -> hashicorp.waypoint.Job.DataSource.Ref
	106, // 400: hashicorp.waypoint.Deployment.Preload.artifact:type_name -> hashicorp.waypoint.PushedArtifact
	98,  // 401: hashicorp.waypoint.Deployment.Preload.build:type_name -> hashicorp.waypoint.Build
	237, // 402: hashicorp.waypoint.Deployment.Preload.job_data_source_ref:type_name -> hashicorp.waypoint.Job.DataSource.Ref
	179, // 403: hashicorp.waypoint.ListInstancesRequest.Application.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 404: hashicorp.waypoint.ListInstancesRequest.Application.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	112, // 405: hashicorp.waypoint.Release.Preload.deployment:type_name -> hashicorp.waypoint.Deployment
	106, // 406: hashicorp.waypoint.Release.Preload.artifact:type_name -> hashicorp.waypoint.PushedArtifact
	98,  // 407: hashicorp.waypoint.Release.Preload.build:type_name -> hashicorp.waypoint.Build
	237, // 408: hashicorp.waypoint.Release.Preload.job_data_source_ref:type_name -> hashicorp.waypoint.Job.DataSource.Ref
	192, // 409: hashicorp.waypoint.StatusReport.Resource.declared_resource:type_name -> hashicorp.waypoint.Ref.DeclaredResource
	0,   // 410: hashicorp.waypoint.StatusReport.Resource.category_display_hint:type_name -> hashicorp.waypoint.ResourceCategoryDisplayHint
	319, // 411: hashicorp.waypoint.StatusReport.Resource.created_time:type_name -> google.protobuf.Timestamp
	286, // 412: hashicorp.waypoint.StatusReport.Resource.health:type_name -> hashicorp.waypoint.StatusReport.Health
	179, // 413: hashicorp.waypoint.GetLogStreamRequest.Application.application:type_name -> hashicorp.waypoint.Ref.Application
	181, // 414: hashicorp.waypoint.GetLogStreamRequest.Application.workspace:type_name -> hashicorp.waypoint.Ref.Workspace
	12,  // 415: hashicorp.waypoint.LogBatch.Entry.source:type_name -> hashicorp.waypoint.LogBatch.Entry.Source
	319, // 416: hashicorp.waypoint.LogBatch.Entry.timestamp:type_name -> google.protobuf.Timestamp
	290, // 417: hashicorp.waypoint.ConfigVar.DynamicVal.config:type_name -> hashicorp.waypoint.ConfigVar.DynamicVal.ConfigEntry
	294, // 418: hashicorp.waypoint.ExecStreamRequest.Start.pty:type_name -> hashicorp.waypoint.ExecStreamRequest.PTY
	295, // 419: hashicorp.waypoint.ExecStreamRequest.PTY.window_size:type_name -> hashicorp.waypoint.ExecStreamRequest.WindowSize
	13,  // 420: hashicorp.waypoint.ExecStreamResponse.Output.channel:type_name -> hashicorp.waypoint.ExecStreamResponse.Output.Channel
	294, // 421: hashicorp.waypoint.EntrypointConfig.Exec.pty:type_name -> hashicorp.waypoint.ExecStreamRequest.PTY
	24,  // 422: hashicorp.waypoint.EntrypointConfig.DeploymentInfo.component:type_name -> hashicorp.waypoint.Component
	302, // 423: hashicorp.waypoint.EntrypointConfig.DeploymentInfo.labels:type_name -> hashicorp.waypoint.EntrypointConfig.DeploymentInfo.LabelsEntry
	14,  // 424: hashicorp.waypoint.EntrypointExecRequest.Output.channel:type_name -> hashicorp.waypoint.EntrypointExecRequest.Output.Channel
	320, // 425: hashicorp.waypoint.EntrypointExecRequest.Error.error:type_name -> google.rpc.Status
	310, // 426: hashicorp.waypoint.Token.Login.entrypoint:type_name -> hashicorp.waypoint.Token.Entrypoint
	308, // 427: hashicorp.waypoint.Token.Invite.login:type_name -> hashicorp.waypoint.Token.Login
	311, // 428: hashicorp.waypoint.Token.Invite.signup:type_name -> hashicorp.waypoint.Token.Invite.Signup
	17,  // 429: hashicorp.waypoint.Snapshot.Header.version:type_name -> hashicorp.waypoint.VersionInfo
	15,  // 430: hashicorp.waypoint.Snapshot.Header.format:type_name -> hashicorp.waypoint.Snapshot.Header.Format
	317, // 431: hashicorp.waypoint.Snapshot.BoltChunk.items:type_name -> hashicorp.waypoint.Snapshot.BoltChunk.ItemsEntry
	318, // 432: hashicorp.waypoint.Waypoint.GetVersionInfo:input_type -> google.protobuf.Empty
	318, // 433: hashicorp.waypoint.Waypoint.ListOIDCAuthMethods:input_type -> google.protobuf.Empty
	47,  // 434: hashicorp.waypoint.Waypoint.GetOIDCAuthURL:input_type -> hashicorp.waypoint.GetOIDCAuthURLRequest
	49,  // 435: hashicorp.waypoint.Waypoint.CompleteOIDCAuth:input_type -> hashicorp.waypoint.CompleteOIDCAuthRequest
	32,  // 436: hashicorp.waypoint.Waypoint.GetUser:input_type -> hashicorp.waypoint.GetUserRequest
	318, // 437: hashicorp.waypoint.Waypoint.ListUsers:input_type -> google.protobuf.Empty
	35,  // 438: hashicorp.waypoint.Waypoint.UpdateUser:input_type -> hashicorp.waypoint.UpdateUserRequest
	37,  // 439: hashicorp.waypoint.Waypoint.DeleteUser:input_type -> hashicorp.waypoint.DeleteUserRequest
	40,  // 440: hashicorp.waypoint.Waypoint.UpsertAuthMethod:input_type -> hashicorp.waypoint.UpsertAuthMethodRequest
	42,  // 441: hashicorp.waypoint.Waypoint.GetAuthMethod:input_type -> hashicorp.waypoint.GetAuthMethodRequest
	318, // 442: hashicorp.waypoint.Waypoint.ListAuthMethods:input_type -> google.protobuf.Empty
	44,  // 443: hashicorp.waypoint.Waypoint.DeleteAuthMethod:input_type -> hashicorp.waypoint.DeleteAuthMethodRequest
	81,  // 444: hashicorp.waypoint.Waypoint.ListWorkspaces:input_type -> hashicorp.waypoint.ListWorkspacesRequest
	83,  // 445: hashicorp.waypoint.Waypoint.GetWorkspace:input_type -> hashicorp.waypoint.GetWorkspaceRequest
	85,  // 446: hashicorp.waypoint.Waypoint.UpsertProject:input_type -> hashicorp.waypoint.UpsertProjectRequest
	87,  // 447: hashicorp.waypoint.Waypoint.GetProject:input_type -> hashicorp.waypoint.GetProjectRequest
	318, // 448: hashicorp.waypoint.Waypoint.ListProjects:input_type -> google.protobuf.Empty
	90,  // 449: hashicorp.waypoint.Waypoint.UpsertApplication:input_type -> hashicorp.waypoint.UpsertApplicationRequest
	94,  // 450: hashicorp.waypoint.Waypoint.ListBuilds:input_type -> hashicorp.waypoint.ListBuildsRequest
	97,  // 451: hashicorp.waypoint.Waypoint.GetBuild:input_type -> hashicorp.waypoint.GetBuildRequest
	104, // 452: hashicorp.waypoint.Waypoint.ListPushedArtifacts:input_type -> hashicorp.waypoint.ListPushedArtifactsRequest
	103, // 453: hashicorp.waypoint.Waypoint.GetPushedArtifact:input_type -> hashicorp.waypoint.GetPushedArtifactRequest
	110, // 454: hashicorp.waypoint.Waypoint.ListDeployments:input_type -> hashicorp.waypoint.ListDeploymentsRequest
	114, // 455: hashicorp.waypoint.Waypoint.ListInstances:input_type -> hashicorp.waypoint.ListInstancesRequest
	107, // 456: hashicorp.waypoint.Waypoint.GetDeployment:input_type -> hashicorp.waypoint.GetDeploymentRequest
	96,  // 457: hashicorp.waypoint.Waypoint.GetLatestBuild:input_type -> hashicorp.waypoint.GetLatestBuildRequest
	102, // 458: hashicorp.waypoint.Waypoint.GetLatestPushedArtifact:input_type -> hashicorp.waypoint.GetLatestPushedArtifactRequest
	120, // 459: hashicorp.waypoint.Waypoint.ListReleases:input_type -> hashicorp.waypoint.ListReleasesRequest
	122, // 460: hashicorp.waypoint.Waypoint.GetRelease:input_type -> hashicorp.waypoint.GetReleaseRequest
	119, // 461: hashicorp.waypoint.Waypoint.GetLatestRelease:input_type -> hashicorp.waypoint.GetLatestReleaseRequest
	134, // 462: hashicorp.waypoint.Waypoint.GetLogStream:input_type -> hashicorp.waypoint.GetLogStreamRequest
	145, // 463: hashicorp.waypoint.Waypoint.StartExecStream:input_type -> hashicorp.waypoint.ExecStreamRequest
	137, // 464: hashicorp.waypoint.Waypoint.SetConfig:input_type -> hashicorp.waypoint.ConfigSetRequest
	139, // 465: hashicorp.waypoint.Waypoint.GetConfig:input_type -> hashicorp.waypoint.ConfigGetRequest
	142, // 466: hashicorp.waypoint.Waypoint.SetConfigSource:input_type -> hashicorp.waypoint.SetConfigSourceRequest
	143, // 467: hashicorp.waypoint.Waypoint.GetConfigSource:input_type -> hashicorp.waypoint.GetConfigSourceRequest
	75,  // 468: hashicorp.waypoint.Waypoint.CreateHostname:input_type -> hashicorp.waypoint.CreateHostnameRequest
	79,  // 469: hashicorp.waypoint.Waypoint.DeleteHostname:input_type -> hashicorp.waypoint.DeleteHostnameRequest
	77,  // 470: hashicorp.waypoint.Waypoint.ListHostnames:input_type -> hashicorp.waypoint.ListHostnamesRequest
	51,  // 471: hashicorp.waypoint.Waypoint.QueueJob:input_type -> hashicorp.waypoint.QueueJobRequest
	53,  // 472: hashicorp.waypoint.Waypoint.CancelJob:input_type -> hashicorp.waypoint.CancelJobRequest
	58,  // 473: hashicorp.waypoint.Waypoint.GetJob:input_type -> hashicorp.waypoint.GetJobRequest
	59,  // 474: hashicorp.waypoint.Waypoint._ListJobs:input_type -> hashicorp.waypoint.ListJobsRequest
	54,  // 475: hashicorp.waypoint.Waypoint.ValidateJob:input_type -> hashicorp.waypoint.ValidateJobRequest
	61,  // 476: hashicorp.waypoint.Waypoint.GetJobStream:input_type -> hashicorp.waypoint.GetJobStreamRequest
	71,  // 477: hashicorp.waypoint.Waypoint.GetRunner:input_type -> hashicorp.waypoint.GetRunnerRequest
	318, // 478: hashicorp.waypoint.Waypoint.GetServerConfig:input_type -> google.protobuf.Empty
	72,  // 479: hashicorp.waypoint.Waypoint.SetServerConfig:input_type -> hashicorp.waypoint.SetServerConfigRequest
	318, // 480: hashicorp.waypoint.Waypoint.CreateSnapshot:input_type -> google.protobuf.Empty
	163, // 481: hashicorp.waypoint.Waypoint.RestoreSnapshot:input_type -> hashicorp.waypoint.RestoreSnapshotRequest
	318, // 482: hashicorp.waypoint.Waypoint.BootstrapToken:input_type -> google.protobuf.Empty
	156, // 483: hashicorp.waypoint.Waypoint.DecodeToken:input_type -> hashicorp.waypoint.DecodeTokenRequest
	159, // 484: hashicorp.waypoint.Waypoint.GenerateInviteToken:input_type -> hashicorp.waypoint.InviteTokenRequest
	158, // 485: hashicorp.waypoint.Waypoint.GenerateLoginToken:input_type -> hashicorp.waypoint.LoginTokenRequest
	161, // 486: hashicorp.waypoint.Waypoint.ConvertInviteToken:input_type -> hashicorp.waypoint.ConvertInviteTokenRequest
	130, // 487: hashicorp.waypoint.Waypoint.GetStatusReport:input_type -> hashicorp.waypoint.GetStatusReportRequest
	127, // 488: hashicorp.waypoint.Waypoint.GetLatestStatusReport:input_type -> hashicorp.waypoint.GetLatestStatusReportRequest
	128, // 489: hashicorp.waypoint.Waypoint.ListStatusReports:input_type -> hashicorp.waypoint.ListStatusReportsRequest
	131, // 490: hashicorp.waypoint.Waypoint.ExpediteStatusReport:input_type -> hashicorp.waypoint.ExpediteStatusReportRequest
	64,  // 491: hashicorp.waypoint.Waypoint.RunnerConfig:input_type -> hashicorp.waypoint.RunnerConfigRequest
	67,  // 492: hashicorp.waypoint.Waypoint.RunnerJobStream:input_type -> hashicorp.waypoint.RunnerJobStreamRequest
	69,  // 493: hashicorp.waypoint.Waypoint.RunnerGetDeploymentConfig:input_type -> hashicorp.waypoint.RunnerGetDeploymentConfigRequest
	147, // 494: hashicorp.waypoint.Waypoint.EntrypointConfig:input_type -> hashicorp.waypoint.EntrypointConfigRequest
	150, // 495: hashicorp.waypoint.Waypoint.EntrypointLogStream:input_type -> hashicorp.waypoint.EntrypointLogBatch
	151, // 496: hashicorp.waypoint.Waypoint.EntrypointExecStream:input_type -> hashicorp.waypoint.EntrypointExecRequest
	165, // 497: hashicorp.waypoint.Waypoint.WaypointHclFmt:input_type -> hashicorp.waypoint.WaypointHclFmtRequest
	92,  // 498: hashicorp.waypoint.Waypoint.UpsertBuild:input_type -> hashicorp.waypoint.UpsertBuildRequest
	100, // 499: hashicorp.waypoint.Waypoint.UpsertPushedArtifact:input_type -> hashicorp.waypoint.UpsertPushedArtifactRequest
	108, // 500: hashicorp.waypoint.Waypoint.UpsertDeployment:input_type -> hashicorp.waypoint.UpsertDeploymentRequest
	117, // 501: hashicorp.waypoint.Waypoint.UpsertRelease:input_type -> hashicorp.waypoint.UpsertReleaseRequest
	125, // 502: hashicorp.waypoint.Waypoint.UpsertStatusReport:input_type -> hashicorp.waypoint.UpsertStatusReportRequest
	16,  // 503: hashicorp.waypoint.Waypoint.GetVersionInfo:output_type -> hashicorp.waypoint.GetVersionInfoResponse
	46,  // 504: hashicorp.waypoint.Waypoint.ListOIDCAuthMethods:output_type -> hashicorp.waypoint.ListOIDCAuthMethodsResponse
	48,  // 505: hashicorp.waypoint.Waypoint.GetOIDCAuthURL:output_type -> hashicorp.waypoint.GetOIDCAuthURLResponse
	50,  // 506: hashicorp.waypoint.Waypoint.CompleteOIDCAuth:output_type -> hashicorp.waypoint.CompleteOIDCAuthResponse
	33,  // 507: hashicorp.waypoint.Waypoint.GetUser:output_type -> hashicorp.waypoint.GetUserResponse
	34,  // 508: hashicorp.waypoint.Waypoint.ListUsers:output_type -> hashicorp.waypoint.ListUsersResponse
	36,  // 509: hashicorp.waypoint.Waypoint.UpdateUser:output_type -> hashicorp.waypoint.UpdateUserResponse
	318, // 510: hashicorp.waypoint.Waypoint.DeleteUser:output_type -> google.protobuf.Empty
	41,  // 511: hashicorp.waypoint.Waypoint.UpsertAuthMethod:output_type -> hashicorp.waypoint.UpsertAuthMethodResponse
	43,  // 512: hashicorp.waypoint.Waypoint.GetAuthMethod:output_type -> hashicorp.waypoint.GetAuthMethodResponse
	45,  // 513: hashicorp.waypoint.Waypoint.ListAuthMethods:output_type -> hashicorp.waypoint.ListAuthMethodsResponse
	318, // 514: hashicorp.waypoint.Waypoint.DeleteAuthMethod:output_type -> google.protobuf.Empty
	82,  // 515: hashicorp.waypoint.Waypoint.ListWorkspaces:output_type -> hashicorp.waypoint.ListWorkspacesResponse
	84,  // 516: hashicorp.waypoint.Waypoint.GetWorkspace:output_type -> hashicorp.waypoint.GetWorkspaceResponse
	86,  // 517: hashicorp.waypoint.Waypoint.UpsertProject:output_type -> hashicorp.waypoint.UpsertProjectResponse
	88,  // 518: hashicorp.waypoint.Waypoint.GetProject:output_type -> hashicorp.waypoint.GetProjectResponse
	89,  // 519: hashicorp.waypoint.Waypoint.ListProjects:output_type -> hashicorp.waypoint.ListProjectsResponse
	91,  // 520: hashicorp.waypoint.Waypoint.UpsertApplication:output_type -> hashicorp.waypoint.UpsertApplicationResponse
	95,  // 521: hashicorp.waypoint.Waypoint.ListBuilds:output_type -> hashicorp.waypoint.ListBuildsResponse
	98,  // 522: hashicorp.waypoint.Waypoint.GetBuild:output_type -> hashicorp.waypoint.Build
	105, // 523: hashicorp.waypoint.Waypoint.ListPushedArtifacts:output_type -> hashicorp.waypoint.ListPushedArtifactsResponse
	106, // 524: hashicorp.waypoint.Waypoint.GetPushedArtifact:output_type -> hashicorp.waypoint.PushedArtifact
	111, // 525: hashicorp.waypoint.Waypoint.ListDeployments:output_type -> hashicorp.waypoint.ListDeploymentsResponse
	115, // 526: hashicorp.waypoint.Waypoint.ListInstances:output_type -> hashicorp.waypoint.ListInstancesResponse
	112, // 527: hashicorp.waypoint.Waypoint.GetDeployment:output_type -> hashicorp.waypoint.Deployment
	98,  // 528: hashicorp.waypoint.Waypoint.GetLatestBuild:output_type -> hashicorp.waypoint.Build
	106, // 529: hashicorp.waypoint.Waypoint.GetLatestPushedArtifact:output_type -> hashicorp.waypoint.PushedArtifact
	121, // 530: hashicorp.waypoint.Waypoint.ListReleases:output_type -> hashicorp.waypoint.ListReleasesResponse
	123, // 531: hashicorp.waypoint.Waypoint.GetRelease:output_type -> hashicorp.waypoint.Release
	123, // 532: hashicorp.waypoint.Waypoint.GetLatestRelease:output_type -> hashicorp.waypoint.Release
	135, // 533: hashicorp.waypoint.Waypoint.GetLogStream:output_type -> hashicorp.waypoint.LogBatch
	146, // 534: hashicorp.waypoint.Waypoint.StartExecStream:output_type -> hashicorp.waypoint.ExecStreamResponse
	138, // 535: hashicorp.waypoint.Waypoint.SetConfig:output_type -> hashicorp.waypoint.ConfigSetResponse
	140, // 536: hashicorp.waypoint.Waypoint.GetConfig:output_type -> hashicorp.waypoint.ConfigGetResponse
	318, // 537: hashicorp.waypoint.Waypoint.SetConfigSource:output_type -> google.protobuf.Empty
	144, // 538: hashicorp.waypoint.Waypoint.GetConfigSource:output_type -> hashicorp.waypoint.GetConfigSourceResponse
	76,  // 539: hashicorp.waypoint.Waypoint.CreateHostname:output_type -> hashicorp.waypoint.CreateHostnameResponse
	318, // 540: hashicorp.waypoint.Waypoint.DeleteHostname:output_type -> google.protobuf.Empty
	78,  // 541: hashicorp.waypoint.Waypoint.ListHostnames:output_type -> hashicorp.waypoint.ListHostnamesResponse
	52,  // 542: hashicorp.waypoint.Waypoint.QueueJob:output_type -> hashicorp.waypoint.QueueJobResponse
	318, // 543: hashicorp.waypoint.Waypoint.CancelJob:output_type -> google.protobuf.Empty
	56,  // 544: hashicorp.waypoint.Waypoint.GetJob:output_type -> hashicorp.waypoint.Job
	60,  // 545: hashicorp.waypoint.Waypoint._ListJobs:output_type -> hashicorp.waypoint.ListJobsResponse
	55,  // 546: hashicorp.waypoint.Waypoint.ValidateJob:output_type -> hashicorp.waypoint.ValidateJobResponse
	62,  // 547: hashicorp.waypoint.Waypoint.GetJobStream:output_type -> hashicorp.waypoint.GetJobStreamResponse
	63,  // 548: hashicorp.waypoint.Waypoint.GetRunner:output_type -> hashicorp.waypoint.Runner
	73,  // 549: hashicorp.waypoint.Waypoint.GetServerConfig:output_type -> hashicorp.waypoint.GetServerConfigResponse
	318, // 550: hashicorp.waypoint.Waypoint.SetServerConfig:output_type -> google.protobuf.Empty
	162, // 551: hashicorp.waypoint.Waypoint.CreateSnapshot:output_type -> hashicorp.waypoint.CreateSnapshotResponse
	318, // 552: hashicorp.waypoint.Waypoint.RestoreSnapshot:output_type -> google.protobuf.Empty
	160, // 553: hashicorp.waypoint.Waypoint.BootstrapToken:output_type -> hashicorp.waypoint.NewTokenResponse
	157, // 554: hashicorp.waypoint.Waypoint.DecodeToken:output_type -> hashicorp.waypoint.DecodeTokenResponse
	160, // 555: hashicorp.waypoint.Waypoint.GenerateInviteToken:output_type -> hashicorp.waypoint.NewTokenResponse
	160, // 556: hashicorp.waypoint.Waypoint.GenerateLoginToken:output_type -> hashicorp.waypoint.NewTokenResponse
	160, // 557: hashicorp.waypoint.Waypoint.ConvertInviteToken:output_type -> hashicorp.waypoint.NewTokenResponse
	133, // 558: hashicorp.waypoint.Waypoint.GetStatusReport:output_type -> hashicorp.waypoint.StatusReport
	133, // 559: hashicorp.waypoint.Waypoint.GetLatestStatusReport:output_type -> hashicorp.waypoint.StatusReport
	129, // 560: hashicorp.waypoint.Waypoint.ListStatusReports:output_type -> hashicorp.waypoint.ListStatusReportsResponse
	132, // 561: hashicorp.waypoint.Waypoint.ExpediteStatusReport:output_type -> hashicorp.waypoint.ExpediteStatusReportResponse
	65,  // 562: hashicorp.waypoint.Waypoint.RunnerConfig:output_type -> hashicorp.waypoint.RunnerConfigResponse
	68,  // 563: hashicorp.waypoint.Waypoint.RunnerJobStream:output_type -> hashicorp.waypoint.RunnerJobStreamResponse
	70,  // 564: hashicorp.waypoint.Waypoint.RunnerGetDeploymentConfig:output_type -> hashicorp.waypoint.RunnerGetDeploymentConfigResponse
	148, // 565: hashicorp.waypoint.Waypoint.EntrypointConfig:output_type -> hashicorp.waypoint.EntrypointConfigResponse
	318, // 566: hashicorp.waypoint.Waypoint.EntrypointLogStream:output_type -> google.protobuf.Empty
	152, // 567: hashicorp.waypoint.Waypoint.EntrypointExecStream:output_type -> hashicorp.waypoint.EntrypointExecResponse
	166, // 568: hashicorp.waypoint.Waypoint.WaypointHclFmt:output_type -> hashicorp.waypoint.WaypointHclFmtResponse
	93,  // 569: hashicorp.waypoint.Waypoint.UpsertBuild:output_type -> hashicorp.waypoint.UpsertBuildResponse
	101, // 570: hashicorp.waypoint.Waypoint.UpsertPushedArtifact:output_type -> hashicorp.waypoint.UpsertPushedArtifactResponse
	109, // 571: hashicorp.waypoint.Waypoint.UpsertDeployment:output_type -> hashicorp.waypoint.UpsertDeploymentResponse
	118, // 572: hashicorp.waypoint.Waypoint.UpsertRelease:output_type -> hashicorp.waypoint.UpsertReleaseResponse
	126, // 573: hashicorp.waypoint.Waypoint.UpsertStatusReport:output_type -> hashicorp.waypoint.UpsertStatusReportResponse
	503, // [503:574] is the sub-list for method output_type
	432, // [432:503] is the sub-list for method input_type
	432, // [432:432] is the sub-list for extension type_name
	432, // [432:432] is the sub-list for extension extendee
	0,   // [0:432] is the sub-list for field type_name
}

func init() { file_internal_server_proto_server_proto_init() }
func file_internal_server_proto_server_proto_init() {
	if File_internal_server_proto_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_server_proto_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Generation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclaredResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLaunchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OIDCAuthMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAuthMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAuthMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthMethodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOIDCAuthMethodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOIDCAuthURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOIDCAuthURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteOIDCAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteOIDCAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerJobStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerJobStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerGetDeploymentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerGetDeploymentConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostnameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostnameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostnamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostnamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHostnameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hostname); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkspacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkspacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertBuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertBuildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestBuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertPushedArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertPushedArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestPushedArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPushedArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPushedArtifactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPushedArtifactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushedArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentExpanded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReleasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseExpanded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStatusReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStatusReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestStatusReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpediteStatusReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpediteStatusReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointLogBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenTransport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMACKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertInviteTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaypointHclFmtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaypointHclFmtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo_ProtocolVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable_VCS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable_HclPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable_HclRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project_Poll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project_AppStatusPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace_Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace_Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Link_OIDC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_OperationSeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_Runner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_RunnerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_RunnerAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_UserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_UserUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_AuthMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_DeclaredResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusFilter_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthMethod_OIDC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Local); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Git); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Noop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_UpOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_UpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_ValidateOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_ValidateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_AuthOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_AuthResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_BuildOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_BuildResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_PushOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_PushResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_DeployOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_DeployResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_ExecOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_ExecResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_LogsOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_DestroyOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_ReleaseOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_ReleaseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_TaskPluginParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_StartTaskLaunchOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_StartTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_StopTaskLaunchOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_StatusReportOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_StatusReportResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_DocsOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_DocsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_ConfigSyncOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_ConfigSyncResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_PollOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_PollResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_QueueProjectOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_QueueProjectResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_DataSource_Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Git_Basic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Git_SSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Git_Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_AuthResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_DocsResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_QueueProjectResult_Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documentation_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documentation_Mapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Download); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Complete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_NamedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_NamedValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_TableEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_TableRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_StepGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobStreamResponse_Terminal_Event_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerConfigRequest_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerJobStreamRequest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerJobStreamRequest_Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerJobStreamRequest_Complete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerJobStreamRequest_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerJobStreamRequest_Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerJobStreamResponse_JobAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerJobStreamResponse_JobCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerConfig_AdvertiseAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hostname_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hostname_TargetApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build_Preload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushedArtifact_Preload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_Preload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesRequest_Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_Preload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReport_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReport_Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogStreamRequest_Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogBatch_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigVar_DynamicVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamRequest_Start); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamRequest_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamRequest_PTY); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamRequest_WindowSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamResponse_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamResponse_Exit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStreamResponse_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointConfig_Exec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointConfig_URLService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointConfig_DeploymentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointExecRequest_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointExecRequest_Exit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointExecRequest_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntrypointExecRequest_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token_Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token_Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token_Entrypoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token_Invite_Signup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotResponse_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreSnapshotRequest_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Trailer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_proto_server_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_BoltChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_server_proto_server_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Variable_Str)(nil),
		(*Variable_Bool)(nil),
		(*Variable_Num)(nil),
		(*Variable_Hcl)(nil),
		(*Variable_Cli)(nil),
		(*Variable_File_)(nil),
		(*Variable_Env)(nil),
		(*Variable_Vcs)(nil),
		(*Variable_Server)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*AuthMethod_Oidc)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*Job_Noop_)(nil),
		(*Job_Build)(nil),
		(*Job_Push)(nil),
		(*Job_Deploy)(nil),
		(*Job_Destroy)(nil),
		(*Job_Release)(nil),
		(*Job_Validate)(nil),
		(*Job_Auth)(nil),
		(*Job_Docs)(nil),
		(*Job_ConfigSync)(nil),
		(*Job_Exec)(nil),
		(*Job_Up)(nil),
		(*Job_Logs)(nil),
		(*Job_QueueProject)(nil),
		(*Job_Poll)(nil),
		(*Job_StatusReport)(nil),
		(*Job_StartTask)(nil),
		(*Job_StopTask)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*GetJobStreamResponse_Open_)(nil),
		(*GetJobStreamResponse_State_)(nil),
		(*GetJobStreamResponse_Terminal_)(nil),
		(*GetJobStreamResponse_Download_)(nil),
		(*GetJobStreamResponse_Error_)(nil),
		(*GetJobStreamResponse_Complete_)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*RunnerConfigRequest_Open_)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*RunnerJobStreamRequest_Request_)(nil),
		(*RunnerJobStreamRequest_Ack_)(nil),
		(*RunnerJobStreamRequest_Complete_)(nil),
		(*RunnerJobStreamRequest_Error_)(nil),
		(*RunnerJobStreamRequest_Terminal)(nil),
		(*RunnerJobStreamRequest_Download)(nil),
		(*RunnerJobStreamRequest_Heartbeat_)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*RunnerJobStreamResponse_Assignment)(nil),
		(*RunnerJobStreamResponse_Cancel)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*ListWorkspacesRequest_Global)(nil),
		(*ListWorkspacesRequest_Project)(nil),
		(*ListWorkspacesRequest_Application)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[98].OneofWrappers = []interface{}{
		(*ListInstancesRequest_DeploymentId)(nil),
		(*ListInstancesRequest_Application_)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[112].OneofWrappers = []interface{}{
		(*ListStatusReportsRequest_Deployment)(nil),
		(*ListStatusReportsRequest_Release)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[115].OneofWrappers = []interface{}{
		(*ExpediteStatusReportRequest_Deployment)(nil),
		(*ExpediteStatusReportRequest_Release)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[117].OneofWrappers = []interface{}{
		(*StatusReport_DeploymentId)(nil),
		(*StatusReport_ReleaseId)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[118].OneofWrappers = []interface{}{
		(*GetLogStreamRequest_DeploymentId)(nil),
		(*GetLogStreamRequest_Application_)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[120].OneofWrappers = []interface{}{
		(*ConfigVar_Application)(nil),
		(*ConfigVar_Project)(nil),
		(*ConfigVar_Runner)(nil),
		(*ConfigVar_Unset)(nil),
		(*ConfigVar_Static)(nil),
		(*ConfigVar_Dynamic)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[123].OneofWrappers = []interface{}{
		(*ConfigGetRequest_Application)(nil),
		(*ConfigGetRequest_Project)(nil),
		(*ConfigGetRequest_Runner)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[125].OneofWrappers = []interface{}{
		(*ConfigSource_Global)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[127].OneofWrappers = []interface{}{
		(*GetConfigSourceRequest_Global)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[129].OneofWrappers = []interface{}{
		(*ExecStreamRequest_Start_)(nil),
		(*ExecStreamRequest_Input_)(nil),
		(*ExecStreamRequest_Winch)(nil),
		(*ExecStreamRequest_InputEof)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[130].OneofWrappers = []interface{}{
		(*ExecStreamResponse_Open_)(nil),
		(*ExecStreamResponse_Output_)(nil),
		(*ExecStreamResponse_Exit_)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[135].OneofWrappers = []interface{}{
		(*EntrypointExecRequest_Open_)(nil),
		(*EntrypointExecRequest_Exit_)(nil),
		(*EntrypointExecRequest_Output_)(nil),
		(*EntrypointExecRequest_Error_)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[136].OneofWrappers = []interface{}{
		(*EntrypointExecResponse_Input)(nil),
		(*EntrypointExecResponse_InputEof)(nil),
		(*EntrypointExecResponse_Winch)(nil),
		(*EntrypointExecResponse_Opened)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[138].OneofWrappers = []interface{}{
		(*Token_Login_)(nil),
		(*Token_Invite_)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[146].OneofWrappers = []interface{}{
		(*CreateSnapshotResponse_Open_)(nil),
		(*CreateSnapshotResponse_Chunk)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[147].OneofWrappers = []interface{}{
		(*RestoreSnapshotRequest_Open_)(nil),
		(*RestoreSnapshotRequest_Chunk)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[160].OneofWrappers = []interface{}{
		(*User_Link_Oidc)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[167].OneofWrappers = []interface{}{
		(*Ref_Operation_Id)(nil),
		(*Ref_Operation_Sequence)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[169].OneofWrappers = []interface{}{
		(*Ref_Runner_Any)(nil),
		(*Ref_Runner_Id)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[172].OneofWrappers = []interface{}{
		(*Ref_User_Id)(nil),
		(*Ref_User_Username)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[177].OneofWrappers = []interface{}{
		(*StatusFilter_Filter_State)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[185].OneofWrappers = []interface{}{
		(*Job_DataSource_Local)(nil),
		(*Job_DataSource_Git)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[187].OneofWrappers = []interface{}{
		(*Job_Git_Basic_)(nil),
		(*Job_Git_Ssh)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[204].OneofWrappers = []interface{}{
		(*Job_DestroyOp_Workspace)(nil),
		(*Job_DestroyOp_Deployment)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[211].OneofWrappers = []interface{}{
		(*Job_StatusReportOp_Deployment)(nil),
		(*Job_StatusReportOp_Release)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[221].OneofWrappers = []interface{}{
		(*Job_DataSource_Ref_Unknown)(nil),
		(*Job_DataSource_Ref_Git)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[237].OneofWrappers = []interface{}{
		(*GetJobStreamResponse_Terminal_Event_Line_)(nil),
		(*GetJobStreamResponse_Terminal_Event_Status_)(nil),
		(*GetJobStreamResponse_Terminal_Event_NamedValues_)(nil),
		(*GetJobStreamResponse_Terminal_Event_Raw_)(nil),
		(*GetJobStreamResponse_Terminal_Event_Table_)(nil),
		(*GetJobStreamResponse_Terminal_Event_StepGroup_)(nil),
		(*GetJobStreamResponse_Terminal_Event_Step_)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[258].OneofWrappers = []interface{}{
		(*Hostname_Target_Application)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[276].OneofWrappers = []interface{}{
		(*ExecStreamRequest_Start_DeploymentId)(nil),
		(*ExecStreamRequest_Start_InstanceId)(nil),
	}
	file_internal_server_proto_server_proto_msgTypes[299].OneofWrappers = []interface{}{
		(*Snapshot_Trailer_Sha256)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_server_proto_server_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   302,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_server_proto_server_proto_goTypes,
		DependencyIndexes: file_internal_server_proto_server_proto_depIdxs,
		EnumInfos:         file_internal_server_proto_server_proto_enumTypes,
		MessageInfos:      file_internal_server_proto_server_proto_msgTypes,
	}.Build()
	File_internal_server_proto_server_proto = out.File
	file_internal_server_proto_server_proto_rawDesc = nil
	file_internal_server_proto_server_proto_goTypes = nil
	file_internal_server_proto_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WaypointClient is the client API for Waypoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WaypointClient interface {
	// GetVersionInfo returns information about the server. This RPC call does
	// NOT require authentication. It can be used by clients to determine if they
	// are capable of talking to this server.
	GetVersionInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionInfoResponse, error)
	// List the available OIDC providers for authentication. The "name" of the
	// OIDC provider can be used with GetOIDCAuthURL and CompleteOIDCAuth to
	// perform OIDC-based authentication.
	ListOIDCAuthMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListOIDCAuthMethodsResponse, error)
	// Get the URL to visit to start authentication with OIDC.
	GetOIDCAuthURL(ctx context.Context, in *GetOIDCAuthURLRequest, opts ...grpc.CallOption) (*GetOIDCAuthURLResponse, error)
	// Complete the OIDC auth cycle after receiving the callback from the
	// OIDC provider.
	CompleteOIDCAuth(ctx context.Context, in *CompleteOIDCAuthRequest, opts ...grpc.CallOption) (*CompleteOIDCAuthResponse, error)
	// GetUser returns the current logged in user or some other user.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// List all users in the system.
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Update the details about an existing user.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Delete a user. This will invalidate all authentication for this user
	// as well since they no longer exist.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpsertAuthMethod upserts the auth method. All users logged in with
	// this auth method will remain logged in even if settings change.
	UpsertAuthMethod(ctx context.Context, in *UpsertAuthMethodRequest, opts ...grpc.CallOption) (*UpsertAuthMethodResponse, error)
	// GetAuthMethod returns the auth method.
	GetAuthMethod(ctx context.Context, in *GetAuthMethodRequest, opts ...grpc.CallOption) (*GetAuthMethodResponse, error)
	// ListAuthMethods returns a list of all the auth methods.
	ListAuthMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuthMethodsResponse, error)
	// Delete an auth method. This will invalidate all users authenticated
	// using this auth method and they will have to reauthenticate some other
	// way.
	DeleteAuthMethod(ctx context.Context, in *DeleteAuthMethodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListWorkspaces returns a list of all workspaces.
	//
	// Note that currently this list is never pruned, even if a workspace is
	// no longer in use. We plan to prune this in a future improvement.
	ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error)
	// GetWorkspace returns the workspace.
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	// UpsertProject upserts the project.
	UpsertProject(ctx context.Context, in *UpsertProjectRequest, opts ...grpc.CallOption) (*UpsertProjectResponse, error)
	// GetProject returns the project.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// ListProjects returns a list of all the projects. There is no equivalent
	// ListApplications because applications are a part of projects and you
	// can use GetProject to get more information about the project.
	ListProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// UpsertApplication upserts an application with a project.
	UpsertApplication(ctx context.Context, in *UpsertApplicationRequest, opts ...grpc.CallOption) (*UpsertApplicationResponse, error)
	// ListBuilds returns the builds.
	ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	// GetBuild returns a build
	GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// ListPushedArtifacts returns the builds.
	ListPushedArtifacts(ctx context.Context, in *ListPushedArtifactsRequest, opts ...grpc.CallOption) (*ListPushedArtifactsResponse, error)
	// GetPushedArtifact returns a deployment
	GetPushedArtifact(ctx context.Context, in *GetPushedArtifactRequest, opts ...grpc.CallOption) (*PushedArtifact, error)
	// ListDeployments returns the deployments.
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	// ListInstances returns the running instances of deployments.
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// GetDeployment returns a deployment
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	// GetLatestBuild returns the most recent successfully completed build
	// for an app.
	GetLatestBuild(ctx context.Context, in *GetLatestBuildRequest, opts ...grpc.CallOption) (*Build, error)
	// GetLatestPushedArtifact returns the most recent successfully completed
	// artifact push for an app.
	GetLatestPushedArtifact(ctx context.Context, in *GetLatestPushedArtifactRequest, opts ...grpc.CallOption) (*PushedArtifact, error)
	// ListReleases returns the deployments.
	ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error)
	// GetRelease returns a deployment
	GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Release, error)
	// GetLatestRelease returns the most recent successfully completed
	// artifact push for an app.
	GetLatestRelease(ctx context.Context, in *GetLatestReleaseRequest, opts ...grpc.CallOption) (*Release, error)
	// GetLogStream reads the log stream for a deployment. This will immediately
	// send a single LogEntry with the lines we have so far. If there are no
	// available lines this will NOT block and instead will return an error.
	// The client can choose to retry or not.
	GetLogStream(ctx context.Context, in *GetLogStreamRequest, opts ...grpc.CallOption) (Waypoint_GetLogStreamClient, error)
	// StartExecStream starts an exec session.
	StartExecStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_StartExecStreamClient, error)
	// Set a single configuration item for the application.
	SetConfig(ctx context.Context, in *ConfigSetRequest, opts ...grpc.CallOption) (*ConfigSetResponse, error)
	// Retrieve merged configuration values for a specific scope. You can determine
	// where a configuration variable was set by looking at the scope field on
	// each variable.
	GetConfig(ctx context.Context, in *ConfigGetRequest, opts ...grpc.CallOption) (*ConfigGetResponse, error)
	// Set the configuration for a dynamic configuration source. If you're looking
	// to set application configuration, you probably want SetConfig instead.
	SetConfigSource(ctx context.Context, in *SetConfigSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get the matching configuration source for the request. This will return
	// the most specific matching config source given the scope in the request.
	// For example, if you search for an app-specific config source and only
	// a global config exists, the global config will be returned.
	GetConfigSource(ctx context.Context, in *GetConfigSourceRequest, opts ...grpc.CallOption) (*GetConfigSourceResponse, error)
	// Create a hostname with the URL service.
	CreateHostname(ctx context.Context, in *CreateHostnameRequest, opts ...grpc.CallOption) (*CreateHostnameResponse, error)
	// Delete a hostname with the URL service.
	DeleteHostname(ctx context.Context, in *DeleteHostnameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all our registered hostnames.
	ListHostnames(ctx context.Context, in *ListHostnamesRequest, opts ...grpc.CallOption) (*ListHostnamesResponse, error)
	// QueueJob queues a job for execution by a runner. This will return as
	// soon as the job is queued, it will not wait for execution.
	QueueJob(ctx context.Context, in *QueueJobRequest, opts ...grpc.CallOption) (*QueueJobResponse, error)
	// CancelJob cancels a job. If the job is still queued this is a quick
	// and easy operation. If the job is already completed, then this does
	// nothing. If the job is assigned or running, then this will signal
	// the runner about the cancellation but it may take time.
	//
	// This RPC always returns immediately. You must use GetJob or GetJobStream
	// to wait on the status of the cancellation.
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetJob queries a job by ID.
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	// INTERNAL: ListJobs lists all the jobs the server has processed. This
	// is not yet ready for public use.
	XListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	// ValidateJob checks if a job appears valid. This will check the job
	// structure itself (i.e. missing fields) and can also check to ensure
	// the job is assignable to a runner.
	ValidateJob(ctx context.Context, in *ValidateJobRequest, opts ...grpc.CallOption) (*ValidateJobResponse, error)
	// GetJobStream opens a job event stream for a running job. This can be
	// used to listen for terminal output and other events of a running job.
	// Multiple listeners can open a job stream.
	GetJobStream(ctx context.Context, in *GetJobStreamRequest, opts ...grpc.CallOption) (Waypoint_GetJobStreamClient, error)
	// GetRunner gets information about a single runner.
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*Runner, error)
	// GetServerConfig sets configuration for the Waypoint server.
	GetServerConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetServerConfigResponse, error)
	// SetServerConfig sets configuration for the Waypoint server.
	SetServerConfig(ctx context.Context, in *SetServerConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateSnapshot creates a new database snapshot.
	CreateSnapshot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Waypoint_CreateSnapshotClient, error)
	// RestoreSnapshot performs a database restore with the given snapshot.
	// This API doesn't do a full online restore, it only stages the restore
	// for the next server start to finalize the restore. See the arguments for
	// more information.
	RestoreSnapshot(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RestoreSnapshotClient, error)
	// BootstrapToken returns the initial token for the server. This can only
	// be requested once on first startup. After initial request this will
	// always return a PermissionDenied error.
	BootstrapToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewTokenResponse, error)
	// DecodeToken takes a token string and returns the structured information
	// about the given token. This is useful for frontends (CLI, UI, etc.) to
	// learn more about a token before using it. For example, if a UI wants to
	// create a signup flow around signup tokens, they can validate the token
	// ahead of time.
	//
	// This endpoint does NOT require authentication.
	DecodeToken(ctx context.Context, in *DecodeTokenRequest, opts ...grpc.CallOption) (*DecodeTokenResponse, error)
	// Generate a new invite token that users can exchange for a login token.
	// This can be used to also invite new users to the Waypoint server.
	GenerateInviteToken(ctx context.Context, in *InviteTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error)
	// Generate a new login token that users can use to login directly.
	// This can only be called for existing users.
	GenerateLoginToken(ctx context.Context, in *LoginTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error)
	// Exchange a invite token for a login token. If the invite token is
	// for a new user, this will create a new user account with the provided
	// username hint.
	ConvertInviteToken(ctx context.Context, in *ConvertInviteTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error)
	// GetStatusReport returns a StatusReport
	GetStatusReport(ctx context.Context, in *GetStatusReportRequest, opts ...grpc.CallOption) (*StatusReport, error)
	// GetLatestStatusReport returns the most recent successfully completed
	// health report for an app
	GetLatestStatusReport(ctx context.Context, in *GetLatestStatusReportRequest, opts ...grpc.CallOption) (*StatusReport, error)
	// ListStatusReports returns the deployments.
	ListStatusReports(ctx context.Context, in *ListStatusReportsRequest, opts ...grpc.CallOption) (*ListStatusReportsResponse, error)
	// ExpediteStatusReport returns the queued status report job id
	ExpediteStatusReport(ctx context.Context, in *ExpediteStatusReportRequest, opts ...grpc.CallOption) (*ExpediteStatusReportResponse, error)
	// RunnerConfig is called to register a runner and receive the configuration
	// for the runner. The response is a stream so that the configuration can
	// be updated later.
	RunnerConfig(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RunnerConfigClient, error)
	// RunnerJobStream is called by a runner to request a single job for
	// execution and update the status of that job.
	RunnerJobStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RunnerJobStreamClient, error)
	// RunnerGetDeploymentConfig is called by a runner for a deployment operation
	// to determine the settings to use for a deployment.
	RunnerGetDeploymentConfig(ctx context.Context, in *RunnerGetDeploymentConfigRequest, opts ...grpc.CallOption) (*RunnerGetDeploymentConfigResponse, error)
	// EntrypointConfig is called to get the configuration for the entrypoint
	// and also to get any potential updates.
	//
	// This endpoint also registers the instance with the server. This MUST be
	// called first otherwise other RPCs related to the entrypoint may fail
	// with FailedPrecondition.
	EntrypointConfig(ctx context.Context, in *EntrypointConfigRequest, opts ...grpc.CallOption) (Waypoint_EntrypointConfigClient, error)
	// EntrypointLogStream is called to open the stream that logs are sent to.
	EntrypointLogStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_EntrypointLogStreamClient, error)
	// EntrypointExecStream is called to open the data stream for the exec session.
	EntrypointExecStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_EntrypointExecStreamClient, error)
	// WaypointHclFmt formats a waypoint.hcl file. This must be in HCL format.
	// JSON formatting is not supported.
	WaypointHclFmt(ctx context.Context, in *WaypointHclFmtRequest, opts ...grpc.CallOption) (*WaypointHclFmtResponse, error)
	// UpsertBuild updates or inserts a build. A build is responsible for
	// taking some set of source information and turning it into an initial
	// artifact. This artifact is considered "local" until it is pushed.
	UpsertBuild(ctx context.Context, in *UpsertBuildRequest, opts ...grpc.CallOption) (*UpsertBuildResponse, error)
	// UpsertPushedArtifact updates or inserts a pushed artifact. This is
	// useful for local operations to work on a pushed artifact.
	UpsertPushedArtifact(ctx context.Context, in *UpsertPushedArtifactRequest, opts ...grpc.CallOption) (*UpsertPushedArtifactResponse, error)
	// UpsertDeployment updates or inserts a deployment.
	UpsertDeployment(ctx context.Context, in *UpsertDeploymentRequest, opts ...grpc.CallOption) (*UpsertDeploymentResponse, error)
	// UpsertRelease updates or inserts a release.
	UpsertRelease(ctx context.Context, in *UpsertReleaseRequest, opts ...grpc.CallOption) (*UpsertReleaseResponse, error)
	// UpsertStatusReport updates or inserts a statusreport.
	UpsertStatusReport(ctx context.Context, in *UpsertStatusReportRequest, opts ...grpc.CallOption) (*UpsertStatusReportResponse, error)
}

type waypointClient struct {
	cc grpc.ClientConnInterface
}

func NewWaypointClient(cc grpc.ClientConnInterface) WaypointClient {
	return &waypointClient{cc}
}

func (c *waypointClient) GetVersionInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionInfoResponse, error) {
	out := new(GetVersionInfoResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListOIDCAuthMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListOIDCAuthMethodsResponse, error) {
	out := new(ListOIDCAuthMethodsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListOIDCAuthMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetOIDCAuthURL(ctx context.Context, in *GetOIDCAuthURLRequest, opts ...grpc.CallOption) (*GetOIDCAuthURLResponse, error) {
	out := new(GetOIDCAuthURLResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetOIDCAuthURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) CompleteOIDCAuth(ctx context.Context, in *CompleteOIDCAuthRequest, opts ...grpc.CallOption) (*CompleteOIDCAuthResponse, error) {
	out := new(CompleteOIDCAuthResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/CompleteOIDCAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertAuthMethod(ctx context.Context, in *UpsertAuthMethodRequest, opts ...grpc.CallOption) (*UpsertAuthMethodResponse, error) {
	out := new(UpsertAuthMethodResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertAuthMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetAuthMethod(ctx context.Context, in *GetAuthMethodRequest, opts ...grpc.CallOption) (*GetAuthMethodResponse, error) {
	out := new(GetAuthMethodResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetAuthMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListAuthMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuthMethodsResponse, error) {
	out := new(ListAuthMethodsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListAuthMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) DeleteAuthMethod(ctx context.Context, in *DeleteAuthMethodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/DeleteAuthMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error) {
	out := new(ListWorkspacesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertProject(ctx context.Context, in *UpsertProjectRequest, opts ...grpc.CallOption) (*UpsertProjectResponse, error) {
	out := new(UpsertProjectResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListProjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertApplication(ctx context.Context, in *UpsertApplicationRequest, opts ...grpc.CallOption) (*UpsertApplicationResponse, error) {
	out := new(UpsertApplicationResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListPushedArtifacts(ctx context.Context, in *ListPushedArtifactsRequest, opts ...grpc.CallOption) (*ListPushedArtifactsResponse, error) {
	out := new(ListPushedArtifactsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListPushedArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetPushedArtifact(ctx context.Context, in *GetPushedArtifactRequest, opts ...grpc.CallOption) (*PushedArtifact, error) {
	out := new(PushedArtifact)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetPushedArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetLatestBuild(ctx context.Context, in *GetLatestBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetLatestBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetLatestPushedArtifact(ctx context.Context, in *GetLatestPushedArtifactRequest, opts ...grpc.CallOption) (*PushedArtifact, error) {
	out := new(PushedArtifact)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetLatestPushedArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error) {
	out := new(ListReleasesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetLatestRelease(ctx context.Context, in *GetLatestReleaseRequest, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetLatestRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetLogStream(ctx context.Context, in *GetLogStreamRequest, opts ...grpc.CallOption) (Waypoint_GetLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[0], "/hashicorp.waypoint.Waypoint/GetLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointGetLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Waypoint_GetLogStreamClient interface {
	Recv() (*LogBatch, error)
	grpc.ClientStream
}

type waypointGetLogStreamClient struct {
	grpc.ClientStream
}

func (x *waypointGetLogStreamClient) Recv() (*LogBatch, error) {
	m := new(LogBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) StartExecStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_StartExecStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[1], "/hashicorp.waypoint.Waypoint/StartExecStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointStartExecStreamClient{stream}
	return x, nil
}

type Waypoint_StartExecStreamClient interface {
	Send(*ExecStreamRequest) error
	Recv() (*ExecStreamResponse, error)
	grpc.ClientStream
}

type waypointStartExecStreamClient struct {
	grpc.ClientStream
}

func (x *waypointStartExecStreamClient) Send(m *ExecStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointStartExecStreamClient) Recv() (*ExecStreamResponse, error) {
	m := new(ExecStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) SetConfig(ctx context.Context, in *ConfigSetRequest, opts ...grpc.CallOption) (*ConfigSetResponse, error) {
	out := new(ConfigSetResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetConfig(ctx context.Context, in *ConfigGetRequest, opts ...grpc.CallOption) (*ConfigGetResponse, error) {
	out := new(ConfigGetResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) SetConfigSource(ctx context.Context, in *SetConfigSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/SetConfigSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetConfigSource(ctx context.Context, in *GetConfigSourceRequest, opts ...grpc.CallOption) (*GetConfigSourceResponse, error) {
	out := new(GetConfigSourceResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetConfigSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) CreateHostname(ctx context.Context, in *CreateHostnameRequest, opts ...grpc.CallOption) (*CreateHostnameResponse, error) {
	out := new(CreateHostnameResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/CreateHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) DeleteHostname(ctx context.Context, in *DeleteHostnameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/DeleteHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListHostnames(ctx context.Context, in *ListHostnamesRequest, opts ...grpc.CallOption) (*ListHostnamesResponse, error) {
	out := new(ListHostnamesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListHostnames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) QueueJob(ctx context.Context, in *QueueJobRequest, opts ...grpc.CallOption) (*QueueJobResponse, error) {
	out := new(QueueJobResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/QueueJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) XListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/_ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ValidateJob(ctx context.Context, in *ValidateJobRequest, opts ...grpc.CallOption) (*ValidateJobResponse, error) {
	out := new(ValidateJobResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ValidateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetJobStream(ctx context.Context, in *GetJobStreamRequest, opts ...grpc.CallOption) (Waypoint_GetJobStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[2], "/hashicorp.waypoint.Waypoint/GetJobStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointGetJobStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Waypoint_GetJobStreamClient interface {
	Recv() (*GetJobStreamResponse, error)
	grpc.ClientStream
}

type waypointGetJobStreamClient struct {
	grpc.ClientStream
}

func (x *waypointGetJobStreamClient) Recv() (*GetJobStreamResponse, error) {
	m := new(GetJobStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*Runner, error) {
	out := new(Runner)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetServerConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetServerConfigResponse, error) {
	out := new(GetServerConfigResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) SetServerConfig(ctx context.Context, in *SetServerConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/SetServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) CreateSnapshot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Waypoint_CreateSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[3], "/hashicorp.waypoint.Waypoint/CreateSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointCreateSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Waypoint_CreateSnapshotClient interface {
	Recv() (*CreateSnapshotResponse, error)
	grpc.ClientStream
}

type waypointCreateSnapshotClient struct {
	grpc.ClientStream
}

func (x *waypointCreateSnapshotClient) Recv() (*CreateSnapshotResponse, error) {
	m := new(CreateSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) RestoreSnapshot(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RestoreSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[4], "/hashicorp.waypoint.Waypoint/RestoreSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointRestoreSnapshotClient{stream}
	return x, nil
}

type Waypoint_RestoreSnapshotClient interface {
	Send(*RestoreSnapshotRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type waypointRestoreSnapshotClient struct {
	grpc.ClientStream
}

func (x *waypointRestoreSnapshotClient) Send(m *RestoreSnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointRestoreSnapshotClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) BootstrapToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewTokenResponse, error) {
	out := new(NewTokenResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/BootstrapToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) DecodeToken(ctx context.Context, in *DecodeTokenRequest, opts ...grpc.CallOption) (*DecodeTokenResponse, error) {
	out := new(DecodeTokenResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/DecodeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GenerateInviteToken(ctx context.Context, in *InviteTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error) {
	out := new(NewTokenResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GenerateInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GenerateLoginToken(ctx context.Context, in *LoginTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error) {
	out := new(NewTokenResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GenerateLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ConvertInviteToken(ctx context.Context, in *ConvertInviteTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error) {
	out := new(NewTokenResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ConvertInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetStatusReport(ctx context.Context, in *GetStatusReportRequest, opts ...grpc.CallOption) (*StatusReport, error) {
	out := new(StatusReport)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetStatusReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) GetLatestStatusReport(ctx context.Context, in *GetLatestStatusReportRequest, opts ...grpc.CallOption) (*StatusReport, error) {
	out := new(StatusReport)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/GetLatestStatusReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ListStatusReports(ctx context.Context, in *ListStatusReportsRequest, opts ...grpc.CallOption) (*ListStatusReportsResponse, error) {
	out := new(ListStatusReportsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ListStatusReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) ExpediteStatusReport(ctx context.Context, in *ExpediteStatusReportRequest, opts ...grpc.CallOption) (*ExpediteStatusReportResponse, error) {
	out := new(ExpediteStatusReportResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/ExpediteStatusReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) RunnerConfig(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RunnerConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[5], "/hashicorp.waypoint.Waypoint/RunnerConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointRunnerConfigClient{stream}
	return x, nil
}

type Waypoint_RunnerConfigClient interface {
	Send(*RunnerConfigRequest) error
	Recv() (*RunnerConfigResponse, error)
	grpc.ClientStream
}

type waypointRunnerConfigClient struct {
	grpc.ClientStream
}

func (x *waypointRunnerConfigClient) Send(m *RunnerConfigRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointRunnerConfigClient) Recv() (*RunnerConfigResponse, error) {
	m := new(RunnerConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) RunnerJobStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_RunnerJobStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[6], "/hashicorp.waypoint.Waypoint/RunnerJobStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointRunnerJobStreamClient{stream}
	return x, nil
}

type Waypoint_RunnerJobStreamClient interface {
	Send(*RunnerJobStreamRequest) error
	Recv() (*RunnerJobStreamResponse, error)
	grpc.ClientStream
}

type waypointRunnerJobStreamClient struct {
	grpc.ClientStream
}

func (x *waypointRunnerJobStreamClient) Send(m *RunnerJobStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointRunnerJobStreamClient) Recv() (*RunnerJobStreamResponse, error) {
	m := new(RunnerJobStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) RunnerGetDeploymentConfig(ctx context.Context, in *RunnerGetDeploymentConfigRequest, opts ...grpc.CallOption) (*RunnerGetDeploymentConfigResponse, error) {
	out := new(RunnerGetDeploymentConfigResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/RunnerGetDeploymentConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) EntrypointConfig(ctx context.Context, in *EntrypointConfigRequest, opts ...grpc.CallOption) (Waypoint_EntrypointConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[7], "/hashicorp.waypoint.Waypoint/EntrypointConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointEntrypointConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Waypoint_EntrypointConfigClient interface {
	Recv() (*EntrypointConfigResponse, error)
	grpc.ClientStream
}

type waypointEntrypointConfigClient struct {
	grpc.ClientStream
}

func (x *waypointEntrypointConfigClient) Recv() (*EntrypointConfigResponse, error) {
	m := new(EntrypointConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) EntrypointLogStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_EntrypointLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[8], "/hashicorp.waypoint.Waypoint/EntrypointLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointEntrypointLogStreamClient{stream}
	return x, nil
}

type Waypoint_EntrypointLogStreamClient interface {
	Send(*EntrypointLogBatch) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type waypointEntrypointLogStreamClient struct {
	grpc.ClientStream
}

func (x *waypointEntrypointLogStreamClient) Send(m *EntrypointLogBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointEntrypointLogStreamClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) EntrypointExecStream(ctx context.Context, opts ...grpc.CallOption) (Waypoint_EntrypointExecStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waypoint_serviceDesc.Streams[9], "/hashicorp.waypoint.Waypoint/EntrypointExecStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &waypointEntrypointExecStreamClient{stream}
	return x, nil
}

type Waypoint_EntrypointExecStreamClient interface {
	Send(*EntrypointExecRequest) error
	Recv() (*EntrypointExecResponse, error)
	grpc.ClientStream
}

type waypointEntrypointExecStreamClient struct {
	grpc.ClientStream
}

func (x *waypointEntrypointExecStreamClient) Send(m *EntrypointExecRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waypointEntrypointExecStreamClient) Recv() (*EntrypointExecResponse, error) {
	m := new(EntrypointExecResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waypointClient) WaypointHclFmt(ctx context.Context, in *WaypointHclFmtRequest, opts ...grpc.CallOption) (*WaypointHclFmtResponse, error) {
	out := new(WaypointHclFmtResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/WaypointHclFmt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertBuild(ctx context.Context, in *UpsertBuildRequest, opts ...grpc.CallOption) (*UpsertBuildResponse, error) {
	out := new(UpsertBuildResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertPushedArtifact(ctx context.Context, in *UpsertPushedArtifactRequest, opts ...grpc.CallOption) (*UpsertPushedArtifactResponse, error) {
	out := new(UpsertPushedArtifactResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertPushedArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertDeployment(ctx context.Context, in *UpsertDeploymentRequest, opts ...grpc.CallOption) (*UpsertDeploymentResponse, error) {
	out := new(UpsertDeploymentResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertRelease(ctx context.Context, in *UpsertReleaseRequest, opts ...grpc.CallOption) (*UpsertReleaseResponse, error) {
	out := new(UpsertReleaseResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waypointClient) UpsertStatusReport(ctx context.Context, in *UpsertStatusReportRequest, opts ...grpc.CallOption) (*UpsertStatusReportResponse, error) {
	out := new(UpsertStatusReportResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.Waypoint/UpsertStatusReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaypointServer is the server API for Waypoint service.
type WaypointServer interface {
	// GetVersionInfo returns information about the server. This RPC call does
	// NOT require authentication. It can be used by clients to determine if they
	// are capable of talking to this server.
	GetVersionInfo(context.Context, *emptypb.Empty) (*GetVersionInfoResponse, error)
	// List the available OIDC providers for authentication. The "name" of the
	// OIDC provider can be used with GetOIDCAuthURL and CompleteOIDCAuth to
	// perform OIDC-based authentication.
	ListOIDCAuthMethods(context.Context, *emptypb.Empty) (*ListOIDCAuthMethodsResponse, error)
	// Get the URL to visit to start authentication with OIDC.
	GetOIDCAuthURL(context.Context, *GetOIDCAuthURLRequest) (*GetOIDCAuthURLResponse, error)
	// Complete the OIDC auth cycle after receiving the callback from the
	// OIDC provider.
	CompleteOIDCAuth(context.Context, *CompleteOIDCAuthRequest) (*CompleteOIDCAuthResponse, error)
	// GetUser returns the current logged in user or some other user.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// List all users in the system.
	ListUsers(context.Context, *emptypb.Empty) (*ListUsersResponse, error)
	// Update the details about an existing user.
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Delete a user. This will invalidate all authentication for this user
	// as well since they no longer exist.
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// UpsertAuthMethod upserts the auth method. All users logged in with
	// this auth method will remain logged in even if settings change.
	UpsertAuthMethod(context.Context, *UpsertAuthMethodRequest) (*UpsertAuthMethodResponse, error)
	// GetAuthMethod returns the auth method.
	GetAuthMethod(context.Context, *GetAuthMethodRequest) (*GetAuthMethodResponse, error)
	// ListAuthMethods returns a list of all the auth methods.
	ListAuthMethods(context.Context, *emptypb.Empty) (*ListAuthMethodsResponse, error)
	// Delete an auth method. This will invalidate all users authenticated
	// using this auth method and they will have to reauthenticate some other
	// way.
	DeleteAuthMethod(context.Context, *DeleteAuthMethodRequest) (*emptypb.Empty, error)
	// ListWorkspaces returns a list of all workspaces.
	//
	// Note that currently this list is never pruned, even if a workspace is
	// no longer in use. We plan to prune this in a future improvement.
	ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	// GetWorkspace returns the workspace.
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	// UpsertProject upserts the project.
	UpsertProject(context.Context, *UpsertProjectRequest) (*UpsertProjectResponse, error)
	// GetProject returns the project.
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// ListProjects returns a list of all the projects. There is no equivalent
	// ListApplications because applications are a part of projects and you
	// can use GetProject to get more information about the project.
	ListProjects(context.Context, *emptypb.Empty) (*ListProjectsResponse, error)
	// UpsertApplication upserts an application with a project.
	UpsertApplication(context.Context, *UpsertApplicationRequest) (*UpsertApplicationResponse, error)
	// ListBuilds returns the builds.
	ListBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error)
	// GetBuild returns a build
	GetBuild(context.Context, *GetBuildRequest) (*Build, error)
	// ListPushedArtifacts returns the builds.
	ListPushedArtifacts(context.Context, *ListPushedArtifactsRequest) (*ListPushedArtifactsResponse, error)
	// GetPushedArtifact returns a deployment
	GetPushedArtifact(context.Context, *GetPushedArtifactRequest) (*PushedArtifact, error)
	// ListDeployments returns the deployments.
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	// ListInstances returns the running instances of deployments.
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// GetDeployment returns a deployment
	GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error)
	// GetLatestBuild returns the most recent successfully completed build
	// for an app.
	GetLatestBuild(context.Context, *GetLatestBuildRequest) (*Build, error)
	// GetLatestPushedArtifact returns the most recent successfully completed
	// artifact push for an app.
	GetLatestPushedArtifact(context.Context, *GetLatestPushedArtifactRequest) (*PushedArtifact, error)
	// ListReleases returns the deployments.
	ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error)
	// GetRelease returns a deployment
	GetRelease(context.Context, *GetReleaseRequest) (*Release, error)
	// GetLatestRelease returns the most recent successfully completed
	// artifact push for an app.
	GetLatestRelease(context.Context, *GetLatestReleaseRequest) (*Release, error)
	// GetLogStream reads the log stream for a deployment. This will immediately
	// send a single LogEntry with the lines we have so far. If there are no
	// available lines this will NOT block and instead will return an error.
	// The client can choose to retry or not.
	GetLogStream(*GetLogStreamRequest, Waypoint_GetLogStreamServer) error
	// StartExecStream starts an exec session.
	StartExecStream(Waypoint_StartExecStreamServer) error
	// Set a single configuration item for the application.
	SetConfig(context.Context, *ConfigSetRequest) (*ConfigSetResponse, error)
	// Retrieve merged configuration values for a specific scope. You can determine
	// where a configuration variable was set by looking at the scope field on
	// each variable.
	GetConfig(context.Context, *ConfigGetRequest) (*ConfigGetResponse, error)
	// Set the configuration for a dynamic configuration source. If you're looking
	// to set application configuration, you probably want SetConfig instead.
	SetConfigSource(context.Context, *SetConfigSourceRequest) (*emptypb.Empty, error)
	// Get the matching configuration source for the request. This will return
	// the most specific matching config source given the scope in the request.
	// For example, if you search for an app-specific config source and only
	// a global config exists, the global config will be returned.
	GetConfigSource(context.Context, *GetConfigSourceRequest) (*GetConfigSourceResponse, error)
	// Create a hostname with the URL service.
	CreateHostname(context.Context, *CreateHostnameRequest) (*CreateHostnameResponse, error)
	// Delete a hostname with the URL service.
	DeleteHostname(context.Context, *DeleteHostnameRequest) (*emptypb.Empty, error)
	// List all our registered hostnames.
	ListHostnames(context.Context, *ListHostnamesRequest) (*ListHostnamesResponse, error)
	// QueueJob queues a job for execution by a runner. This will return as
	// soon as the job is queued, it will not wait for execution.
	QueueJob(context.Context, *QueueJobRequest) (*QueueJobResponse, error)
	// CancelJob cancels a job. If the job is still queued this is a quick
	// and easy operation. If the job is already completed, then this does
	// nothing. If the job is assigned or running, then this will signal
	// the runner about the cancellation but it may take time.
	//
	// This RPC always returns immediately. You must use GetJob or GetJobStream
	// to wait on the status of the cancellation.
	CancelJob(context.Context, *CancelJobRequest) (*emptypb.Empty, error)
	// GetJob queries a job by ID.
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	// INTERNAL: ListJobs lists all the jobs the server has processed. This
	// is not yet ready for public use.
	XListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	// ValidateJob checks if a job appears valid. This will check the job
	// structure itself (i.e. missing fields) and can also check to ensure
	// the job is assignable to a runner.
	ValidateJob(context.Context, *ValidateJobRequest) (*ValidateJobResponse, error)
	// GetJobStream opens a job event stream for a running job. This can be
	// used to listen for terminal output and other events of a running job.
	// Multiple listeners can open a job stream.
	GetJobStream(*GetJobStreamRequest, Waypoint_GetJobStreamServer) error
	// GetRunner gets information about a single runner.
	GetRunner(context.Context, *GetRunnerRequest) (*Runner, error)
	// GetServerConfig sets configuration for the Waypoint server.
	GetServerConfig(context.Context, *emptypb.Empty) (*GetServerConfigResponse, error)
	// SetServerConfig sets configuration for the Waypoint server.
	SetServerConfig(context.Context, *SetServerConfigRequest) (*emptypb.Empty, error)
	// CreateSnapshot creates a new database snapshot.
	CreateSnapshot(*emptypb.Empty, Waypoint_CreateSnapshotServer) error
	// RestoreSnapshot performs a database restore with the given snapshot.
	// This API doesn't do a full online restore, it only stages the restore
	// for the next server start to finalize the restore. See the arguments for
	// more information.
	RestoreSnapshot(Waypoint_RestoreSnapshotServer) error
	// BootstrapToken returns the initial token for the server. This can only
	// be requested once on first startup. After initial request this will
	// always return a PermissionDenied error.
	BootstrapToken(context.Context, *emptypb.Empty) (*NewTokenResponse, error)
	// DecodeToken takes a token string and returns the structured information
	// about the given token. This is useful for frontends (CLI, UI, etc.) to
	// learn more about a token before using it. For example, if a UI wants to
	// create a signup flow around signup tokens, they can validate the token
	// ahead of time.
	//
	// This endpoint does NOT require authentication.
	DecodeToken(context.Context, *DecodeTokenRequest) (*DecodeTokenResponse, error)
	// Generate a new invite token that users can exchange for a login token.
	// This can be used to also invite new users to the Waypoint server.
	GenerateInviteToken(context.Context, *InviteTokenRequest) (*NewTokenResponse, error)
	// Generate a new login token that users can use to login directly.
	// This can only be called for existing users.
	GenerateLoginToken(context.Context, *LoginTokenRequest) (*NewTokenResponse, error)
	// Exchange a invite token for a login token. If the invite token is
	// for a new user, this will create a new user account with the provided
	// username hint.
	ConvertInviteToken(context.Context, *ConvertInviteTokenRequest) (*NewTokenResponse, error)
	// GetStatusReport returns a StatusReport
	GetStatusReport(context.Context, *GetStatusReportRequest) (*StatusReport, error)
	// GetLatestStatusReport returns the most recent successfully completed
	// health report for an app
	GetLatestStatusReport(context.Context, *GetLatestStatusReportRequest) (*StatusReport, error)
	// ListStatusReports returns the deployments.
	ListStatusReports(context.Context, *ListStatusReportsRequest) (*ListStatusReportsResponse, error)
	// ExpediteStatusReport returns the queued status report job id
	ExpediteStatusReport(context.Context, *ExpediteStatusReportRequest) (*ExpediteStatusReportResponse, error)
	// RunnerConfig is called to register a runner and receive the configuration
	// for the runner. The response is a stream so that the configuration can
	// be updated later.
	RunnerConfig(Waypoint_RunnerConfigServer) error
	// RunnerJobStream is called by a runner to request a single job for
	// execution and update the status of that job.
	RunnerJobStream(Waypoint_RunnerJobStreamServer) error
	// RunnerGetDeploymentConfig is called by a runner for a deployment operation
	// to determine the settings to use for a deployment.
	RunnerGetDeploymentConfig(context.Context, *RunnerGetDeploymentConfigRequest) (*RunnerGetDeploymentConfigResponse, error)
	// EntrypointConfig is called to get the configuration for the entrypoint
	// and also to get any potential updates.
	//
	// This endpoint also registers the instance with the server. This MUST be
	// called first otherwise other RPCs related to the entrypoint may fail
	// with FailedPrecondition.
	EntrypointConfig(*EntrypointConfigRequest, Waypoint_EntrypointConfigServer) error
	// EntrypointLogStream is called to open the stream that logs are sent to.
	EntrypointLogStream(Waypoint_EntrypointLogStreamServer) error
	// EntrypointExecStream is called to open the data stream for the exec session.
	EntrypointExecStream(Waypoint_EntrypointExecStreamServer) error
	// WaypointHclFmt formats a waypoint.hcl file. This must be in HCL format.
	// JSON formatting is not supported.
	WaypointHclFmt(context.Context, *WaypointHclFmtRequest) (*WaypointHclFmtResponse, error)
	// UpsertBuild updates or inserts a build. A build is responsible for
	// taking some set of source information and turning it into an initial
	// artifact. This artifact is considered "local" until it is pushed.
	UpsertBuild(context.Context, *UpsertBuildRequest) (*UpsertBuildResponse, error)
	// UpsertPushedArtifact updates or inserts a pushed artifact. This is
	// useful for local operations to work on a pushed artifact.
	UpsertPushedArtifact(context.Context, *UpsertPushedArtifactRequest) (*UpsertPushedArtifactResponse, error)
	// UpsertDeployment updates or inserts a deployment.
	UpsertDeployment(context.Context, *UpsertDeploymentRequest) (*UpsertDeploymentResponse, error)
	// UpsertRelease updates or inserts a release.
	UpsertRelease(context.Context, *UpsertReleaseRequest) (*UpsertReleaseResponse, error)
	// UpsertStatusReport updates or inserts a statusreport.
	UpsertStatusReport(context.Context, *UpsertStatusReportRequest) (*UpsertStatusReportResponse, error)
}

// UnimplementedWaypointServer can be embedded to have forward compatible implementations.
type UnimplementedWaypointServer struct {
}

func (*UnimplementedWaypointServer) GetVersionInfo(context.Context, *emptypb.Empty) (*GetVersionInfoResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetVersionInfo not implemented")
}
func (*UnimplementedWaypointServer) ListOIDCAuthMethods(context.Context, *emptypb.Empty) (*ListOIDCAuthMethodsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOIDCAuthMethods not implemented")
}
func (*UnimplementedWaypointServer) GetOIDCAuthURL(context.Context, *GetOIDCAuthURLRequest) (*GetOIDCAuthURLResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetOIDCAuthURL not implemented")
}
func (*UnimplementedWaypointServer) CompleteOIDCAuth(context.Context, *CompleteOIDCAuthRequest) (*CompleteOIDCAuthResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CompleteOIDCAuth not implemented")
}
func (*UnimplementedWaypointServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedWaypointServer) ListUsers(context.Context, *emptypb.Empty) (*ListUsersResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedWaypointServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedWaypointServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedWaypointServer) UpsertAuthMethod(context.Context, *UpsertAuthMethodRequest) (*UpsertAuthMethodResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpsertAuthMethod not implemented")
}
func (*UnimplementedWaypointServer) GetAuthMethod(context.Context, *GetAuthMethodRequest) (*GetAuthMethodResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAuthMethod not implemented")
}
func (*UnimplementedWaypointServer) ListAuthMethods(context.Context, *emptypb.Empty) (*ListAuthMethodsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAuthMethods not implemented")
}
func (*UnimplementedWaypointServer) DeleteAuthMethod(context.Context, *DeleteAuthMethodRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAuthMethod not implemented")
}
func (*UnimplementedWaypointServer) ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkspaces not implemented")
}
func (*UnimplementedWaypointServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (*UnimplementedWaypointServer) UpsertProject(context.Context, *UpsertProjectRequest) (*UpsertProjectResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpsertProject not implemented")
}
func (*UnimplementedWaypointServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedWaypointServer) ListProjects(context.Context, *emptypb.Empty) (*ListProjectsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedWaypointServer) UpsertApplication(context.Context, *UpsertApplicationRequest) (*UpsertApplicationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpsertApplication not implemented")
}
func (*UnimplementedWaypointServer) ListBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListBuilds not implemented")
}
func (*UnimplementedWaypointServer) GetBuild(context.Context, *GetBuildRequest) (*Build, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetBuild not implemented")
}
func (*UnimplementedWaypointServer) ListPushedArtifacts(context.Context, *ListPushedArtifactsRequest) (*ListPushedArtifactsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPushedArtifacts not implemented")
}
func (*UnimplementedWaypointServer) GetPushedArtifact(context.Context, *GetPushedArtifactRequest) (*PushedArtifact, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetPushedArtifact not implemented")
}
func (*UnimplementedWaypointServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (*UnimplementedWaypointServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (*UnimplementedWaypointServer) GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (*UnimplementedWaypointServer) GetLatestBuild(context.Context, *GetLatestBuildRequest) (*Build, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLatestBuild not implemented")
}
func (*UnimplementedWaypointServer) GetLatestPushedArtifact(context.Context, *GetLatestPushedArtifactRequest) (*PushedArtifact, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLatestPushedArtifact not implemented")
}
func (*UnimplementedWaypointServer) ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (*UnimplementedWaypointServer) GetRelease(context.Context, *GetReleaseRequest) (*Release, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (*UnimplementedWaypointServer) GetLatestRelease(context.Context, *GetLatestReleaseRequest) (*Release, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLatestRelease not implemented")
}
func (*UnimplementedWaypointServer) GetLogStream(*GetLogStreamRequest, Waypoint_GetLogStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method GetLogStream not implemented")
}
func (*UnimplementedWaypointServer) StartExecStream(Waypoint_StartExecStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method StartExecStream not implemented")
}
func (*UnimplementedWaypointServer) SetConfig(context.Context, *ConfigSetRequest) (*ConfigSetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (*UnimplementedWaypointServer) GetConfig(context.Context, *ConfigGetRequest) (*ConfigGetResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedWaypointServer) SetConfigSource(context.Context, *SetConfigSourceRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetConfigSource not implemented")
}
func (*UnimplementedWaypointServer) GetConfigSource(context.Context, *GetConfigSourceRequest) (*GetConfigSourceResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetConfigSource not implemented")
}
func (*UnimplementedWaypointServer) CreateHostname(context.Context, *CreateHostnameRequest) (*CreateHostnameResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateHostname not implemented")
}
func (*UnimplementedWaypointServer) DeleteHostname(context.Context, *DeleteHostnameRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteHostname not implemented")
}
func (*UnimplementedWaypointServer) ListHostnames(context.Context, *ListHostnamesRequest) (*ListHostnamesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListHostnames not implemented")
}
func (*UnimplementedWaypointServer) QueueJob(context.Context, *QueueJobRequest) (*QueueJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method QueueJob not implemented")
}
func (*UnimplementedWaypointServer) CancelJob(context.Context, *CancelJobRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (*UnimplementedWaypointServer) GetJob(context.Context, *GetJobRequest) (*Job, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedWaypointServer) XListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method XListJobs not implemented")
}
func (*UnimplementedWaypointServer) ValidateJob(context.Context, *ValidateJobRequest) (*ValidateJobResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateJob not implemented")
}
func (*UnimplementedWaypointServer) GetJobStream(*GetJobStreamRequest, Waypoint_GetJobStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method GetJobStream not implemented")
}
func (*UnimplementedWaypointServer) GetRunner(context.Context, *GetRunnerRequest) (*Runner, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (*UnimplementedWaypointServer) GetServerConfig(context.Context, *emptypb.Empty) (*GetServerConfigResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetServerConfig not implemented")
}
func (*UnimplementedWaypointServer) SetServerConfig(context.Context, *SetServerConfigRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetServerConfig not implemented")
}
func (*UnimplementedWaypointServer) CreateSnapshot(*emptypb.Empty, Waypoint_CreateSnapshotServer) error {
	return status1.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (*UnimplementedWaypointServer) RestoreSnapshot(Waypoint_RestoreSnapshotServer) error {
	return status1.Errorf(codes.Unimplemented, "method RestoreSnapshot not implemented")
}
func (*UnimplementedWaypointServer) BootstrapToken(context.Context, *emptypb.Empty) (*NewTokenResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BootstrapToken not implemented")
}
func (*UnimplementedWaypointServer) DecodeToken(context.Context, *DecodeTokenRequest) (*DecodeTokenResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DecodeToken not implemented")
}
func (*UnimplementedWaypointServer) GenerateInviteToken(context.Context, *InviteTokenRequest) (*NewTokenResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GenerateInviteToken not implemented")
}
func (*UnimplementedWaypointServer) GenerateLoginToken(context.Context, *LoginTokenRequest) (*NewTokenResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GenerateLoginToken not implemented")
}
func (*UnimplementedWaypointServer) ConvertInviteToken(context.Context, *ConvertInviteTokenRequest) (*NewTokenResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ConvertInviteToken not implemented")
}
func (*UnimplementedWaypointServer) GetStatusReport(context.Context, *GetStatusReportRequest) (*StatusReport, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetStatusReport not implemented")
}
func (*UnimplementedWaypointServer) GetLatestStatusReport(context.Context, *GetLatestStatusReportRequest) (*StatusReport, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLatestStatusReport not implemented")
}
func (*UnimplementedWaypointServer) ListStatusReports(context.Context, *ListStatusReportsRequest) (*ListStatusReportsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListStatusReports not implemented")
}
func (*UnimplementedWaypointServer) ExpediteStatusReport(context.Context, *ExpediteStatusReportRequest) (*ExpediteStatusReportResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ExpediteStatusReport not implemented")
}
func (*UnimplementedWaypointServer) RunnerConfig(Waypoint_RunnerConfigServer) error {
	return status1.Errorf(codes.Unimplemented, "method RunnerConfig not implemented")
}
func (*UnimplementedWaypointServer) RunnerJobStream(Waypoint_RunnerJobStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method RunnerJobStream not implemented")
}
func (*UnimplementedWaypointServer) RunnerGetDeploymentConfig(context.Context, *RunnerGetDeploymentConfigRequest) (*RunnerGetDeploymentConfigResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RunnerGetDeploymentConfig not implemented")
}
func (*UnimplementedWaypointServer) EntrypointConfig(*EntrypointConfigRequest, Waypoint_EntrypointConfigServer) error {
	return status1.Errorf(codes.Unimplemented, "method EntrypointConfig not implemented")
}
func (*UnimplementedWaypointServer) EntrypointLogStream(Waypoint_EntrypointLogStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method EntrypointLogStream not implemented")
}
func (*UnimplementedWaypointServer) EntrypointExecStream(Waypoint_EntrypointExecStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method EntrypointExecStream not implemented")
}
func (*UnimplementedWaypointServer) WaypointHclFmt(context.Context, *WaypointHclFmtRequest) (*WaypointHclFmtResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method WaypointHclFmt not implemented")
}
func (*UnimplementedWaypointServer) UpsertBuild(context.Context, *UpsertBuildRequest) (*UpsertBuildResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpsertBuild not implemented")
}
func (*UnimplementedWaypointServer) UpsertPushedArtifact(context.Context, *UpsertPushedArtifactRequest) (*UpsertPushedArtifactResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpsertPushedArtifact not implemented")
}
func (*UnimplementedWaypointServer) UpsertDeployment(context.Context, *UpsertDeploymentRequest) (*UpsertDeploymentResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpsertDeployment not implemented")
}
func (*UnimplementedWaypointServer) UpsertRelease(context.Context, *UpsertReleaseRequest) (*UpsertReleaseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpsertRelease not implemented")
}
func (*UnimplementedWaypointServer) UpsertStatusReport(context.Context, *UpsertStatusReportRequest) (*UpsertStatusReportResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpsertStatusReport not implemented")
}

func RegisterWaypointServer(s *grpc.Server, srv WaypointServer) {
	s.RegisterService(&_Waypoint_serviceDesc, srv)
}

func _Waypoint_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetVersionInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListOIDCAuthMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListOIDCAuthMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListOIDCAuthMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListOIDCAuthMethods(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetOIDCAuthURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOIDCAuthURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetOIDCAuthURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetOIDCAuthURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetOIDCAuthURL(ctx, req.(*GetOIDCAuthURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_CompleteOIDCAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteOIDCAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).CompleteOIDCAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/CompleteOIDCAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).CompleteOIDCAuth(ctx, req.(*CompleteOIDCAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertAuthMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAuthMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertAuthMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertAuthMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertAuthMethod(ctx, req.(*UpsertAuthMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetAuthMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetAuthMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetAuthMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetAuthMethod(ctx, req.(*GetAuthMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListAuthMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListAuthMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListAuthMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListAuthMethods(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_DeleteAuthMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).DeleteAuthMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/DeleteAuthMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).DeleteAuthMethod(ctx, req.(*DeleteAuthMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListWorkspaces(ctx, req.(*ListWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertProject(ctx, req.(*UpsertProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListProjects(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertApplication(ctx, req.(*UpsertApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListBuilds(ctx, req.(*ListBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetBuild(ctx, req.(*GetBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListPushedArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushedArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListPushedArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListPushedArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListPushedArtifacts(ctx, req.(*ListPushedArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetPushedArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushedArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetPushedArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetPushedArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetPushedArtifact(ctx, req.(*GetPushedArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetLatestBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetLatestBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetLatestBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetLatestBuild(ctx, req.(*GetLatestBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetLatestPushedArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestPushedArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetLatestPushedArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetLatestPushedArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetLatestPushedArtifact(ctx, req.(*GetLatestPushedArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListReleases(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetRelease(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetLatestRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetLatestRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetLatestRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetLatestRelease(ctx, req.(*GetLatestReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLogStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaypointServer).GetLogStream(m, &waypointGetLogStreamServer{stream})
}

type Waypoint_GetLogStreamServer interface {
	Send(*LogBatch) error
	grpc.ServerStream
}

type waypointGetLogStreamServer struct {
	grpc.ServerStream
}

func (x *waypointGetLogStreamServer) Send(m *LogBatch) error {
	return x.ServerStream.SendMsg(m)
}

func _Waypoint_StartExecStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).StartExecStream(&waypointStartExecStreamServer{stream})
}

type Waypoint_StartExecStreamServer interface {
	Send(*ExecStreamResponse) error
	Recv() (*ExecStreamRequest, error)
	grpc.ServerStream
}

type waypointStartExecStreamServer struct {
	grpc.ServerStream
}

func (x *waypointStartExecStreamServer) Send(m *ExecStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointStartExecStreamServer) Recv() (*ExecStreamRequest, error) {
	m := new(ExecStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).SetConfig(ctx, req.(*ConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetConfig(ctx, req.(*ConfigGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_SetConfigSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).SetConfigSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/SetConfigSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).SetConfigSource(ctx, req.(*SetConfigSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetConfigSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetConfigSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetConfigSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetConfigSource(ctx, req.(*GetConfigSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_CreateHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).CreateHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/CreateHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).CreateHostname(ctx, req.(*CreateHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_DeleteHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).DeleteHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/DeleteHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).DeleteHostname(ctx, req.(*DeleteHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListHostnames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostnamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListHostnames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListHostnames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListHostnames(ctx, req.(*ListHostnamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_QueueJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).QueueJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/QueueJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).QueueJob(ctx, req.(*QueueJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_XListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).XListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/XListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).XListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ValidateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ValidateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ValidateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ValidateJob(ctx, req.(*ValidateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetJobStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetJobStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaypointServer).GetJobStream(m, &waypointGetJobStreamServer{stream})
}

type Waypoint_GetJobStreamServer interface {
	Send(*GetJobStreamResponse) error
	grpc.ServerStream
}

type waypointGetJobStreamServer struct {
	grpc.ServerStream
}

func (x *waypointGetJobStreamServer) Send(m *GetJobStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Waypoint_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetServerConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_SetServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).SetServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/SetServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).SetServerConfig(ctx, req.(*SetServerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_CreateSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaypointServer).CreateSnapshot(m, &waypointCreateSnapshotServer{stream})
}

type Waypoint_CreateSnapshotServer interface {
	Send(*CreateSnapshotResponse) error
	grpc.ServerStream
}

type waypointCreateSnapshotServer struct {
	grpc.ServerStream
}

func (x *waypointCreateSnapshotServer) Send(m *CreateSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Waypoint_RestoreSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).RestoreSnapshot(&waypointRestoreSnapshotServer{stream})
}

type Waypoint_RestoreSnapshotServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*RestoreSnapshotRequest, error)
	grpc.ServerStream
}

type waypointRestoreSnapshotServer struct {
	grpc.ServerStream
}

func (x *waypointRestoreSnapshotServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointRestoreSnapshotServer) Recv() (*RestoreSnapshotRequest, error) {
	m := new(RestoreSnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_BootstrapToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).BootstrapToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/BootstrapToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).BootstrapToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_DecodeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).DecodeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/DecodeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).DecodeToken(ctx, req.(*DecodeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GenerateInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GenerateInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GenerateInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GenerateInviteToken(ctx, req.(*InviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GenerateLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GenerateLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GenerateLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GenerateLoginToken(ctx, req.(*LoginTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ConvertInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ConvertInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ConvertInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ConvertInviteToken(ctx, req.(*ConvertInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetStatusReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetStatusReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetStatusReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetStatusReport(ctx, req.(*GetStatusReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_GetLatestStatusReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestStatusReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).GetLatestStatusReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/GetLatestStatusReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).GetLatestStatusReport(ctx, req.(*GetLatestStatusReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ListStatusReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ListStatusReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ListStatusReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ListStatusReports(ctx, req.(*ListStatusReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_ExpediteStatusReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpediteStatusReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).ExpediteStatusReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/ExpediteStatusReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).ExpediteStatusReport(ctx, req.(*ExpediteStatusReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_RunnerConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).RunnerConfig(&waypointRunnerConfigServer{stream})
}

type Waypoint_RunnerConfigServer interface {
	Send(*RunnerConfigResponse) error
	Recv() (*RunnerConfigRequest, error)
	grpc.ServerStream
}

type waypointRunnerConfigServer struct {
	grpc.ServerStream
}

func (x *waypointRunnerConfigServer) Send(m *RunnerConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointRunnerConfigServer) Recv() (*RunnerConfigRequest, error) {
	m := new(RunnerConfigRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_RunnerJobStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).RunnerJobStream(&waypointRunnerJobStreamServer{stream})
}

type Waypoint_RunnerJobStreamServer interface {
	Send(*RunnerJobStreamResponse) error
	Recv() (*RunnerJobStreamRequest, error)
	grpc.ServerStream
}

type waypointRunnerJobStreamServer struct {
	grpc.ServerStream
}

func (x *waypointRunnerJobStreamServer) Send(m *RunnerJobStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointRunnerJobStreamServer) Recv() (*RunnerJobStreamRequest, error) {
	m := new(RunnerJobStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_RunnerGetDeploymentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerGetDeploymentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).RunnerGetDeploymentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/RunnerGetDeploymentConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).RunnerGetDeploymentConfig(ctx, req.(*RunnerGetDeploymentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_EntrypointConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EntrypointConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaypointServer).EntrypointConfig(m, &waypointEntrypointConfigServer{stream})
}

type Waypoint_EntrypointConfigServer interface {
	Send(*EntrypointConfigResponse) error
	grpc.ServerStream
}

type waypointEntrypointConfigServer struct {
	grpc.ServerStream
}

func (x *waypointEntrypointConfigServer) Send(m *EntrypointConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Waypoint_EntrypointLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).EntrypointLogStream(&waypointEntrypointLogStreamServer{stream})
}

type Waypoint_EntrypointLogStreamServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*EntrypointLogBatch, error)
	grpc.ServerStream
}

type waypointEntrypointLogStreamServer struct {
	grpc.ServerStream
}

func (x *waypointEntrypointLogStreamServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointEntrypointLogStreamServer) Recv() (*EntrypointLogBatch, error) {
	m := new(EntrypointLogBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_EntrypointExecStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaypointServer).EntrypointExecStream(&waypointEntrypointExecStreamServer{stream})
}

type Waypoint_EntrypointExecStreamServer interface {
	Send(*EntrypointExecResponse) error
	Recv() (*EntrypointExecRequest, error)
	grpc.ServerStream
}

type waypointEntrypointExecStreamServer struct {
	grpc.ServerStream
}

func (x *waypointEntrypointExecStreamServer) Send(m *EntrypointExecResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waypointEntrypointExecStreamServer) Recv() (*EntrypointExecRequest, error) {
	m := new(EntrypointExecRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waypoint_WaypointHclFmt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaypointHclFmtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).WaypointHclFmt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/WaypointHclFmt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).WaypointHclFmt(ctx, req.(*WaypointHclFmtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertBuild(ctx, req.(*UpsertBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertPushedArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPushedArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertPushedArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertPushedArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertPushedArtifact(ctx, req.(*UpsertPushedArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertDeployment(ctx, req.(*UpsertDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertRelease(ctx, req.(*UpsertReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waypoint_UpsertStatusReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStatusReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaypointServer).UpsertStatusReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.Waypoint/UpsertStatusReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaypointServer).UpsertStatusReport(ctx, req.(*UpsertStatusReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Waypoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.Waypoint",
	HandlerType: (*WaypointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersionInfo",
			Handler:    _Waypoint_GetVersionInfo_Handler,
		},
		{
			MethodName: "ListOIDCAuthMethods",
			Handler:    _Waypoint_ListOIDCAuthMethods_Handler,
		},
		{
			MethodName: "GetOIDCAuthURL",
			Handler:    _Waypoint_GetOIDCAuthURL_Handler,
		},
		{
			MethodName: "CompleteOIDCAuth",
			Handler:    _Waypoint_CompleteOIDCAuth_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Waypoint_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Waypoint_ListUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Waypoint_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Waypoint_DeleteUser_Handler,
		},
		{
			MethodName: "UpsertAuthMethod",
			Handler:    _Waypoint_UpsertAuthMethod_Handler,
		},
		{
			MethodName: "GetAuthMethod",
			Handler:    _Waypoint_GetAuthMethod_Handler,
		},
		{
			MethodName: "ListAuthMethods",
			Handler:    _Waypoint_ListAuthMethods_Handler,
		},
		{
			MethodName: "DeleteAuthMethod",
			Handler:    _Waypoint_DeleteAuthMethod_Handler,
		},
		{
			MethodName: "ListWorkspaces",
			Handler:    _Waypoint_ListWorkspaces_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _Waypoint_GetWorkspace_Handler,
		},
		{
			MethodName: "UpsertProject",
			Handler:    _Waypoint_UpsertProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Waypoint_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _Waypoint_ListProjects_Handler,
		},
		{
			MethodName: "UpsertApplication",
			Handler:    _Waypoint_UpsertApplication_Handler,
		},
		{
			MethodName: "ListBuilds",
			Handler:    _Waypoint_ListBuilds_Handler,
		},
		{
			MethodName: "GetBuild",
			Handler:    _Waypoint_GetBuild_Handler,
		},
		{
			MethodName: "ListPushedArtifacts",
			Handler:    _Waypoint_ListPushedArtifacts_Handler,
		},
		{
			MethodName: "GetPushedArtifact",
			Handler:    _Waypoint_GetPushedArtifact_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _Waypoint_ListDeployments_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _Waypoint_ListInstances_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _Waypoint_GetDeployment_Handler,
		},
		{
			MethodName: "GetLatestBuild",
			Handler:    _Waypoint_GetLatestBuild_Handler,
		},
		{
			MethodName: "GetLatestPushedArtifact",
			Handler:    _Waypoint_GetLatestPushedArtifact_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _Waypoint_ListReleases_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _Waypoint_GetRelease_Handler,
		},
		{
			MethodName: "GetLatestRelease",
			Handler:    _Waypoint_GetLatestRelease_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Waypoint_SetConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Waypoint_GetConfig_Handler,
		},
		{
			MethodName: "SetConfigSource",
			Handler:    _Waypoint_SetConfigSource_Handler,
		},
		{
			MethodName: "GetConfigSource",
			Handler:    _Waypoint_GetConfigSource_Handler,
		},
		{
			MethodName: "CreateHostname",
			Handler:    _Waypoint_CreateHostname_Handler,
		},
		{
			MethodName: "DeleteHostname",
			Handler:    _Waypoint_DeleteHostname_Handler,
		},
		{
			MethodName: "ListHostnames",
			Handler:    _Waypoint_ListHostnames_Handler,
		},
		{
			MethodName: "QueueJob",
			Handler:    _Waypoint_QueueJob_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _Waypoint_CancelJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Waypoint_GetJob_Handler,
		},
		{
			MethodName: "_ListJobs",
			Handler:    _Waypoint_XListJobs_Handler,
		},
		{
			MethodName: "ValidateJob",
			Handler:    _Waypoint_ValidateJob_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _Waypoint_GetRunner_Handler,
		},
		{
			MethodName: "GetServerConfig",
			Handler:    _Waypoint_GetServerConfig_Handler,
		},
		{
			MethodName: "SetServerConfig",
			Handler:    _Waypoint_SetServerConfig_Handler,
		},
		{
			MethodName: "BootstrapToken",
			Handler:    _Waypoint_BootstrapToken_Handler,
		},
		{
			MethodName: "DecodeToken",
			Handler:    _Waypoint_DecodeToken_Handler,
		},
		{
			MethodName: "GenerateInviteToken",
			Handler:    _Waypoint_GenerateInviteToken_Handler,
		},
		{
			MethodName: "GenerateLoginToken",
			Handler:    _Waypoint_GenerateLoginToken_Handler,
		},
		{
			MethodName: "ConvertInviteToken",
			Handler:    _Waypoint_ConvertInviteToken_Handler,
		},
		{
			MethodName: "GetStatusReport",
			Handler:    _Waypoint_GetStatusReport_Handler,
		},
		{
			MethodName: "GetLatestStatusReport",
			Handler:    _Waypoint_GetLatestStatusReport_Handler,
		},
		{
			MethodName: "ListStatusReports",
			Handler:    _Waypoint_ListStatusReports_Handler,
		},
		{
			MethodName: "ExpediteStatusReport",
			Handler:    _Waypoint_ExpediteStatusReport_Handler,
		},
		{
			MethodName: "RunnerGetDeploymentConfig",
			Handler:    _Waypoint_RunnerGetDeploymentConfig_Handler,
		},
		{
			MethodName: "WaypointHclFmt",
			Handler:    _Waypoint_WaypointHclFmt_Handler,
		},
		{
			MethodName: "UpsertBuild",
			Handler:    _Waypoint_UpsertBuild_Handler,
		},
		{
			MethodName: "UpsertPushedArtifact",
			Handler:    _Waypoint_UpsertPushedArtifact_Handler,
		},
		{
			MethodName: "UpsertDeployment",
			Handler:    _Waypoint_UpsertDeployment_Handler,
		},
		{
			MethodName: "UpsertRelease",
			Handler:    _Waypoint_UpsertRelease_Handler,
		},
		{
			MethodName: "UpsertStatusReport",
			Handler:    _Waypoint_UpsertStatusReport_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogStream",
			Handler:       _Waypoint_GetLogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartExecStream",
			Handler:       _Waypoint_StartExecStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetJobStream",
			Handler:       _Waypoint_GetJobStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateSnapshot",
			Handler:       _Waypoint_CreateSnapshot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RestoreSnapshot",
			Handler:       _Waypoint_RestoreSnapshot_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RunnerConfig",
			Handler:       _Waypoint_RunnerConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RunnerJobStream",
			Handler:       _Waypoint_RunnerJobStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EntrypointConfig",
			Handler:       _Waypoint_EntrypointConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EntrypointLogStream",
			Handler:       _Waypoint_EntrypointLogStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EntrypointExecStream",
			Handler:       _Waypoint_EntrypointExecStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/server/proto/server.proto",
}
