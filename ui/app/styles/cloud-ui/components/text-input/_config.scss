/* --- [debug] CONFIG: Components.TextInput --- */
@use "../../theme"; // defines base CSS custom properties
@use "../../tokens/color";
@use "../../tokens/typography" as Typography;

$shadow-well: inset 0 3px 1px rgba(0, 0, 0, 0.06);
$shadow-glow: 0 0 0 3px #{rgba(color.$blue-500, 0.5)};

// Base/Valid Styles
@mixin base {
  @include Typography.Body(M);

  // Non-themable Properties
  border-radius: theme.$borderRadius;
  border-width: 1px;
  border-style: solid;
  display: block;
  height: theme.$size--xl;
  padding: 0 theme.$size--sm;

  // Themable Properties
  // These are meant to be overridden by the various state mixins,
  // custom CSS, or user UI configuration.
  background-color: var(--pds-textInput-backgroundColor, color.$white);
  border-color: var(--pds-textInput-borderColor, theme.$borderColor);
  box-shadow: var(--pds-textInput-boxShadow, $shadow-well);
  color: var(--pds-textInput-color, theme.$color);
}

// Should override most styles (except focus glow)
@mixin disabled {
  --pds-textInput-backgroundColor: #{color.$ui-gray-010};
  --pds-textInput-borderColor: #{color.$ui-gray-200} !important;
  --pds-textInput-boxShadow: none;
  --pds-textInput-color: #{color.$ui-gray-500};

  cursor: not-allowed;
}

// Should override most other styles.
@mixin focused($disabled: false) {
  @if $disabled {
    --pds-textInput-boxShadow: #{$shadow-glow};
  }
  @else {
    --pds-textInput-borderColor: #{theme.$info-base};
    --pds-textInput-boxShadow: #{$shadow-well}, #{$shadow-glow};
  }

  outline: none;
}

// Should override most "blur" styles.
@mixin hover($valid: true) {
  @if $valid {
    --pds-textInput-borderColor: #{color.$ui-gray-500};
  }
  @else {
    --pds-textInput-borderColor: #{color.$red-700};
  }
}

@mixin invalid {
  --pds-textInput-borderColor: #{theme.$failure-base};
  --pds-textInput-color: #{theme.$failure-base};
}

// mixin to wrap selector for "text-like" input elements
@mixin apply {
  /* [debug] Components.TextInput.apply() */

  input.pds-formControl { // +011
    &:not([type]), // browsers default to "text" if [type] is missing
    &[type="text"] { // +010 = (021)
      @content;
    }
  }
}

// @use 'components/text-input/config' as TextInput;
// @include TextInput.apply {
//   ...
//
//   @include TextInput.whenInvalid {
//     ...
//   }
// }
@mixin whenInvalid {
  /* [debug] Components.TextInput.whenInvalid() */

  // Visually Invalid
  .pds-invalid &,
  &.pds-invalid { // +010
    @content;
  }

  // Logically Invalid
  .pds-dirty &,
  &.pds-dirty {
    &:invalid { // +020
      @content;
    }
  }
}
