// CONFIG ({component}/config)
//   -- no module should generate CSS on @use/@forward/@import
//   -- should be able to @use without pulling in CSS styles
//
// Contents:
//   * Variables
//   * Mixins
//   * Functions
//   * sub-modules
//   * etc.

// RESETS ({component}/reset)
//   -- normalize element/component across browsers

// COMPONENT STYLES
//   -- this is what actually writes CSS styles for browser consumption
//   -- all CSS should load on `@use "components/{component}"`
//
// Contents:
//   * Base/Default component styles
//   * Variant component styles
//   * Sub-components (if applicable)
//   * Custom Elements (if applicable)

// HELPERS (_helpers.scss)
//   -- CSS utility classes for use directly in markup
//   -- CSS properties MAY use !important
//      -- if so, their class name should be suffixed with `\!`
//         (valid character for class name per w3c spec, but CSS
//         syntax uses `!` as a keyword/operator.
//         Doing so communicates that an applied class applies
//         styling via `!important`, without needing to look at
//         the CSS definition.
//
// Examples:
//   * horizontal/inline alignment (left, center, right, etc.)
//   * vertical/block alignment (top, middle, bottom, etc.)
//   * word wrapping config (word-wrap, word-break, white-space, etc.)

// OVERRIDES (_overrides.scss)
//   -- Should only be used as a last resort.
//   -- provides a dedicated space to perform "hacks" in a crunch
//   -- isolates non-optimum code from the rest
//   -- identifies technical debt
